<?php header('Content-type: text/html'); exit(die('<!doctype html><html lang=en-us prefix="og: https://ogp.me/ns#"><meta charset=utf-8><meta name=keywords content="Data Structures,Algorithms,Python,Java,C,C++,JavaScript,Android Development,SQL,Data Science,Machine Learning,PHP,Web Development,System Design,Tutorial,Technical Blogs,Interview Experience,Interview Preparation,Programming,Competitive Programming,SDE Sheet,Job-a-thon,Coding Contests,GATE CSE,HTML,CSS,React,NodeJS,Placement,Aptitude,Quiz,Computer Science,Programming Examples,Nosy.com Courses,Puzzles"><meta name=viewport content="width=device-width,initial-scale=1,maximum-scale=1"><link rel="shortcut icon" href=https://media.n0sy.com/wp-content/cdn-uploads/gfg_favicon.png type=image/x-icon><meta name=theme-color content="#308D46"><meta name=image property="og:image" content="https://media.n0sy.com/wp-content/cdn-uploads/gfg_200x200-min.png"><meta property="og:image:type" content="image/png"><meta property="og:image:width" content="200"><meta property="og:image:height" content="200"><meta name=facebook-domain-verification content="xo7t4ve2wn3ywfkjdvwbrk01pvdond"><script defer src=https://apis.google.com/js/platform.js></script><script async src=//cdnjs.cloudflare.com/ajax/libs/require.js/2.1.14/require.min.js></script><title>Nosy.com Boolean Parenthesization Problem | DP-37 - Nosy.com</title><link rel=profile href=https://gmpg.org/xfn/11><link rel=pingback href><script type=application/ld+json>{"@context":"https://schema.org","@type":"Organization","name":"Nosy.com","url":"https://www.n0sy.com/","logo":"https://media.n0sy.com/wp-content/cdn-uploads/20200817185016/gfg_complete_logo_2x-min.png","description":"A computer science portal for geeks. It contains well written, well thought and well explained computer science and programming articles, quizzes and practice/competitive programming/company interview Questions.","founder":[{"@type":"Person","name":"Sandeep Jain","url":"https://in.linkedin.com/in/sandeep-jain-b3940815"}],"sameAs":["https://www.facebook.com/n0sy.com/","https://twitter.com/Nosy.com","https://www.linkedin.com/company/1299009","https://www.youtube.com/Nosy.comvideos/"]}</script><script>var arrPostCat=new Array,arrPostCatName="DynamicProgramming",tIds,domain,arrPost,post_id,post_type,post_slug,ip,post_title,post_status,practiceAPIURL,practiceURL,post_date,commentSysUrl,link_on_code_run,link_search_modal_top,isAdminLoggedIn,postAdApiUrlString;arrPostCat.push(\'1746\'),tIds="1746,1942,1412,104",domain=1,arrPost=new Array,post_id="129692",post_type="post",post_slug=window.location.href,ip="34.222.186.194",post_title="Boolean Parenthesization Problem  | DP-37",post_status="publish",practiceAPIURL="https://practiceapi.n0sy.com/",practiceURL="https://practice.n0sy.com/",post_date="2014-06-15 17:44:11",commentSysUrl="https://discuss.n0sy.com/commentEmbedV2.js",link_on_code_run=\'<br><br><a href="https://practice.n0sy.com/explore?page=1&sortBy=submissions&utm_source=practice&utm_medium=IDE&utm_campaign=practice-IDE">Improve your Coding Skills with Practice</a>\',link_search_modal_top=\'\',isAdminLoggedIn=0,postAdApiUrlString=\'1744/1746/1942/1412/104/\'</script><meta name=description content="A Computer Science portal for geeks. It contains well written, well thought and well explained computer science and programming articles, quizzes and practice/competitive programming/company interview Questions."><link rel=canonical href=https://www.n0sy.com/boolean-parenthesization-problem-dp-37/><meta property="og:locale" content="en_US"><meta property="og:type" content="article"><meta property="og:title" content="Boolean Parenthesization Problem | DP-37 - Nosy.com"><meta property="og:description" content="A Computer Science portal for geeks. It contains well written, well thought and well explained computer science and programming articles, quizzes and practice/competitive programming/company interview Questions."><meta property="og:url" content="https://www.n0sy.com/boolean-parenthesization-problem-dp-37/"><meta property="og:site_name" content="Nosy.com"><meta property="article:tag" content="Amazon"><meta property="article:tag" content="Linkedin"><meta property="article:tag" content="Microsoft"><meta property="article:section" content="Dynamic Programming"><meta property="article:published_time" content="2014-06-15T17:44:11+00:00"><meta property="article:modified_time" content="2022-06-28T20:20:58+00:00"><meta property="og:updated_time" content="2022-06-28T20:20:58+00:00"><meta property="og:image" content="https://media.n0sy.com/wp-content/cdn-uploads/trueeq.png"><meta property="og:image:secure_url" content="https://media.n0sy.com/wp-content/cdn-uploads/trueeq.png"><meta property="og:image" content="https://media.n0sy.com/wp-content/cdn-uploads/falseeq.png"><meta property="og:image:secure_url" content="https://media.n0sy.com/wp-content/cdn-uploads/falseeq.png"><script type=application/ld+json>{"@context":"https:\\/\\/schema.org","@type":"Organization","url":"https:\\/\\/www.n0sy.com\\/","sameAs":[],"@id":"https:\\/\\/www.n0sy.com\\/#organization","name":"Nosy.com","logo":"https:\\/\\/www.n0sy.com\\/wp-content\\/uploads\\/gfg_200X200-1.png"}</script><link rel=dns-prefetch href=//www.n0sy.com><link rel=dns-prefetch href=//s.w.org><link rel=alternate type=application/rss+xml title="Nosy.com &#187; Feed" href=https://www.n0sy.com/feed/><link rel=alternate type=application/rss+xml title="Nosy.com &#187; Comments Feed" href=https://www.n0sy.com/comments/feed/><link rel=alternate type=application/rss+xml title="Nosy.com &#187; Boolean Parenthesization Problem | DP-37 Comments Feed" href=https://www.n0sy.com/boolean-parenthesization-problem-dp-37/feed/><script>window._wpemojiSettings={baseUrl:"https://s.w.org/images/core/emoji/11/72x72/",ext:".png",svgUrl:"https://s.w.org/images/core/emoji/11/svg/",svgExt:".svg",source:{concatemoji:"https://www.n0sy.com/wp-includes/js/wp-emoji-release.min.js?ver=4.9.8"}},!function(k,f,a){function i(d,e){var a=String.fromCharCode,f,g;return c.clearRect(0,0,b.width,b.height),c.fillText(a.apply(this,d),0,0),f=b.toDataURL(),c.clearRect(0,0,b.width,b.height),c.fillText(a.apply(this,e),0,0),g=b.toDataURL(),f===g}function l(b){var a;if(!c||!c.fillText)return!1;switch(c.textBaseline="top",c.font="600 32px Arial",b){case"flag":return!(a=i([55356,56826,55356,56819],[55356,56826,8203,55356,56819]))&&(a=i([55356,57332,56128,56423,56128,56418,56128,56421,56128,56430,56128,56423,56128,56447],[55356,57332,8203,56128,56423,8203,56128,56418,8203,56128,56421,8203,56128,56430,8203,56128,56423,8203,56128,56447]),!a);case"emoji":return a=i([55358,56760,9792,65039],[55358,56760,8203,9792,65039]),!a}return!1}function j(b){var a=f.createElement("script");a.src=b,a.defer=a.type="text/javascript",f.getElementsByTagName("head")[0].appendChild(a)}var e,h,d,g,b=f.createElement("canvas"),c=b.getContext&&b.getContext("2d");for(g=Array("flag","emoji"),a.supports={everything:!0,everythingExceptFlag:!0},d=0;d<g.length;d++)a.supports[g[d]]=l(g[d]),a.supports.everything=a.supports.everything&&a.supports[g[d]],"flag"!==g[d]&&(a.supports.everythingExceptFlag=a.supports.everythingExceptFlag&&a.supports[g[d]]);a.supports.everythingExceptFlag=a.supports.everythingExceptFlag&&!a.supports.flag,a.DOMReady=!1,a.readyCallback=function(){a.DOMReady=!0},a.supports.everything||(h=function(){a.readyCallback()},f.addEventListener?(f.addEventListener("DOMContentLoaded",h,!1),k.addEventListener("load",h,!1)):(k.attachEvent("onload",h),f.attachEvent("onreadystatechange",function(){"complete"===f.readyState&&a.readyCallback()})),e=a.source||{},e.concatemoji?j(e.concatemoji):e.wpemoji&&e.twemoji&&(j(e.twemoji),j(e.wpemoji)))}(window,document,window._wpemojiSettings)</script><style>img.wp-smiley,img.emoji{display:inline!important;border:0!important;box-shadow:none!important;height:1em!important;width:1em!important;margin:0 .07em!important;vertical-align:-.1em!important;background:0!important;padding:0!important}</style><link rel=stylesheet id=custom-style-css href="https://www.n0sy.com/wp-content/themes/iconic-one/css/gfg.min.css?ver=9.9" media=all><script src="https://code.jquery.com/jquery-3.1.1.min.js?ver=3.1.1"></script><script src="https://code.jquery.com/jquery-migrate-3.0.0.min.js?ver=3.0.0"></script><script>var gfgObject={authUrl:"https://auth.n0sy.com/",writeApiUrl:"https://apiwrite.n0sy.com/",writeUrl:"https://write.n0sy.com/",utilUrl:"https://util.n0sy.com/",apiUrl:"https://api.n0sy.com/",cfApiUrl:"https://gfgapi.n0sy.com/",baseCompilerURL:"https://codejudge.n0sy.com/",idePageBaseUrl:"https://ide.n0sy.com/",gfgApiScriptUrl:"https://apiscript.n0sy.com/"}</script><script async src="https://www.n0sy.com/wp-content/themes/iconic-one/js/gfg.min.js?ver=11.37"></script><link rel=https://api.w.org/ href=https://www.n0sy.com/wp-json/><link rel=edituri type=application/rsd+xml title=RSD href=https://www.cdn.n0sy.com/xmlrpc.php?rsd><link rel=wlwmanifest type=application/wlwmanifest+xml href=https://www.cdn.n0sy.com/wp-includes/wlwmanifest.xml><meta name=generator content="WordPress 4.9.8"><link rel=shortlink href="https://www.n0sy.com/?p=129692"><link rel=alternate type=application/json+oembed href="https://www.n0sy.com/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fwww.n0sy.com%2Fboolean-parenthesization-problem-dp-37%2F"><link rel=alternate type=text/xml+oembed href="https://www.n0sy.com/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fwww.n0sy.com%2Fboolean-parenthesization-problem-dp-37%2F&format=xml"><style>#wpadminbar{background:red!important}</style><style id=custom-background-css>body.custom-background{background-color:#fff}</style><link rel=amphtml href=https://www.n0sy.com/boolean-parenthesization-problem-dp-37/amp/><link rel=icon href=https://www.n0sy.com/wp-content/uploads/gfg_200X200-100x100.png sizes=32x32><link rel=icon href=https://www.n0sy.com/wp-content/uploads/gfg_200X200.png sizes=192x192><link rel=apple-touch-icon-precomposed href=https://www.n0sy.com/wp-content/uploads/gfg_200X200.png><meta name=msapplication-TileImage content="https://www.n0sy.com/wp-content/uploads/gfg_200X200.png"><script async src=https://www.googletagservices.com/tag/js/gpt.js></script><script async src="https://www.n0sy.com/wp-content/themes/iconic-one/js/prebid.js?ver=0.7"></script><script async src="https://cdnads.n0sy.com/gfg_ads.min.js?ver=0.1"></script><style>@media(max-width:1043px) and (min-width:992px){.hide-1043992{display:none!important}}</style><script async src="https://www.googletagmanager.com/gtag/js?id=G-DWCCJLKX3X"></script><script>window.dataLayer=window.dataLayer||[];function gtag(){dataLayer.push(arguments)}gtag(\'js\',new Date),gtag(\'config\',\'AW-474915276\'),gtag(\'config\',\'G-DWCCJLKX3X\'),gtag(\'config\',\'AW-796001856\')</script><script>jQuery(document).ready(function(){jQuery(".nav_tab").click(function(){jQuery(".nav_tab.active").removeClass("active"),jQuery(this).addClass("active"),jQuery(this).hasClass("article")?(jQuery(".text ,.main_wrapper .article-buttons").show(),jQuery(".bottom-comment-section").hide(),$(\'html,body\').animate({scrollTop:$(".bottom-comment-section").offset().top-134},\'slow\')):jQuery(".text ,.main_wrapper .article-buttons").hide()})})</script><body class="post-template-default single single-post postid-129692 single-format-standard custom-background custom-background-white"><script>const gfgThemeList=Object.freeze({LIGHT:"gfgThemeLight",DARK:"gfgThemeDark"}),getThemeFromCookie=()=>{let a="",c=document.cookie,b=c.split(";");for(let c=0;c<b.length;c++){let d=b[c].split("=");d[0].trim()=="gfg_theme"&&(a=d[1].trim())}return a},toggleNineDotMenuImages=a=>{jQuery(".nineDot-menu_left .nineDot-menu_item").each((g,e)=>{let d=jQuery(e).find("img"),f=d.attr("src"),[b,c]=/(.*)\\.svg/g.exec(f);!b.includes("%40dark")&&a===gfgThemeList.DARK?b=`${c}%40dark.svg`:b.includes("%40dark")&&a===gfgThemeList.LIGHT&&(b=`${c.substr(0,c.length-7)}.svg`),d.attr("src",b)})};var isDarkMode=getThemeFromCookie()==gfgThemeList.DARK;document.querySelector("body").setAttribute("data-dark-mode",isDarkMode)</script><z class=header-main__wrapper><a class=gfg-stc style=top:0 href=#main>Skip to content</a>
<a href=https://www.n0sy.com/ aria-label=Logo class=header-main__logo><z class=_logo><img class=gfg_logo_img src=https://media.n0sy.com/gfg-gg-logo.svg alt=Nosy.com></z></a><z class=header-main__container><y class=hamburger-menu><y class=gfg-burger-1></y><y class=gfg-burger-2></y><y class=gfg-burger-3></y></y><ul class=header-main__list><li class=header-main__list-item data-parent=false aria-expanded=true data-expandable=true><y>Courses</y><i class="gfg-icon gfg-icon_arrow-down gfg-icon_header"></i><ul class=mega-dropdown><li class=mega-dropdown__list-item data-parent=true aria-expanded=true data-expandable=true><y>For Working Professionals</y><i class="gfg-icon gfg-icon_arrow-right"></i><ul class=mega-dropdown><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://practice.n0sy.com/courses/geeks-classes-live?utm_source=gfg&utm_medium=Submenu&utm_campaign=courses-submenu" target=_self>DSA Classes (Live)</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://practice.n0sy.com/courses/system-design-live?utm_source=gfg&utm_medium=Submenu&utm_campaign=courses-submenu" target=_self>System Design (Live)</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://practice.n0sy.com/courses/java-backend-live?utm_source=gfg&utm_medium=Submenu&utm_campaign=courses-submenu" target=_self>Java Backend Developer (Live)</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://practice.n0sy.com/courses/full-stack-node?utm_source=gfg&utm_medium=Submenu&utm_campaign=courses-submenu" target=_self>Full Stack (Live)</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://practice.n0sy.com/courses/category/all?courseType=live&utm_source=gfg&utm_medium=Submenu&utm_campaign=courses-submenu" target=_self>Explore More Live Courses</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://practice.n0sy.com/courses/dsa-self-paced?utm_source=gfg&utm_medium=Submenu&utm_campaign=courses-submenu" target=_self>DSA (Self-Paced)</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://practice.n0sy.com/courses/SDE-theory?utm_source=gfg&utm_medium=Submenu&utm_campaign=courses-submenu" target=_self>SDE Theory (Self-Paced)</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://practice.n0sy.com/courses/category/development?utm_source=gfg&utm_medium=Submenu&utm_campaign=courses-submenu" target=_self>All Development Courses (Self-Paced)</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://practice.n0sy.com/courses/category/all?courseType=online&utm_source=gfg&utm_medium=Submenu&utm_campaign=courses-submenu" target=_self>Explore More Self-Paced Courses</a></li></ul></li><li class=mega-dropdown__list-item data-parent=true aria-expanded=true data-expandable=true><y>For Students</y><i class="gfg-icon gfg-icon_arrow-right"></i><ul class=mega-dropdown><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://practice.n0sy.com/courses/competitive-programming-live?utm_source=gfg&utm_medium=Submenu&utm_campaign=courses-submenu" target=_self>Competitive Programming (Live)</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://practice.n0sy.com/courses/gate-live-course?utm_source=gfg&utm_medium=Submenu&utm_campaign=courses-submenu" target=_self>GATE Course 2023 (Live)</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://practice.n0sy.com/courses/data-science-live?utm_source=gfg&utm_medium=Submenu&utm_campaign=courses-submenu" target=_self>Data Science (Live)</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://practice.n0sy.com/courses/category/all?courseType=live&utm_source=gfg&utm_medium=Submenu&utm_campaign=courses-submenu" target=_self>Explore More Live Courses</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://practice.n0sy.com/courses/dsa-self-paced?utm_source=gfg&utm_medium=Submenu&utm_campaign=courses-submenu" target=_self>DSA (Self-Paced)</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://practice.n0sy.com/courses/complete-interview-preparation?utm_source=gfg&utm_medium=Submenu&utm_campaign=courses-submenu" target=_self>CIP (Self-Paced)</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href=https://www.n0sy.com/a-freshers-guide-to-programming/ target=_self>JAVA / Python / C++ (Self-Paced)</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://practice.n0sy.com/courses/category/all?courseType=online&utm_source=gfg&utm_medium=Submenu&utm_campaign=courses-submenu" target=_self>Explore More Self-Paced Courses</a></li></ul></li><li class=mega-dropdown__list-item data-parent=true aria-expanded=true data-expandable=true><y>School Courses</y><i class="gfg-icon gfg-icon_arrow-right"></i><ul class=mega-dropdown><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://practice.n0sy.com/courses/school-guide-course?utm_source=gfg&utm_medium=submenu&utm_campaign=courses-submenu" target=_self>School Guide</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://practice.n0sy.com/courses/python-programming-course?utm_source=gfg&utm_medium=submenu&utm_campaign=courses-submenu" target=_self>Python Programming</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://practice.n0sy.com/courses/app-lab?utm_source=gfg&utm_medium=submenu&utm_campaign=courses-submenu" target=_self>Learn To Make Apps</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://practice.n0sy.com/courses/category/school?utm_source=gfg&utm_medium=submenu&utm_campaign=courses-submenu" target=_self>Explore more</a></li></ul></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://practice.n0sy.com/courses?utm_source=gfg&utm_medium=submenu&utm_campaign=courses-submenu" class=remove-anchor__decoration target=_self>All Courses</a></li></ul></li><li class=header-main__list-item data-parent=true aria-expanded=true data-expandable=true><y>Tutorials</y><i class="gfg-icon gfg-icon_arrow-down gfg-icon_header"></i><ul class=mega-dropdown><li class=mega-dropdown__list-item data-parent=true aria-expanded=true data-expandable=true><y>Algorithms</y><i class="gfg-icon gfg-icon_arrow-right"></i><ul class=mega-dropdown><li class=mega-dropdown__list-item data-parent=true aria-expanded=true data-expandable=true><y>Analysis of Algorithms</y><i class="gfg-icon gfg-icon_arrow-right"></i><ul class=mega-dropdown><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/analysis-of-algorithms-set-1-asymptotic-analysis/?ref=ghm" target=_self>Asymptotic Analysis</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/analysis-of-algorithms-set-2-asymptotic-analysis/?ref=ghm" target=_self>Worst, Average and Best Cases</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/analysis-of-algorithms-set-3asymptotic-notations/?ref=ghm" target=_self>Asymptotic Notations</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/analysis-of-algorithems-little-o-and-little-omega-notations/?ref=ghm" target=_self>Little o and little omega notations</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/lower-and-upper-bound-theory/?ref=ghm" target=_self>Lower and Upper Bound Theory</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/analysis-of-algorithms-set-4-analysis-of-loops/?ref=ghm" target=_self>Analysis of Loops</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/analysis-algorithm-set-4-master-method-solving-recurrences/?ref=ghm" target=_self>Solving Recurrences</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/analysis-algorithm-set-5-amortized-analysis-introduction/?ref=ghm" target=_self>Amortized Analysis</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/g-fact-86/?ref=ghm" target=_self>What does \'Space Complexity\' mean ?</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/pseudo-polynomial-in-algorithms/?ref=ghm" target=_self>Pseudo-polynomial Algorithms</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/polynomial-time-approximation-scheme/?ref=ghm" target=_self>Polynomial Time Approximation Scheme</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/a-time-complexity-question/?ref=ghm" target=_self>A Time Complexity Question</a></li></ul></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/searching-algorithms/?ref=ghm" target=_self>Searching Algorithms</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/sorting-algorithms/?ref=ghm" target=_self>Sorting Algorithms</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/graph-data-structure-and-algorithms/?ref=ghm" target=_self>Graph Algorithms</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/algorithms-gq/pattern-searching/?ref=ghm" target=_self>Pattern Searching</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/geometric-algorithms/?ref=ghm" target=_self>Geometric Algorithms</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/mathematical-algorithms/?ref=ghm" target=_self>Mathematical</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/bitwise-algorithms/?ref=ghm" target=_self>Bitwise Algorithms</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/randomized-algorithms/?ref=ghm" target=_self>Randomized Algorithms</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/greedy-algorithms/?ref=ghm" target=_self>Greedy Algorithms</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/dynamic-programming/?ref=ghm" target=_self>Dynamic Programming</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/divide-and-conquer/?ref=ghm" target=_self>Divide and Conquer</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/backtracking-algorithms/?ref=ghm" target=_self>Backtracking</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/branch-and-bound-algorithm/?ref=ghm" target=_self>Branch and Bound</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/fundamentals-of-algorithms/?ref=ghm" target=_self>All Algorithms</a></li></ul></li><li class=mega-dropdown__list-item data-parent=true aria-expanded=true data-expandable=true><y>Data Structures</y><i class="gfg-icon gfg-icon_arrow-right"></i><ul class=mega-dropdown><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/array-data-structure/?ref=ghm" target=_self>Arrays</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/data-structures/linked-list/?ref=ghm" target=_self>Linked List</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/stack-data-structure/?ref=ghm" target=_self>Stack</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/queue-data-structure/?ref=ghm" target=_self>Queue</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/binary-tree-data-structure/?ref=ghm" target=_self>Binary Tree</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/binary-search-tree-data-structure/?ref=ghm" target=_self>Binary Search Tree</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/heap-data-structure/?ref=ghm" target=_self>Heap</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/hashing-data-structure/?ref=ghm" target=_self>Hashing</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/graph-data-structure-and-algorithms/?ref=ghm" target=_self>Graph</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/advanced-data-structures/?ref=ghm" target=_self>Advanced Data Structure</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/matrix/?ref=ghm" target=_self>Matrix</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/string-data-structure/?ref=ghm" target=_self>Strings</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/data-structures/?ref=ghm" target=_self>All Data Structures</a></li></ul></li><li class=mega-dropdown__list-item data-parent=true aria-expanded=true data-expandable=true><y>Interview Corner</y><i class="gfg-icon gfg-icon_arrow-right"></i><ul class=mega-dropdown><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/company-preparation/?ref=ghm" target=_self>Company Preparation</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/interview-preparation-for-software-developer/?ref=ghm" target=_self>Top Topics</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://practice.n0sy.com/company-tags/?ref=ghm" target=_self>Practice Company Questions</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/company-interview-corner/?ref=ghm" target=_self>Interview Experiences</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/experienced-interview-experiences-company-wise/?ref=ghm" target=_self>Experienced Interviews</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/internship-interview-experiences-company-wise/?ref=ghm" target=_self>Internship Interviews</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/competitive-programming-a-complete-guide/?ref=ghm" target=_self>Competititve Programming</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/software-design-patterns/?ref=ghm" target=_self>Design Patterns</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href=https://www.n0sy.com/system-design-tutorial/ target=_self>System Design Tutorial</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/quiz-corner-gq/?ref=ghm" target=_self>Multiple Choice Quizzes</a></li></ul></li><li class=mega-dropdown__list-item data-parent=true aria-expanded=true data-expandable=true><y>Languages</y><i class="gfg-icon gfg-icon_arrow-right"></i><ul class=mega-dropdown><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/c-programming-language/?ref=ghm" target=_self>C</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/c-plus-plus/?ref=ghm" target=_self>C++</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/java/?ref=ghm" target=_self>Java</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/python-programming-language/?ref=ghm" target=_self>Python</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/csharp-programming-language/?ref=ghm" target=_self>C#</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/sql-tutorial/?ref=ghm" target=_self>SQL</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/scala-programming-language/?ref=ghm" target=_self>Scala</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/perl-programming-language/?ref=ghm" target=_self>Perl</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/golang/?ref=ghm" target=_self>Go Language</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/kotlin-programming-language/?ref=ghm" target=_self>Kotlin</a></li></ul></li><li class=mega-dropdown__list-item data-parent=true aria-expanded=true data-expandable=true><y>Web Development</y><i class="gfg-icon gfg-icon_arrow-right"></i><ul class=mega-dropdown><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/html-tutorials/?ref=ghm" target=_self>HTML</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/css-tutorials/?ref=ghm" target=_self>CSS</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/javascript-tutorial/?ref=ghm" target=_self>JavaScript</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/php-tutorials/?ref=ghm" target=_self>PHP</a></li><li class=mega-dropdown__list-item data-parent=true aria-expanded=true data-expandable=true><y>CSS Frameworks</y><i class="gfg-icon gfg-icon_arrow-right"></i><ul class=mega-dropdown><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/bootstrap/?ref=ghm" target=_self>Bootstrap</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/tailwind-css/?ref=ghm" target=_self>Tailwind CSS</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/foundation/?ref=ghm" target=_self>Foundation CSS</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/materialize-css/?ref=ghm" target=_self>Materialize CSS</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/bulma/?ref=ghm" target=_self>Bulma</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/pure-css/?ref=ghm" target=_self>Pure CSS</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/primer-css/ref=ghm" target=_self>Primer CSS</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/blaze-ui/ref=ghm" target=_self>Blaze UI</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/semantic-ui/ref=ghm" target=_self>Semantic UI</a></li></ul></li><li class=mega-dropdown__list-item data-parent=true aria-expanded=true data-expandable=true><y>JavaScript Frameworks</y><i class="gfg-icon gfg-icon_arrow-right"></i><ul class=mega-dropdown><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/angularjs/?ref=ghm" target=_self>AngularJS</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/nodejs/?ref=ghm" target=_self>NodeJS</a></li></ul></li><li class=mega-dropdown__list-item data-parent=true aria-expanded=true data-expandable=true><y>JavaScript Libraries</y><i class="gfg-icon gfg-icon_arrow-right"></i><ul class=mega-dropdown><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/jquery-tutorials/?ref=ghm" target=_self>jQuery</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/reactjs-tutorials/?ref=ghm" target=_self>ReactJS</a></li></ul></li></ul></li><li class=mega-dropdown__list-item data-parent=true aria-expanded=true data-expandable=true><y>ML & Data Science</y><i class="gfg-icon gfg-icon_arrow-right"></i><ul class=mega-dropdown><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/machine-learning/?ref=ghm" target=_self>Machine Learning</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/data-science-tutorial/?ref=ghm" target=_self>Data Science</a></li></ul></li><li class=mega-dropdown__list-item data-parent=true aria-expanded=true data-expandable=true><y>CS Subjects</y><i class="gfg-icon gfg-icon_arrow-right"></i><ul class=mega-dropdown><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/engineering-mathematics-tutorials/?ref=ghm" target=_self>Mathematics</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/operating-systems/?ref=ghm" target=_self>Operating System</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/dbms/?ref=ghm" target=_self>DBMS</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/computer-network-tutorials/?ref=ghm" target=_self>Computer Networks</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/computer-organization-and-architecture-tutorials/?ref=ghm" target=_self>Computer Organization and Architecture</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/theory-of-computation-automata-tutorials/?ref=ghm" target=_self>Theory of Computation</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/compiler-design-tutorials/?ref=ghm" target=_self>Compiler Design</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/digital-electronics-logic-design-tutorials/#blg/?ref=ghm" target=_self>Digital Logic</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/software-engineering/?ref=ghm" target=_self>Software Engineering</a></li></ul></li><li class=mega-dropdown__list-item data-parent=true aria-expanded=true data-expandable=true><y>GATE</y><i class="gfg-icon gfg-icon_arrow-right"></i><ul class=mega-dropdown><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/gate-cs-notes-gq/?ref=ghm" target=_self>GATE Computer Science Notes</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/lmns-gq/?ref=ghm" target=_self>Last Minute Notes</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/gate-corner-2-gq/?ref=ghm" target=_self>GATE CS Solved Papers</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/original-gate-previous-year-question-papers-cse-and-it-gq/?ref=ghm" target=_self>GATE CS Original Papers and Official Keys</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/gate-cs-2021-official-important-dates/?ref=ghm" target=_self>GATE 2021 Dates</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/gate-cs-2021-revised-syllabus/?ref=ghm" target=_self>GATE CS 2021 Syllabus</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/important-topics-prepare-gate-2020-computer-science-paper/?ref=ghm" target=_self>Important Topics for GATE CS</a></li></ul></li><li class=mega-dropdown__list-item data-parent=true aria-expanded=true data-expandable=true><y>Software Designs</y><i class="gfg-icon gfg-icon_arrow-right"></i><ul class=mega-dropdown><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/software-design-patterns/?ref=ghm" target=_self>Software Design Patterns</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/system-design-tutorial/?ref=ghm" target=_self>System Design Tutorial</a></li></ul></li><li class=mega-dropdown__list-item data-parent=true aria-expanded=true data-expandable=true><y>GFG Sheets</y><i class="gfg-icon gfg-icon_arrow-right"></i><ul class=mega-dropdown><li class=mega-dropdown__list-item data-parent=true aria-expanded=true data-expandable=true><y>Web Dev Cheat Sheets</y><i class="gfg-icon gfg-icon_arrow-right"></i><ul class=mega-dropdown><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/html-cheat-sheet-a-basic-guide-to-html/?ref=ghm" target=_self>HTML Cheat Sheet</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/css-cheat-sheet-a-basic-guide-to-css/?ref=ghm" target=_self>CSS Cheat Sheet</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/javascript-cheat-sheet-a-basic-guide-to-javascript/?ref=ghm" target=_self>JS Cheat Sheet</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/jquery-cheat-sheet-a-basic-guide-to-jquery/?ref=ghm" target=_self>jQuery Cheat Sheet</a></li></ul></li><li class=mega-dropdown__list-item data-parent=true aria-expanded=true data-expandable=true><y>Company-Wise SDE Sheets</y><i class="gfg-icon gfg-icon_arrow-right"></i><ul class=mega-dropdown><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/facebookmeta-sde-sheet-a-guide-for-facebook-interview-preparation/?ref=ghm" target=_self>Facebook SDE Sheet</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/amazon-sde-sheet-a-guide-for-amazon-sde-interview-preparation/?ref=ghm" target=_self>Amazon SDE Sheet</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/apple-sde-sheet-a-guide-for-apple-interview-preparation/?ref=ghm" target=_self>Apple SDE Sheet</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/netflix-sde-sheet-interview-questions-and-answers/?ref=ghm" target=_self>Netflix SDE Sheet</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/google-sde-sheet-a-guide-for-google-interview-preparation/?ref=ghm" target=_self>Google SDE Sheet</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/wipro-coding-sheet-interview-preparation/?ref=ghm" target=_self>Wipro Coding Sheet</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/infosys-coding-sheet-interview-preparation/?ref=ghm" target=_self>Infosys Coding Sheet</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/tcs-nqt-coding-sheet-exam-preparation/?ref=ghm" target=_self>TCS Coding Sheet</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/cognizant-coding-sheet-interview-preparation/?ref=ghm" target=_self>Cognizant Coding Sheet</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/hcl-coding-sheet-interview-preparation/?ref=ghm" target=_self>HCL Coding Sheet</a></li></ul></li><li class=mega-dropdown__list-item data-parent=true aria-expanded=true data-expandable=true><y>DSA Sheets</y><i class="gfg-icon gfg-icon_arrow-right"></i><ul class=mega-dropdown><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/sde-sheet-a-complete-guide-for-sde-preparation/?ref=ghm" target=_self>SDE Sheet</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/must-do-coding-questions-for-companies-like-amazon-microsoft-adobe/?ref=ghm" target=_self>FAANG Coding Sheet</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/dsa-sheet-by-love-babbar/?ref=ghm" target=_self>Love Babbar Sheet</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/must-do-questions-for-companies-like-tcs-cts-hcl-ibm/?ref=ghm" target=_self>Mass Recruiter Sheet</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/must-do-coding-questions-for-product-based-companies/?ref=ghm" target=_self>Product-Based Coding Sheet</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/must-coding-questions-company-wise/?ref=ghm" target=_self>Company-Wise Preparation Sheet</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/top-50-array-coding-problems-for-interviews/?ref=ghm" target=_self>Array Sheet</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/top-50-string-coding-problems-for-interviews/?ref=ghm" target=_self>String Sheet</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/top-50-tree-coding-problems-for-interviews/?ref=ghm" target=_self>Tree Sheet</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/top-50-graph-coding-problems-for-interviews/?ref=ghm" target=_self>Graph Sheet</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/top-50-dynamic-programming-coding-problems-for-interviews/?ref=ghm" target=_self>DP Sheet</a></li></ul></li></ul></li><li class=mega-dropdown__list-item data-parent=true aria-expanded=true data-expandable=true><y>School Learning</y><i class="gfg-icon gfg-icon_arrow-right"></i><ul class=mega-dropdown><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/school-learning/?ref=ghm" target=_self>School Programming</a></li><li class=mega-dropdown__list-item data-parent=true aria-expanded=true data-expandable=true><y>Mathematics</y><i class="gfg-icon gfg-icon_arrow-right"></i><ul class=mega-dropdown><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/number-system-and-arithmetic/?ref=ghm" target=_self>Number System</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/algebra/?ref=ghm" target=_self>Algebra</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/trigonometry/?ref=ghm" target=_self>Trigonometry</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/statistics/?ref=ghm" target=_self>Statistics</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/probability-in-maths/?ref=ghm" target=_self>Probability</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/geometry/?ref=ghm" target=_self>Geometry</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/mensuration/?ref=ghm" target=_self>Mensuration</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/calculus/?ref=ghm" target=_self>Calculus</a></li></ul></li><li class=mega-dropdown__list-item data-parent=true aria-expanded=true data-expandable=true><y>Maths Notes (Class 8-12)</y><i class="gfg-icon gfg-icon_arrow-right"></i><ul class=mega-dropdown><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/cbse-class-8-maths-notes/?ref=ghm" target=_self>Class 8 Notes</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/cbse-class-9-maths-notes/?ref=ghm" target=_self>Class 9 Notes</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/cbse-class-10-maths-notes/?ref=ghm" target=_self>Class 10 Notes</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/cbse-class-11-maths-notes/?ref=ghm" target=_self>Class 11 Notes</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/cbse-class-12-maths-notes/?ref=ghm" target=_self>Class 12 Notes</a></li></ul></li><li class=mega-dropdown__list-item data-parent=true aria-expanded=true data-expandable=true><y>NCERT Solutions</y><i class="gfg-icon gfg-icon_arrow-right"></i><ul class=mega-dropdown><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/ncert-solutions-for-class-8-maths/?ref=ghm" target=_self>Class 8 Maths Solution</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/ncert-solutions-for-class-9-maths/?ref=ghm" target=_self>Class 9 Maths Solution</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/ncert-solutions-for-class-10-maths/?ref=ghm" target=_self>Class 10 Maths Solution</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/ncert-solutions-for-class-11-maths/?ref=ghm" target=_self>Class 11 Maths Solution</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/ncert-solutions-for-class-12-maths/?ref=ghm" target=_self>Class 12 Maths Solution</a></li></ul></li><li class=mega-dropdown__list-item data-parent=true aria-expanded=true data-expandable=true><y>RD Sharma Solutions</y><i class="gfg-icon gfg-icon_arrow-right"></i><ul class=mega-dropdown><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/rd-sharma-class-8-solutions-for-maths/?ref=ghm" target=_self>Class 8 Maths Solution</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/rd-sharma-class-9-solutions/?ref=ghm" target=_self>Class 9 Maths Solution</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/rd-sharma-class-10-solutions/?ref=ghm" target=_self>Class 10 Maths Solution</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/rd-sharma-class-11-solutions-for-maths/?ref=ghm" target=_self>Class 11 Maths Solution</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/rd-sharma-class-12-solutions-for-maths/?ref=ghm" target=_self>Class 12 Maths Solution</a></li></ul></li><li class=mega-dropdown__list-item data-parent=true aria-expanded=true data-expandable=true><y>Physics Notes (Class 8-11)</y><i class="gfg-icon gfg-icon_arrow-right"></i><ul class=mega-dropdown><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/cbse-physics-class-8-notes/?ref=ghm" target=_self>Class 8 Notes</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/cbse-class-9-physics-notes/?ref=ghm" target=_self>Class 9 Notes</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/cbse-notes-for-class-10-physics/?ref=ghm" target=_self>Class 10 Notes</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/cbse-class-11-physics-notes/?ref=ghm" target=_self>Class 11 Notes</a></li></ul></li><li class=mega-dropdown__list-item data-parent=true aria-expanded=true data-expandable=true><y>Chemistry Notes</y><i class="gfg-icon gfg-icon_arrow-right"></i><ul class=mega-dropdown><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/cbse-class-8-chemistry-notes/?ref=ghm" target=_self>Class 8 Notes</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/cbse-class-9-chemistry-notes/?ref=ghm" target=_self>Class 9 Notes</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/cbse-class-10-chemistry-notes/?ref=ghm" target=_self>Class 10 Notes</a></li></ul></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/cbse-class-12-business-studies-notes/?ref=ghm" target=_self>Business Studies (Class 12th)</a></li></ul></li><li class=mega-dropdown__list-item data-parent=true aria-expanded=true data-expandable=true><y>CS Exams/PSUs</y><i class="gfg-icon gfg-icon_arrow-right"></i><ul class=mega-dropdown><li class=mega-dropdown__list-item data-parent=true aria-expanded=true data-expandable=true><y>ISRO</y><i class="gfg-icon gfg-icon_arrow-right"></i><ul class=mega-dropdown><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/isro-original-papers-official-keys/?ref=ghm" target=_self>ISRO CS Original Papers and Official Keys</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/isro-cs-preparation/?ref=ghm" target=_self>ISRO CS Solved Papers</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/isro-cse-syllabus-scientistengineer-exam-2018/?ref=ghm" target=_self>ISRO CS Syllabus for Scientist/Engineer Exam</a></li></ul></li><li class=mega-dropdown__list-item data-parent=true aria-expanded=true data-expandable=true><y>UGC NET</y><i class="gfg-icon gfg-icon_arrow-right"></i><ul class=mega-dropdown><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/ugc-net-cs-notes-according-to-syllabus-of-paper-ii/?ref=ghm" target=_self>UGC NET CS Notes Paper II</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/ugc-net-cs-notes-according-to-syllabus-of-paper-iii-core-group/?ref=ghm" target=_self>UGC NET CS Notes Paper III</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/ugc-net-cs-preparation/?ref=ghm" target=_self>UGC NET CS Solved Papers</a></li></ul></li></ul></li><li class=mega-dropdown__list-item data-parent=true aria-expanded=true data-expandable=true><y>Student</y><i class="gfg-icon gfg-icon_arrow-right"></i><ul class=mega-dropdown><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/campus-ambassador-program-by-Nosy.com/?ref=ghm" target=_self>Campus Ambassador Program</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/school-ambassador/?ref=ghm" target=_self>School Ambassador Program</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/computer-science-projects/?ref=ghm" target=_self>Project</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/geek-of-the-month/?ref=ghm" target=_self>Geek of the Month</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/campus-geek-of-the-month/?ref=ghm" target=_self>Campus Geek of the Month</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/placements-gq/?ref=ghm" target=_self>Placement Course</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/competitive-programming-a-complete-guide/?ref=ghm" target=_self>Competititve Programming</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/testimonials/?ref=ghm" target=_self>Testimonials</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/Nosy.com-student-chapter/?ref=ghm" target=_self>Student Chapter</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/category/geek-on-the-top/?ref=ghm" target=_self>Geek on the Top</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/internship/?ref=ghm" target=_self>Internship</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/careers/?ref=ghm" target=_self>Careers</a></li></ul></li></ul></li><li class=header-main__list-item data-parent=true aria-expanded=true data-expandable=true><y>Jobs</y><i class="gfg-icon gfg-icon_arrow-down gfg-icon_header"></i><ul class=mega-dropdown><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://practice.n0sy.com/jobs/?ref=ghm" target=_self>Apply for Jobs</a></li><li class=mega-dropdown__list-item data-parent=true aria-expanded=true data-expandable=true><y>Post a Job</y><i class="gfg-icon gfg-icon_arrow-right"></i><ul class=mega-dropdown><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/hire-with-us/?ref=ghm" target=_self>Hire with Us</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://www.n0sy.com/Nosy.com-job-a-thon/?ref=ghm" target=_self>Know about Jobathon</a></li></ul></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://practice.n0sy.com/events/rec/job-a-thon/?ref=ghm" target=_self>Jobathon</a></li></ul></li><li class=header-main__list-item data-parent=true aria-expanded=true data-expandable=true><y>Practice</y><i class="gfg-icon gfg-icon_arrow-down gfg-icon_header"></i><ul class=mega-dropdown><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://practice.n0sy.com/explore?page=1&sortBy=submissions&utm_source=gfg&utm_medium=gfg_header&utm_campaign=gfgpractice_header" target=_self>All DSA Problems</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://practice.n0sy.com/problem-of-the-day?utm_source=gfg&utm_medium=gfg_header&utm_campaign=gfgpractice_header" target=_self>Problem of the Day</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://practice.n0sy.com/events/rec/interview-series?utm_source=gfg&utm_medium=gfg_header&utm_campaign=gfgpractice_header" target=_self>Interview Series: Weekly Contests</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://practice.n0sy.com/events/rec/step-up-coding-school?utm_source=gfg&utm_medium=gfg_header&utm_campaign=gfgpractice_header" target=_self>Bi-Wizard Coding: School Contests</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://practice.n0sy.com/events?utm_source=gfg&utm_medium=gfg_header&utm_campaign=gfgpractice_header" target=_self>Events</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://practice.n0sy.com/explore?page=1&curated[]=1&sortBy=submissions&utm_source=gfg&utm_medium=gfg_header&utm_campaign=gfgpractice_header" target=_self>Practice SDE Sheet</a></li><li class=mega-dropdown__list-item data-parent=true aria-expanded=true data-expandable=true><y>Curated DSA Lists</y><i class="gfg-icon gfg-icon_arrow-right"></i><ul class=mega-dropdown><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://practice.n0sy.com/explore?page=1&curated[]=2&sortBy=submissions&utm_source=gfg&utm_medium=gfg_header&utm_campaign=gfgpractice_header" target=_self>Top 50 Array Problems</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://practice.n0sy.com/explore?page=1&curated[]=3&sortBy=submissions&utm_source=gfg&utm_medium=gfg_header&utm_campaign=gfgpractice_header" target=_self>Top 50 String Problems</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://practice.n0sy.com/explore?page=1&curated[]=6&sortBy=submissions&utm_source=gfg&utm_medium=gfg_header&utm_campaign=gfgpractice_header" target=_self>Top 50 Tree Problems</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://practice.n0sy.com/explore?page=1&curated[]=5&sortBy=submissions&utm_source=gfg&utm_medium=gfg_header&utm_campaign=gfgpractice_header" target=_self>Top 50 Graph Problems</a></li><li class=mega-dropdown__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://practice.n0sy.com/explore?page=1&curated[]=4&sortBy=submissions&utm_source=gfg&utm_medium=gfg_header&utm_campaign=gfgpractice_header" target=_self>Top 50 DP Problems</a></li></ul></li></ul></li><li class=header-main__list-item data-child=true aria-expanded=false data-expandable=false><a href="https://practice.n0sy.com/events?utm_source=gfg&utm_medium=gfg_header&utm_campaign=gfgcontest_header" class=remove-anchor__decoration target=_self>Contests</a></li></ul><ul class=header-main__left-list data-nl=false><li class="header-main__left-list-item gcse-search_li p-relative" aria-expanded=false data-expandable=false><form id=gcse-form data-sm=false class=p-relative><input class=gcse-search-input__wrapper id=gcse-search-input aria-expanded=false>
<i class="gfg-icon gfg-icon_times gfg-icon_white hide-search"></i>
<button class="gcse-search__btn not-expanded">
<i class="gfg-icon gfg-icon_search gfg-icon_white gcse-search__icon"></i></button></form></li><li class="header-main__left-list-item p-relative" aria-expanded=false data-expandable=true><i class="gfg-icon gfg-icon_ndot cursor-p" data-gfg-action=nineDot-menu></i><z class=nineDot-menu data-show=false><z class=nineDot-menu_container><z class=nineDot-menu_left><a href="https://write.n0sy.com/?ref=ndm" class=nineDot-menu_item rel="noopener noreferrer"><z class=img-wrapper><img src=https://media.n0sy.com/wp-content/cdn-uploads/write_ndi_20210312.svg alt=Write></z><z class=nineDot-menu_item-wrap><z class=head>Write</z><z class=text>Come write articles for us and get featured</z></z></a><a href="https://practice.n0sy.com/?ref=ndm" class=nineDot-menu_item rel="noopener noreferrer"><z class=img-wrapper><img src=https://media.n0sy.com/wp-content/cdn-uploads/practice_ndi_20210312.svg alt=Practice></z><z class=nineDot-menu_item-wrap><z class=head>Practice</z><z class=text>Learn and code with the best industry experts</z></z></a><a href="https://premium.n0sy.com/premium-plans/?ref=ndm" class=nineDot-menu_item rel="noopener noreferrer"><z class=img-wrapper><img src=https://media.n0sy.com/wp-content/cdn-uploads/premium_ndi_20210312.svg alt=Premium></z><z class=nineDot-menu_item-wrap><z class=head>Premium</z><z class=text>Get access to ad-free content, doubt assistance and more!</z></z></a><a href="https://practice.n0sy.com/jobs/?ref=ndm" class=nineDot-menu_item rel="noopener noreferrer"><z class=img-wrapper><img src=https://media.n0sy.com/wp-content/cdn-uploads/jobs_ndi_20210312.svg alt=Jobs></z><z class=nineDot-menu_item-wrap><z class=head>Jobs</z><z class=text>Come and find your dream job with us</z></z></a><script>toggleNineDotMenuImages(isDarkMode?gfgThemeList.DARK:gfgThemeList.LIGHT)</script></z><z class=nineDot-menu_right><ul><li><a href="https://www.n0sy.com/geeks-digest/?ref=ndm">Geeks Digest</a></li><li><a href="https://www.n0sy.com/quiz-corner-gq/?ref=ndm">Quizzes</a></li><li><a href="https://practice.n0sy.com/geeks-campus/?ref=ndm">Geeks Campus</a></li></ul><ul><li><a href="https://www.n0sy.com/category/guestblogs/?ref=ndm">Gblog Articles</a></li><li><a href="https://ide.n0sy.com/?ref=ndm">IDE</a></li><li><a href="https://www.n0sy.com/campus-ambassador-program-by-Nosy.com/?ref=ndm">Campus Mantri</a></li></ul></z></z></z></li><li class="header-main__left-list-item google-translate-parent-element" aria-expanded=false data-expanded=true><z class=translate id=g_translater><z id=google_translate_element data-show=false></z></z><i class="gfg-icon gfg-icon_translate googleTranslateToggle" data-gfg-action=google_translate_element></i></li><li id=userProfileId class="header-main__left-list-item p-relative" aria-expanded=false data-expandable=false></li></ul></z><z class="gfg-overlay display-none" id=gfg-overlay></z><z class=header-sidebar__wrapper><ul class=header-sidebar__list><li class=header-sidebar__list-item><a href="https://www.n0sy.com/?ref=ghm" target=_self>Home</a></li><li class=header-sidebar__list-item><a href="https://www.n0sy.com/videos/watchlist/?ref=ghm" target=_self><y class="gfg-icon gfg-icon_video"></y><y>Saved Videos</y></a></li><li class=header-sidebar__list-item><a href="https://practice.n0sy.com/?ref=ghm" target=_self>Courses</a></li><li><ul id=sidebar-list></ul></li><li class=header-sidebar__list-item><a href="https://www.n0sy.com/category/guestblogs/?ref=ghm" target=_self>GBlog</a></li><li class=header-sidebar__list-item><a href="https://www.n0sy.com/puzzles/?ref=ghm" target=_self>Puzzles</a></li><li class=header-sidebar__list-item><a href="https://www.n0sy.com/geeks-classes-Nosy.com/?ref=ghm" target=_self>What\'s New ?</a></li></ul><z class=mobile_translate><z id=google_translate_mobile data-show=false></z><z style=margin:auto><button class=toggle-darkMode data-gfg-action=toggleGFGTheme>
<i class="gfg-icon gfg-icon_dark-mode"></i></button>
<button class=google_translate_element_mobile data-gfg-action=google_translate_mobile aria-expanded=false data-expanded=true>
<i class="gfg-icon gfg-icon_translate googleTranslateToggleMobile"></i>Change Language</button></z></z><z style=height:80px></z></z></z><z class=header-main__slider><button class="header-main__slider-arrow previous hideIt">
<i class="gfg-icon gfg-icon_arrow-left gicon-centered"></i></button><ul id=hslider><li><a href="https://www.n0sy.com/array-data-structure/?ref=shm">Array</a></li><li><a href="https://www.n0sy.com/matrix/?ref=shm">Matrix</a></li><li><a href="https://www.n0sy.com/string-data-structure/?ref=shm">Strings</a></li><li><a href="https://www.n0sy.com/hashing-data-structure/?ref=shm">Hashing</a></li><li><a href="https://www.n0sy.com/data-structures/linked-list/?ref=shm">Linked List</a></li><li><a href="https://www.n0sy.com/stack-data-structure/?ref=shm">Stack</a></li><li><a href="https://www.n0sy.com/queue-data-structure/?ref=shm">Queue</a></li><li><a href="https://www.n0sy.com/binary-tree-data-structure/?ref=shm">Binary Tree</a></li><li><a href="https://www.n0sy.com/binary-search-tree-data-structure/?ref=shm">Binary Search Tree</a></li><li><a href="https://www.n0sy.com/heap-data-structure/?ref=shm">Heap</a></li><li><a href="https://www.n0sy.com/graph-data-structure-and-algorithms/?ref=shm">Graph</a></li><li><a href="https://www.n0sy.com/searching-algorithms/?ref=shm">Searching</a></li><li><a href="https://www.n0sy.com/sorting-algorithms/?ref=shm">Sorting</a></li><li><a href="https://www.n0sy.com/divide-and-conquer/?ref=shm">Divide & Conquer</a></li><li><a href="https://www.n0sy.com/mathematical-algorithms/?ref=shm">Mathematical</a></li><li><a href="https://www.n0sy.com/geometric-algorithms/?ref=shm">Geometric</a></li><li><a href="https://www.n0sy.com/bitwise-algorithms/?ref=shm">Bitwise</a></li><li><a href="https://www.n0sy.com/greedy-algorithms/?ref=shm">Greedy</a></li><li><a href="https://www.n0sy.com/backtracking-algorithms/?ref=shm">Backtracking</a></li><li><a href="https://www.n0sy.com/branch-and-bound-algorithm/?ref=shm">Branch and Bound</a></li><li><a href="https://www.n0sy.com/dynamic-programming/?ref=shm">Dynamic Programming</a></li><li><a href="https://www.n0sy.com/algorithms-gq/pattern-searching/?ref=shm">Pattern Searching</a></li><li><a href="https://www.n0sy.com/randomized-algorithms/?ref=sh">Randomized</a></li></ul><button class="header-main__slider-arrow next hideIt">
<i class="gfg-icon gfg-icon_arrow-right gicon-centered"></i></button></z><z class="header-main__slider header-main__slider-sticky" style=display:none!important><z class=header-main__slider-flex><z class=header-main__slider-flex-inner title="Related articles" data-gfg-action=article-slider><i class="gfg-icon gfg-icon_article"></i>
<y style=margin-top:-2px>Related Articles</y>
<i class="gfg-icon gfg-icon_arrow-right"></i></z><z class=header-main__slider-flex-inner title="Bookmark Article" data-gfg-action=bookmark-article data-bookmark-value=0><i class="gfg-icon gfg-icon_bookmark"></i>
<y class=hide-sm style=margin-top:-2px data-value=bookmark-message></y></z></z></z><button id=scrollTopBtn title="Scroll to Top" type=button class="btn btn-success">&#9650;</button><z id=main class="wrapper single-page"><style>.wrapper{flex-direction:column!important}</style><z class=article-page_sidebar data-article-slider=0><z class=article-page_sidebar-overlay data-gfg-action=article-slider></z><z class=article-page_sidebar-inner><z class=article-page_sidebar-head><h2>Related Articles</h2><i class="gfg-icon gfg-icon_close cursor-p" data-gfg-action=article-slider></i></z><ul class=leftBarList><li><a href="https://www.n0sy.com/program-for-nth-fibonacci-number/?ref=leftbar-rightbar">Program for Fibonacci numbers</a></li><li><a href="https://www.n0sy.com/largest-sum-contiguous-subarray/?ref=leftbar-rightbar">Largest Sum Contiguous Subarray (Kadane\'s Algorithm)</a></li><li><a href="https://www.n0sy.com/0-1-knapsack-problem-dp-10/?ref=leftbar-rightbar">0-1 Knapsack Problem | DP-10</a></li><li><a href="https://www.n0sy.com/longest-common-subsequence-dp-4/?ref=leftbar-rightbar">Longest Common Subsequence | DP-4</a></li><li><a href="https://www.n0sy.com/longest-increasing-subsequence-dp-3/?ref=leftbar-rightbar">Longest Increasing Subsequence | DP-3</a></li><li><a href="https://www.n0sy.com/subset-sum-problem-dp-25/?ref=leftbar-rightbar">Subset Sum Problem | DP-25</a></li><li><a href="https://www.n0sy.com/coin-change-dp-7/?ref=leftbar-rightbar">Coin Change | DP-7</a></li><li><a href="https://www.n0sy.com/longest-palindrome-substring-set-1/?ref=leftbar-rightbar">Longest Palindromic Substring | Set 1</a></li><li><a href="https://www.n0sy.com/sieve-of-eratosthenes/?ref=leftbar-rightbar">Sieve of Eratosthenes</a></li><li><a href="https://www.n0sy.com/bellman-ford-algorithm-dp-23/?ref=leftbar-rightbar">Bellman–Ford Algorithm | DP-23</a></li><li><a href="https://www.n0sy.com/matrix-chain-multiplication-dp-8/?ref=leftbar-rightbar">Matrix Chain Multiplication | DP-8</a></li><li><a href="https://www.n0sy.com/floyd-warshall-algorithm-dp-16/?ref=leftbar-rightbar">Floyd Warshall Algorithm | DP-16</a></li><li><a href="https://www.n0sy.com/minimum-number-of-jumps-to-reach-end-of-a-given-array/?ref=leftbar-rightbar">Minimum number of jumps to reach end</a></li><li><a href="https://www.n0sy.com/print-all-prime-factors-of-a-given-number/?ref=leftbar-rightbar">Efficient program to print all prime factors of a given number</a></li><li><a href="https://www.n0sy.com/edit-distance-dp-5/?ref=leftbar-rightbar">Edit Distance | DP-5</a></li><li><a href="https://www.n0sy.com/travelling-salesman-problem-set-1/?ref=leftbar-rightbar">Travelling Salesman Problem | Set 1 (Naive and Dynamic Programming)</a></li><li><a href="https://www.n0sy.com/find-minimum-number-of-coins-that-make-a-change/?ref=leftbar-rightbar">Find minimum number of coins that make a given value</a></li><li><a href="https://www.n0sy.com/overlapping-subproblems-property-in-dynamic-programming-dp-1/?ref=leftbar-rightbar">Overlapping Subproblems Property in Dynamic Programming | DP-1</a></li><li><a href="https://www.n0sy.com/top-20-dynamic-programming-interview-questions/?ref=leftbar-rightbar">Top 20 Dynamic Programming Interview Questions</a></li><li><a href="https://www.n0sy.com/cutting-a-rod-dp-13/?ref=leftbar-rightbar">Cutting a Rod | DP-13</a></li><li><a href="https://www.n0sy.com/longest-common-substring-dp-29/?ref=leftbar-rightbar">Longest Common Substring | DP-29</a></li><li><a href="https://www.n0sy.com/tabulation-vs-memoization/?ref=leftbar-rightbar">Tabulation vs Memoization</a></li><li><a href="https://www.n0sy.com/longest-palindromic-subsequence-dp-12/?ref=leftbar-rightbar">Longest Palindromic Subsequence | DP-12</a></li><li><a href="https://www.n0sy.com/program-nth-catalan-number/?ref=leftbar-rightbar">Program for nth Catalan Number</a></li><li><a href="https://www.n0sy.com/partition-a-set-into-two-subsets-such-that-the-difference-of-subset-sums-is-minimum/?ref=leftbar-rightbar">Partition a set into two subsets such that the difference of subset sums is minimum</a></li><li><a href="https://www.n0sy.com/count-possible-paths-top-left-bottom-right-nxm-matrix/?ref=leftbar-rightbar">Count all possible paths from top left to bottom right of a mXn matrix</a></li><li><a href="https://www.n0sy.com/egg-dropping-puzzle-dp-11/?ref=leftbar-rightbar">Egg Dropping Puzzle | DP-11</a></li><li><a href="https://www.n0sy.com/count-ways-reach-nth-stair/?ref=leftbar-rightbar">Count ways to reach the n\'th stair</a></li><li><a href="https://www.n0sy.com/longest-monotonically-increasing-subsequence-size-n-log-n/?ref=leftbar-rightbar">Longest Increasing Subsequence Size (N log N)</a></li><li><a href="https://www.n0sy.com/maximum-sum-such-that-no-two-elements-are-adjacent/?ref=leftbar-rightbar">Maximum sum such that no two elements are adjacent</a></li></ul></z></z><z class="container-fluid bg-light" id=home-page style=position:relative;max-width:100%><z class=article-page_flex><z class=sidebar_wrapper><z class=sideBar><z class=sideBar--wrap><ul class=leftBarList><li><a href="https://www.n0sy.com/program-for-nth-fibonacci-number/?ref=leftbar-rightbar">Program for Fibonacci numbers</a></li><li><a href="https://www.n0sy.com/largest-sum-contiguous-subarray/?ref=leftbar-rightbar">Largest Sum Contiguous Subarray (Kadane\'s Algorithm)</a></li><li><a href="https://www.n0sy.com/0-1-knapsack-problem-dp-10/?ref=leftbar-rightbar">0-1 Knapsack Problem | DP-10</a></li><li><a href="https://www.n0sy.com/longest-common-subsequence-dp-4/?ref=leftbar-rightbar">Longest Common Subsequence | DP-4</a></li><li><a href="https://www.n0sy.com/longest-increasing-subsequence-dp-3/?ref=leftbar-rightbar">Longest Increasing Subsequence | DP-3</a></li><li><a href="https://www.n0sy.com/subset-sum-problem-dp-25/?ref=leftbar-rightbar">Subset Sum Problem | DP-25</a></li><li><a href="https://www.n0sy.com/coin-change-dp-7/?ref=leftbar-rightbar">Coin Change | DP-7</a></li><li><a href="https://www.n0sy.com/longest-palindrome-substring-set-1/?ref=leftbar-rightbar">Longest Palindromic Substring | Set 1</a></li><li><a href="https://www.n0sy.com/sieve-of-eratosthenes/?ref=leftbar-rightbar">Sieve of Eratosthenes</a></li><li><a href="https://www.n0sy.com/bellman-ford-algorithm-dp-23/?ref=leftbar-rightbar">Bellman–Ford Algorithm | DP-23</a></li><li><a href="https://www.n0sy.com/matrix-chain-multiplication-dp-8/?ref=leftbar-rightbar">Matrix Chain Multiplication | DP-8</a></li><li><a href="https://www.n0sy.com/floyd-warshall-algorithm-dp-16/?ref=leftbar-rightbar">Floyd Warshall Algorithm | DP-16</a></li><li><a href="https://www.n0sy.com/minimum-number-of-jumps-to-reach-end-of-a-given-array/?ref=leftbar-rightbar">Minimum number of jumps to reach end</a></li><li><a href="https://www.n0sy.com/print-all-prime-factors-of-a-given-number/?ref=leftbar-rightbar">Efficient program to print all prime factors of a given number</a></li><li><a href="https://www.n0sy.com/edit-distance-dp-5/?ref=leftbar-rightbar">Edit Distance | DP-5</a></li><li><a href="https://www.n0sy.com/travelling-salesman-problem-set-1/?ref=leftbar-rightbar">Travelling Salesman Problem | Set 1 (Naive and Dynamic Programming)</a></li><li><a href="https://www.n0sy.com/find-minimum-number-of-coins-that-make-a-change/?ref=leftbar-rightbar">Find minimum number of coins that make a given value</a></li><li><a href="https://www.n0sy.com/overlapping-subproblems-property-in-dynamic-programming-dp-1/?ref=leftbar-rightbar">Overlapping Subproblems Property in Dynamic Programming | DP-1</a></li><li><a href="https://www.n0sy.com/top-20-dynamic-programming-interview-questions/?ref=leftbar-rightbar">Top 20 Dynamic Programming Interview Questions</a></li><li><a href="https://www.n0sy.com/cutting-a-rod-dp-13/?ref=leftbar-rightbar">Cutting a Rod | DP-13</a></li><li><a href="https://www.n0sy.com/longest-common-substring-dp-29/?ref=leftbar-rightbar">Longest Common Substring | DP-29</a></li><li><a href="https://www.n0sy.com/tabulation-vs-memoization/?ref=leftbar-rightbar">Tabulation vs Memoization</a></li><li><a href="https://www.n0sy.com/longest-palindromic-subsequence-dp-12/?ref=leftbar-rightbar">Longest Palindromic Subsequence | DP-12</a></li><li><a href="https://www.n0sy.com/program-nth-catalan-number/?ref=leftbar-rightbar">Program for nth Catalan Number</a></li><li><a href="https://www.n0sy.com/partition-a-set-into-two-subsets-such-that-the-difference-of-subset-sums-is-minimum/?ref=leftbar-rightbar">Partition a set into two subsets such that the difference of subset sums is minimum</a></li><li><a href="https://www.n0sy.com/count-possible-paths-top-left-bottom-right-nxm-matrix/?ref=leftbar-rightbar">Count all possible paths from top left to bottom right of a mXn matrix</a></li><li><a href="https://www.n0sy.com/egg-dropping-puzzle-dp-11/?ref=leftbar-rightbar">Egg Dropping Puzzle | DP-11</a></li><li><a href="https://www.n0sy.com/count-ways-reach-nth-stair/?ref=leftbar-rightbar">Count ways to reach the n\'th stair</a></li><li><a href="https://www.n0sy.com/longest-monotonically-increasing-subsequence-size-n-log-n/?ref=leftbar-rightbar">Longest Increasing Subsequence Size (N log N)</a></li><li><a href="https://www.n0sy.com/maximum-sum-such-that-no-two-elements-are-adjacent/?ref=leftbar-rightbar">Maximum sum such that no two elements are adjacent</a></li></ul></z></z><z id=GFG_AD_Desktop_LeftSideBar_Docked_160x600 style=max-width:160px;max-height:600px></z></z><z class=leftBar><z class=article--viewer><z class=article--viewer_content><z class=a-wrapper><z style=z-index:9999!important;position:relative></z><article class="content post-129692 post type-post status-publish format-standard hentry category-dynamic-programming tag-amazon tag-linkedin tag-microsoft" id=post-129692><z style=position:relative><z class=article-title><h1>Boolean Parenthesization Problem | DP-37</h1></z><z class=article_button_copy><z class=article-buttons><z class="article--viewer_comments tooltip"><y class=tooltiptext>View Discussion</y>
<button data-gfg-action=loadComments>
<i class="gfg-icon gfg-icon_comment"></i></button></z><z pid=129692 ptitle="Boolean Parenthesization Problem | DP-37" class="article--viewer_improve tooltip"><y class=tooltiptext>Improve Article</y>
<button onclick=improveArticleCall()>
<i class="gfg-icon gfg-icon_edit"></i></button></z><z pid=129692 class="article--viewer_bookmark tooltip"><y class=tooltiptext>Save Article</y>
<button data-gfg-action=bookmark-article data-bookmark-value=0>
<i class="gfg-icon gfg-icon_bookmark"></i></button></z><z pid=129692 class="article--viewer_like tooltip" style=display:none><y class=tooltiptext>Like Article</y>
<button data-gfg-action=like-article data-bookmark-value=0>
<i class="gfg-icon gfg-icon_thumbs"></i></button></z></z></z><z class=media><z class=meta><ul><li><y class=strong>Difficulty Level :</y>
<y><a href=https://www.n0sy.com/expert/>Expert</a></y></li><li><y class=strong>Last Updated :</y>
<y>28 Jun, 2022</y></li></ul></z></z></z><z class=main_wrapper><z style=display:flex><li style="padding:10px 30px 0"><a class="nav_tab article active">Read</a></li><li><a class=nav_tab data-gfg-action=loadComments>Discuss</a></li></z><z class=article-buttons><z class="article--viewer_comments tooltip"><y class=tooltiptext>View Discussion</y>
<button data-gfg-action=loadComments>
<i class="gfg-icon gfg-icon_comment"></i></button></z><z pid=129692 ptitle="Boolean Parenthesization Problem | DP-37" class="article--viewer_improve tooltip"><y class=tooltiptext>Improve Article</y>
<button onclick=improveArticleCall()>
<i class="gfg-icon gfg-icon_edit"></i></button></z><z pid=129692 class="article--viewer_bookmark tooltip"><y class=tooltiptext>Save Article</y>
<button data-gfg-action=bookmark-article data-bookmark-value=0>
<i class="gfg-icon gfg-icon_bookmark"></i></button></z><z pid=129692 class="article--viewer_like tooltip" style=display:none><y class=tooltiptext>Like Article</y>
<button data-gfg-action=like-article data-bookmark-value=0>
<i class="gfg-icon gfg-icon_thumbs"></i></button></z></z></z><z class=text><x>Given a boolean expression with the following symbols.&nbsp;</x><xre><strong>Symbols</strong> \'T\' ---&gt; true \'F\' ---&gt; false </xre><x>And following operators filled between symbols&nbsp;</x><z id=GFG_AD_gfg_mobile_336x280></z><xre><strong>Operators</strong> &amp; ---&gt; boolean AND | ---&gt; boolean OR ^ ---&gt; boolean XOR </xre><x>Count the number of ways we can parenthesize the expression so that the value of expression evaluates to true.&nbsp;<br>Let the input be in form of two arrays one contains the symbols (T and F) in order and the other contains operators (&, | and ^}</x><x><strong>Examples:</strong>&nbsp;</x><z style="min-height:250px;text-align:center;margin:20px 0" id=GFG_AD_Desktop_PostContent_300x250></z><xre>Input: symbol[] = {T, F, T} operator[] = {^, &amp;}
Output: 2
The given expression is "T ^ F &amp; T", it evaluates true
in two ways "((T ^ F) &amp; T)" and "(T ^ (F &amp; T))" Input: symbol[] = {T, F, F} operator[] = {^, |}
Output: 2
The given expression is "T ^ F | F", it evaluates true
in two ways "( (T ^ F) | F )" and "( T ^ (F | F) )". Input: symbol[] = {T, T, F, T} operator[] = {|, &amp;, ^}
Output: 4
The given expression is "T | T &amp; F ^ T", it evaluates true
in 4 ways ((T|T)&amp;(F^T)), (T|(T&amp;(F^T))), (((T|T)&amp;F)^T) and (T|((T&amp;F)^T)). </xre><z id=practiceLinkDiv><z class=practiceLinkDiv-banner><z class=info><z class=small>Recommended Practice</z><z class=title><a href=https://practice.n0sy.com/problems/boolean-parenthesization5610/1/ title="Permalink to Boolean Parenthesization" permalink>Boolean Parenthesization</a></z></z><z class=redirect><a href=https://practice.n0sy.com/problems/boolean-parenthesization5610/1/ title="Permalink to Boolean Parenthesization" permalink>Try It!</a></z></z></z><x><strong>Solution:</strong>&nbsp;<br>Let <strong><u>T(i, j)</u></strong> represent the number of ways to parenthesize the symbols between i and j (both inclusive) such that the subexpression between i and j evaluates to true.&nbsp;<br>&nbsp;</x><x><img src=https://www.n0sy.com/wp-content/ql-cache/quicklatex.com-2c3532cf5fe1e00d5f358bb49773e154_l3.png class="ql-img-inline-formula quicklatex-auto-format" alt="T(i,j)=\\sum_{k=i}^{j-1}\\begin{Bmatrix} T(i,k)*T(k+1,j) & if&operator&[k]is \'\\&\'\\\\ Total(i,k)*Total(k+1,j)-F(i,k)*F(k+1,j) &if&operator&[k]&is\'|\' \\\\ T(i,k)*F(k+1,j)+F(i,k)*T(k+1,j) &if&operator&[k]&is \'\\oplus\' \\end{Bmatrix} Total(i,j)= T(i,j)+F(i,j) " title="Rendered by QuickLaTeX.com" height=127 width=1304 style=vertical-align:-7px><br>&nbsp;</x><x><img src=https://media.n0sy.com/wp-content/cdn-uploads/trueeq.png alt=trueeq></x><x>Let <strong><u>F(i, j)</u></strong> represent the number of ways to parenthesize the symbols between i and j (inclusive) such that the subexpression between i and j evaluates to false.<br><img src=https://www.n0sy.com/wp-content/ql-cache/quicklatex.com-bf692c3a737b1bd5b5fedfc5c5889c02_l3.png class="ql-img-inline-formula quicklatex-auto-format" alt="F(i,j)=\\sum_{k=i}^{j-1} \\begin{Bmatrix} Total(i,k)*Total(k+1,j)-T(i,k)*T(k+1,j) & if&operator[k]&is\'\\&\'\\\\ F(i,k)*F(k+1,j) &if&operator[k] &is\'|\' \\\\ T(i,k)*T(k+1,j)+F(i,k)*F(k+1,j) &if&operator[k]&is\'\\oplus\' \\end{Bmatrix} Total(i,j)=T(i,j)+F(i,j) " title="Rendered by QuickLaTeX.com" height=127 width=1223 style=vertical-align:-7px><br>&nbsp;</x><x><img src=https://media.n0sy.com/wp-content/cdn-uploads/falseeq.png alt=falseeq></x><x>Base Cases:</x><xre>T(i, i) = 1 if symbol[i] = \'T\' T(i, i) = 0 if symbol[i] = \'F\' F(i, i) = 1 if symbol[i] = \'F\' F(i, i) = 0 if symbol[i] = \'T\'</xre><x>If we draw the recursion tree of the above recursive solution, we can observe that it has many overlapping subproblems. Like other <a href=https://www.n0sy.com/tag/dynamic-programming/>dynamic programming problems</a>, it can be solved by filling a table in a bottom-up manner. Following is the implementation of a dynamic programming solution.&nbsp;<br>&nbsp;</x><z class=responsive-tabs><h2 class=tabtitle>C++</h2><z class=tabcontent><z class=code-block><z class=code-gutter><z class=editor-buttons-container><z class=editor-buttons><z class=editor-buttons-div title="Run and Edit"><i id=copy-code-button title="Copy Code" class="gfg-icon gfg-icon_copy code-sidebar-button padding-2px copy-code-button"></i></x><z id=run-and-edit-loader class=ring-load></z><x><i id=run-and-edit-button title="Edit Code" lang=cpp class="gfg-icon gfg-icon_edit_1 padding-2px code-sidebar-button"></i><br><i id=close-code-editor-button title="Close Editor" class="gfg-icon gfg-icon_close-editor padding-2px code-sidebar-button close-code-editor-button"></i></x><z id=run-code-loader class=ring-load></z><x><i id=run-code-button lang=cpp title="Run Code and See Output" class="gfg-icon gfg-icon_play padding-2px code-sidebar-button"></i></x><z id=generate-url-loader class=ring-load></z><x><i id=generate-url-and-run-button title="Run Code and Generate IDE URL" lang=cpp class="gfg-icon gfg-icon_link padding-2px code-sidebar-button generate-url-and-run-button"></i><br><i title="Dark Mode" class="gfg-icon gfg-icon_dark-toggle padding-2px code-sidebar-button dark-editor-button"></i><br><i id=edit-on-ide-button title="Edit on IDE" lang=cpp class="gfg-icon gfg-icon_code padding-2px code-sidebar-button edit-on-ide-button"></i></z></x></z></x></z></x></z><z class=code-container><z id=highlighter_637545 class="syntaxhighlighter nogutter"><table border=0 cellpadding=0 cellspacing=0><tbody><tr><td class=code><z class=container><z class="line number1 index0 alt2"><code class=preprocessor>#include &lt;cstring></code></z><z class="line number2 index1 alt1"><code class=preprocessor>#include &lt;iostream></code></z><z class="line number3 index2 alt2"><code class="keyword bold">using</code> <code class="keyword bold">namespace</code> <code class=plain>std;</code></z><z class="line number4 index3 alt1">&nbsp;</z><z class="line number5 index4 alt2"><code class=comments>// Returns count of all possible</code></z><z class="line number6 index5 alt1"><code class=comments>// parenthesizations that lead</code></z><z class="line number7 index6 alt2"><code class=comments>// to result true for a boolean</code></z><z class="line number8 index7 alt1"><code class=comments>// expression with symbols like</code></z><z class="line number9 index8 alt2"><code class=comments>// true and false and operators</code></z><z class="line number10 index9 alt1"><code class=comments>// like &, | and ^ filled</code></z><z class="line number11 index10 alt2"><code class=comments>// between symbols</code></z><z class="line number12 index11 alt1"><code class="color1 bold">int</code> <code class=plain>countParenth(</code><code class="color1 bold">char</code> <code class=plain>symb[], </code><code class="color1 bold">char</code> <code class=plain>oper[], </code><code class="color1 bold">int</code> <code class=plain>n)</code></z><z class="line number13 index12 alt2"><code class=plain>{</code></z><z class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="color1 bold">int</code> <code class=plain>F[n][n], T[n][n];</code></z><z class="line number15 index14 alt2">&nbsp;</z><z class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// Fill diagonal entries first</code></z><z class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// All diagonal entries in</code></z><z class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// T[i][i] are 1 if symbol[i]</code></z><z class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// is T (true).&nbsp; Similarly,</code></z><z class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// all F[i][i] entries are 1 if</code></z><z class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// symbol[i] is F (False)</code></z><z class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword bold">for</code> <code class=plain>(</code><code class="color1 bold">int</code> <code class=plain>i = 0; i &lt; n; i++) {</code></z><z class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>F[i][i] = (symb[i] == </code><code class=string>\'F\'</code><code class=plain>) ? 1 : 0;</code></z><z class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>T[i][i] = (symb[i] == </code><code class=string>\'T\'</code><code class=plain>) ? 1 : 0;</code></z><z class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number26 index25 alt1">&nbsp;</z><z class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// Now fill T[i][i+1],</code></z><z class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// T[i][i+2], T[i][i+3]... in order</code></z><z class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// And F[i][i+1], F[i][i+2],</code></z><z class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// F[i][i+3]... in order</code></z><z class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword bold">for</code> <code class=plain>(</code><code class="color1 bold">int</code> <code class=plain>gap = 1; gap &lt; n; ++gap)</code></z><z class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword bold">for</code> <code class=plain>(</code><code class="color1 bold">int</code> <code class=plain>i = 0, j = gap;</code></z><z class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>j &lt; n; ++i, ++j)</code></z><z class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>T[i][j] = F[i][j] = 0;</code></z><z class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword bold">for</code> <code class=plain>(</code><code class="color1 bold">int</code> <code class=plain>g = 0;</code></z><z class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>g &lt; gap; g++)</code></z><z class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// Find place of parenthesization using</code></z><z class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// current value of gap</code></z><z class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="color1 bold">int</code> <code class=plain>k = i + g;</code></z><z class="line number43 index42 alt2">&nbsp;</z><z class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// Store Total[i][k]</code></z><z class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// and Total[k+1][j]</code></z><z class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="color1 bold">int</code> <code class=plain>tik = T[i][k] + F[i][k];</code></z><z class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="color1 bold">int</code> <code class=plain>tkj = T[k + 1][j]</code></z><z class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>+ F[k + 1][j];</code></z><z class="line number49 index48 alt2">&nbsp;</z><z class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// Follow the recursive formulas</code></z><z class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// according</code></z><z class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// to the current operator</code></z><z class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword bold">if</code> <code class=plain>(oper[k] == </code><code class=string>\'&\'</code><code class=plain>) {</code></z><z class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>T[i][j] += T[i][k]</code></z><z class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>* T[k + 1][j];</code></z><z class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>F[i][j] += (tik * tkj</code></z><z class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>- T[i][k]</code></z><z class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>* T[k + 1][j]);</code></z><z class="line number59 index58 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number60 index59 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword bold">if</code> <code class=plain>(oper[k] == </code><code class=string>\'|\'</code><code class=plain>) {</code></z><z class="line number61 index60 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>F[i][j] += F[i][k]</code></z><z class="line number62 index61 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>* F[k + 1][j];</code></z><z class="line number63 index62 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>T[i][j] += (tik * tkj</code></z><z class="line number64 index63 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>- F[i][k]</code></z><z class="line number65 index64 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>* F[k + 1][j]);</code></z><z class="line number66 index65 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number67 index66 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword bold">if</code> <code class=plain>(oper[k] == </code><code class=string>\'^\'</code><code class=plain>) {</code></z><z class="line number68 index67 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>T[i][j] += F[i][k]</code></z><z class="line number69 index68 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>* T[k + 1][j]</code></z><z class="line number70 index69 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>+ T[i][k]</code></z><z class="line number71 index70 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>* F[k + 1][j];</code></z><z class="line number72 index71 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>F[i][j] += T[i][k]</code></z><z class="line number73 index72 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>* T[k + 1][j]</code></z><z class="line number74 index73 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>+ F[i][k] * F[k + 1][j];</code></z><z class="line number75 index74 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number76 index75 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number77 index76 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number78 index77 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number79 index78 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword bold">return</code> <code class=plain>T[0][n - 1];</code></z><z class="line number80 index79 alt1"><code class=plain>}</code></z><z class="line number81 index80 alt2">&nbsp;</z><z class="line number82 index81 alt1"><code class=comments>// Driver code</code></z><z class="line number83 index82 alt2"><code class="color1 bold">int</code> <code class=plain>main()</code></z><z class="line number84 index83 alt1"><code class=plain>{</code></z><z class="line number85 index84 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="color1 bold">char</code> <code class=plain>symbols[] = </code><code class=string>"TTFT"</code><code class=plain>;</code></z><z class="line number86 index85 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="color1 bold">char</code> <code class=plain>operators[] = </code><code class=string>"|&^"</code><code class=plain>;</code></z><z class="line number87 index86 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="color1 bold">int</code> <code class=plain>n = </code><code class="functions bold">strlen</code><code class=plain>(symbols);</code></z><z class="line number88 index87 alt1">&nbsp;</z><z class="line number89 index88 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// There are 4 ways</code></z><z class="line number90 index89 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// ((T|T)&(F^T)), (T|(T&(F^T))), (((T|T)&F)^T) and</code></z><z class="line number91 index90 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// (T|((T&F)^T))</code></z><z class="line number92 index91 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>cout &lt;&lt; countParenth(symbols, operators, n);</code></z><z class="line number93 index92 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword bold">return</code> <code class=plain>0;</code></z><z class="line number94 index93 alt1"><code class=plain>}</code></z></z></td></tr></tbody></table></z></z><z class=code-editor-container></z></x></z><z class=code-output-container><z class=output-block><i id=output-icon title=Output class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i></x><xre class=output-pre></xre></x></z><z class=ide-link-div><i id=copy-url-button title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i></x><xre id=ide-url></xre></x></z></x></z></z><h2 class=tabtitle>Java</h2><z class=tabcontent><z class=code-block><z class=code-gutter><z class=editor-buttons-container><z class=editor-buttons><z class=editor-buttons-div title="Run and Edit"><i id=copy-code-button title="Copy Code" class="gfg-icon gfg-icon_copy code-sidebar-button padding-2px copy-code-button"></i></x><z id=run-and-edit-loader class=ring-load></z><x><i id=run-and-edit-button title="Edit Code" lang=java class="gfg-icon gfg-icon_edit_1 padding-2px code-sidebar-button"></i><br><i id=close-code-editor-button title="Close Editor" class="gfg-icon gfg-icon_close-editor padding-2px code-sidebar-button close-code-editor-button"></i></x><z id=run-code-loader class=ring-load></z><x><i id=run-code-button lang=java title="Run Code and See Output" class="gfg-icon gfg-icon_play padding-2px code-sidebar-button"></i></x><z id=generate-url-loader class=ring-load></z><x><i id=generate-url-and-run-button title="Run Code and Generate IDE URL" lang=java class="gfg-icon gfg-icon_link padding-2px code-sidebar-button generate-url-and-run-button"></i><br><i title="Dark Mode" class="gfg-icon gfg-icon_dark-toggle padding-2px code-sidebar-button dark-editor-button"></i><br><i id=edit-on-ide-button title="Edit on IDE" lang=java class="gfg-icon gfg-icon_code padding-2px code-sidebar-button edit-on-ide-button"></i></z></x></z></x></z></x></z><z class=code-container><z id=highlighter_299969 class="syntaxhighlighter nogutter"><table border=0 cellpadding=0 cellspacing=0><tbody><tr><td class=code><z class=container><z class="line number1 index0 alt2"><code class=keyword>class</code> <code class=plain>GFG {</code></z><z class="line number2 index1 alt1">&nbsp;</z><z class="line number3 index2 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// Returns count of all possible</code></z><z class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// parenthesizations that lead to</code></z><z class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// result true for a boolean</code></z><z class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// expression with symbols like true</code></z><z class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// and false and operators like &, |</code></z><z class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// and ^ filled between symbols</code></z><z class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>static</code> <code class=keyword>int</code> <code class=plain>countParenth(</code><code class=keyword>char</code> <code class=plain>symb[],</code></z><z class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>char</code> <code class=plain>oper[],</code></z><z class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>int</code> <code class=plain>n)</code></z><z class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>int</code> <code class=plain>F[][] = </code><code class=keyword>new</code> <code class=keyword>int</code><code class=plain>[n][n];</code></z><z class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>int</code> <code class=plain>T[][] = </code><code class=keyword>new</code> <code class=keyword>int</code><code class=plain>[n][n];</code></z><z class="line number15 index14 alt2">&nbsp;</z><z class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// Fill diagonal entries first</code></z><z class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// All diagonal entries in T[i][i]</code></z><z class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// are 1 if symbol[i] is T (true).</code></z><z class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// Similarly, all F[i][i] entries</code></z><z class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// are 1 if symbol[i] is F (False)</code></z><z class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>for</code> <code class=plain>(</code><code class=keyword>int</code> <code class=plain>i = </code><code class=value>0</code><code class=plain>; i &lt; n; i++) {</code></z><z class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>F[i][i] = (symb[i] == </code><code class=string>\'F\'</code><code class=plain>) ? </code><code class=value>1</code> <code class=plain>: </code><code class=value>0</code><code class=plain>;</code></z><z class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>T[i][i] = (symb[i] == </code><code class=string>\'T\'</code><code class=plain>) ? </code><code class=value>1</code> <code class=plain>: </code><code class=value>0</code><code class=plain>;</code></z><z class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number25 index24 alt2">&nbsp;</z><z class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// Now fill T[i][i+1], T[i][i+2],</code></z><z class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// T[i][i+3]... in order And F[i][i+1],</code></z><z class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// F[i][i+2], F[i][i+3]... in order</code></z><z class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>for</code> <code class=plain>(</code><code class=keyword>int</code> <code class=plain>gap = </code><code class=value>1</code><code class=plain>; gap &lt; n; ++gap)</code></z><z class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>for</code> <code class=plain>(</code><code class=keyword>int</code> <code class=plain>i = </code><code class=value>0</code><code class=plain>,</code></z><z class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>j = gap; j &lt; n;</code></z><z class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>++i, ++j)</code></z><z class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>T[i][j] = F[i][j] = </code><code class=value>0</code><code class=plain>;</code></z><z class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>for</code> <code class=plain>(</code><code class=keyword>int</code> <code class=plain>g = </code><code class=value>0</code><code class=plain>; g &lt; gap; g++)</code></z><z class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</z><z class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// Find place of parenthesization</code></z><z class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// using current value of gap</code></z><z class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>int</code> <code class=plain>k = i + g;</code></z><z class="line number42 index41 alt1">&nbsp;</z><z class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// Store Total[i][k]</code></z><z class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// and Total[k+1][j]</code></z><z class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>int</code> <code class=plain>tik = T[i][k]</code></z><z class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>+ F[i][k];</code></z><z class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>int</code> <code class=plain>tkj = T[k + </code><code class=value>1</code><code class=plain>][j]</code></z><z class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>+ F[k + </code><code class=value>1</code><code class=plain>][j];</code></z><z class="line number49 index48 alt2">&nbsp;</z><z class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// Follow the recursive formulas</code></z><z class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// according to the current operator</code></z><z class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(oper[k] == </code><code class=string>\'&\'</code><code class=plain>)</code></z><z class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>T[i][j] += T[i][k]</code></z><z class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>* T[k + </code><code class=value>1</code><code class=plain>][j];</code></z><z class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>F[i][j]</code></z><z class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>+= (tik * tkj</code></z><z class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>- T[i][k]</code></z><z class="line number59 index58 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>* T[k + </code><code class=value>1</code><code class=plain>][j]);</code></z><z class="line number60 index59 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number61 index60 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(oper[k] == </code><code class=string>\'|\'</code><code class=plain>)</code></z><z class="line number62 index61 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number63 index62 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>F[i][j] += F[i][k]</code></z><z class="line number64 index63 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>* F[k + </code><code class=value>1</code><code class=plain>][j];</code></z><z class="line number65 index64 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>T[i][j]</code></z><z class="line number66 index65 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>+= (tik * tkj</code></z><z class="line number67 index66 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>- F[i][k]</code></z><z class="line number68 index67 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>* F[k + </code><code class=value>1</code><code class=plain>][j]);</code></z><z class="line number69 index68 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number70 index69 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(oper[k] == </code><code class=string>\'^\'</code><code class=plain>)</code></z><z class="line number71 index70 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number72 index71 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>T[i][j] += F[i][k]</code></z><z class="line number73 index72 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>* T[k + </code><code class=value>1</code><code class=plain>][j]</code></z><z class="line number74 index73 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>+ T[i][k]</code></z><z class="line number75 index74 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>* F[k + </code><code class=value>1</code><code class=plain>][j];</code></z><z class="line number76 index75 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>F[i][j] += T[i][k]</code></z><z class="line number77 index76 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>* T[k + </code><code class=value>1</code><code class=plain>][j]</code></z><z class="line number78 index77 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>+ F[i][k]</code></z><z class="line number79 index78 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>* F[k + </code><code class=value>1</code><code class=plain>][j];</code></z><z class="line number80 index79 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number81 index80 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number82 index81 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number83 index82 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number84 index83 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>return</code> <code class=plain>T[</code><code class=value>0</code><code class=plain>][n - </code><code class=value>1</code><code class=plain>];</code></z><z class="line number85 index84 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number86 index85 alt1">&nbsp;</z><z class="line number87 index86 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// Driver code</code></z><z class="line number88 index87 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>public</code> <code class=keyword>static</code> <code class=keyword>void</code> <code class=plain>main(String[] args)</code></z><z class="line number89 index88 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number90 index89 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>char</code> <code class=plain>symbols[] = </code><code class=string>"TTFT"</code><code class=plain>.toCharArray();</code></z><z class="line number91 index90 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>char</code> <code class=plain>operators[] = </code><code class=string>"|&^"</code><code class=plain>.toCharArray();</code></z><z class="line number92 index91 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>int</code> <code class=plain>n = symbols.length;</code></z><z class="line number93 index92 alt2">&nbsp;</z><z class="line number94 index93 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// There are 4 ways</code></z><z class="line number95 index94 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// ((T|T)&(F^T)), (T|(T&(F^T))),</code></z><z class="line number96 index95 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// (((T|T)&F)^T) and (T|((T&F)^T))</code></z><z class="line number97 index96 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>System.out.println(</code></z><z class="line number98 index97 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>countParenth(symbols, operators, n));</code></z><z class="line number99 index98 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number100 index99 alt1"><code class=plain>}</code></z><z class="line number101 index100 alt2">&nbsp;</z><z class="line number102 index101 alt1"><code class=comments>// This code has been contributed</code></z><z class="line number103 index102 alt2"><code class=comments>// by 29AjayKumar</code></z></z></td></tr></tbody></table></z></z><z class=code-editor-container></z></x></z><z class=code-output-container><z class=output-block><i id=output-icon title=Output class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i></x><xre class=output-pre></xre></x></z><z class=ide-link-div><i id=copy-url-button title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i></x><xre id=ide-url></xre></x></z></x></z></z><h2 class=tabtitle>Python</h2><z class=tabcontent><z class=code-block><z class=code-gutter><z class=editor-buttons-container><z class=editor-buttons><z class=editor-buttons-div title="Run and Edit"><i id=copy-code-button title="Copy Code" class="gfg-icon gfg-icon_copy code-sidebar-button padding-2px copy-code-button"></i></x><z id=run-and-edit-loader class=ring-load></z><x><i id=run-and-edit-button title="Edit Code" lang=python class="gfg-icon gfg-icon_edit_1 padding-2px code-sidebar-button"></i><br><i id=close-code-editor-button title="Close Editor" class="gfg-icon gfg-icon_close-editor padding-2px code-sidebar-button close-code-editor-button"></i></x><z id=run-code-loader class=ring-load></z><x><i id=run-code-button lang=python title="Run Code and See Output" class="gfg-icon gfg-icon_play padding-2px code-sidebar-button"></i></x><z id=generate-url-loader class=ring-load></z><x><i id=generate-url-and-run-button title="Run Code and Generate IDE URL" lang=python class="gfg-icon gfg-icon_link padding-2px code-sidebar-button generate-url-and-run-button"></i><br><i title="Dark Mode" class="gfg-icon gfg-icon_dark-toggle padding-2px code-sidebar-button dark-editor-button"></i><br><i id=edit-on-ide-button title="Edit on IDE" lang=python class="gfg-icon gfg-icon_code padding-2px code-sidebar-button edit-on-ide-button"></i></z></x></z></x></z></x></z><z class=code-container><z id=highlighter_508807 class="syntaxhighlighter nogutter"><table border=0 cellpadding=0 cellspacing=0><tbody><tr><td class=code><z class=container><z class="line number1 index0 alt2"><code class=comments># Returns count of all possible</code></z><z class="line number2 index1 alt1"><code class=comments># parenthesizations that lead to</code></z><z class="line number3 index2 alt2"><code class=comments># result true for a boolean</code></z><z class="line number4 index3 alt1"><code class=comments># expression with symbols like</code></z><z class="line number5 index4 alt2"><code class=comments># true and false and operators</code></z><z class="line number6 index5 alt1"><code class=comments># like &, | and ^ filled between symbols</code></z><z class="line number7 index6 alt2">&nbsp;</z><z class="line number8 index7 alt1">&nbsp;</z><z class="line number9 index8 alt2"><code class=keyword>def</code> <code class=plain>countParenth(symb, oper, n):</code></z><z class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>F </code><code class=keyword>=</code> <code class=plain>[[</code><code class=value>0</code> <code class=keyword>for</code> <code class=plain>i </code><code class=keyword>in</code> <code class=functions>range</code><code class=plain>(n </code><code class=keyword>+</code> <code class=value>1</code><code class=plain>)]</code></z><z class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>for</code> <code class=plain>i </code><code class=keyword>in</code> <code class=functions>range</code><code class=plain>(n </code><code class=keyword>+</code> <code class=value>1</code><code class=plain>)]</code></z><z class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>T </code><code class=keyword>=</code> <code class=plain>[[</code><code class=value>0</code> <code class=keyword>for</code> <code class=plain>i </code><code class=keyword>in</code> <code class=functions>range</code><code class=plain>(n </code><code class=keyword>+</code> <code class=value>1</code><code class=plain>)]</code></z><z class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>for</code> <code class=plain>i </code><code class=keyword>in</code> <code class=functions>range</code><code class=plain>(n </code><code class=keyword>+</code> <code class=value>1</code><code class=plain>)]</code></z><z class="line number14 index13 alt1">&nbsp;</z><z class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments># Fill diagonal entries first</code></z><z class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments># All diagonal entries in</code></z><z class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments># T[i][i] are 1 if symbol[i]</code></z><z class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments># is T (true). Similarly, all</code></z><z class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments># F[i][i] entries are 1 if</code></z><z class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments># symbol[i] is F (False)</code></z><z class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>for</code> <code class=plain>i </code><code class=keyword>in</code> <code class=functions>range</code><code class=plain>(n):</code></z><z class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>symb[i] </code><code class=keyword>=</code><code class=keyword>=</code> <code class=string>\'F\'</code><code class=plain>:</code></z><z class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>F[i][i] </code><code class=keyword>=</code> <code class=value>1</code></z><z class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>else</code><code class=plain>:</code></z><z class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>F[i][i] </code><code class=keyword>=</code> <code class=value>0</code></z><z class="line number26 index25 alt1">&nbsp;</z><z class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>symb[i] </code><code class=keyword>=</code><code class=keyword>=</code> <code class=string>\'T\'</code><code class=plain>:</code></z><z class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>T[i][i] </code><code class=keyword>=</code> <code class=value>1</code></z><z class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>else</code><code class=plain>:</code></z><z class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>T[i][i] </code><code class=keyword>=</code> <code class=value>0</code></z><z class="line number31 index30 alt2">&nbsp;</z><z class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments># Now fill T[i][i+1], T[i][i+2],</code></z><z class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments># T[i][i+3]... in order And</code></z><z class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments># F[i][i+1], F[i][i+2],</code></z><z class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments># F[i][i+3]... in order</code></z><z class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>for</code> <code class=plain>gap </code><code class=keyword>in</code> <code class=functions>range</code><code class=plain>(</code><code class=value>1</code><code class=plain>, n):</code></z><z class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>i </code><code class=keyword>=</code> <code class=value>0</code></z><z class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>for</code> <code class=plain>j </code><code class=keyword>in</code> <code class=functions>range</code><code class=plain>(gap, n):</code></z><z class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>T[i][j] </code><code class=keyword>=</code> <code class=plain>F[i][j] </code><code class=keyword>=</code> <code class=value>0</code></z><z class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>for</code> <code class=plain>g </code><code class=keyword>in</code> <code class=functions>range</code><code class=plain>(gap):</code></z><z class="line number41 index40 alt2">&nbsp;</z><z class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments># Find place of parenthesization</code></z><z class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments># using current value of gap</code></z><z class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>k </code><code class=keyword>=</code> <code class=plain>i </code><code class=keyword>+</code> <code class=plain>g</code></z><z class="line number45 index44 alt2">&nbsp;</z><z class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments># Store Total[i][k] and Total[k+1][j]</code></z><z class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>tik </code><code class=keyword>=</code> <code class=plain>T[i][k] </code><code class=keyword>+</code> <code class=plain>F[i][k]</code></z><z class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>tkj </code><code class=keyword>=</code> <code class=plain>T[k </code><code class=keyword>+</code> <code class=value>1</code><code class=plain>][j] </code><code class=keyword>+</code> <code class=plain>F[k </code><code class=keyword>+</code> <code class=value>1</code><code class=plain>][j]</code></z><z class="line number49 index48 alt2">&nbsp;</z><z class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments># Follow the recursive formulas</code></z><z class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments># according to the current operator</code></z><z class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>oper[k] </code><code class=keyword>=</code><code class=keyword>=</code> <code class=string>\'&\'</code><code class=plain>:</code></z><z class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>T[i][j] </code><code class=keyword>+</code><code class=keyword>=</code> <code class=plain>T[i][k] </code><code class=keyword>*</code> <code class=plain>T[k </code><code class=keyword>+</code> <code class=value>1</code><code class=plain>][j]</code></z><z class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>F[i][j] </code><code class=keyword>+</code><code class=keyword>=</code> <code class=plain>(tik </code><code class=keyword>*</code> <code class=plain>tkj </code><code class=keyword>-</code> <code class=plain>T[i][k] </code><code class=keyword>*</code></z><z class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>T[k </code><code class=keyword>+</code> <code class=value>1</code><code class=plain>][j])</code></z><z class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>oper[k] </code><code class=keyword>=</code><code class=keyword>=</code> <code class=string>\'|\'</code><code class=plain>:</code></z><z class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>F[i][j] </code><code class=keyword>+</code><code class=keyword>=</code> <code class=plain>F[i][k] </code><code class=keyword>*</code> <code class=plain>F[k </code><code class=keyword>+</code> <code class=value>1</code><code class=plain>][j]</code></z><z class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>T[i][j] </code><code class=keyword>+</code><code class=keyword>=</code> <code class=plain>(tik </code><code class=keyword>*</code> <code class=plain>tkj </code><code class=keyword>-</code> <code class=plain>F[i][k] </code><code class=keyword>*</code></z><z class="line number59 index58 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>F[k </code><code class=keyword>+</code> <code class=value>1</code><code class=plain>][j])</code></z><z class="line number60 index59 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>oper[k] </code><code class=keyword>=</code><code class=keyword>=</code> <code class=string>\'^\'</code><code class=plain>:</code></z><z class="line number61 index60 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>T[i][j] </code><code class=keyword>+</code><code class=keyword>=</code> <code class=plain>(F[i][k] </code><code class=keyword>*</code> <code class=plain>T[k </code><code class=keyword>+</code> <code class=value>1</code><code class=plain>][j] </code><code class=keyword>+</code></z><z class="line number62 index61 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>T[i][k] </code><code class=keyword>*</code> <code class=plain>F[k </code><code class=keyword>+</code> <code class=value>1</code><code class=plain>][j])</code></z><z class="line number63 index62 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>F[i][j] </code><code class=keyword>+</code><code class=keyword>=</code> <code class=plain>(T[i][k] </code><code class=keyword>*</code> <code class=plain>T[k </code><code class=keyword>+</code> <code class=value>1</code><code class=plain>][j] </code><code class=keyword>+</code></z><z class="line number64 index63 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>F[i][k] </code><code class=keyword>*</code> <code class=plain>F[k </code><code class=keyword>+</code> <code class=value>1</code><code class=plain>][j])</code></z><z class="line number65 index64 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>i </code><code class=keyword>+</code><code class=keyword>=</code> <code class=value>1</code></z><z class="line number66 index65 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>return</code> <code class=plain>T[</code><code class=value>0</code><code class=plain>][n </code><code class=keyword>-</code> <code class=value>1</code><code class=plain>]</code></z><z class="line number67 index66 alt2">&nbsp;</z><z class="line number68 index67 alt1">&nbsp;</z><z class="line number69 index68 alt2"><code class=comments># Driver Code</code></z><z class="line number70 index69 alt1"><code class=plain>symbols </code><code class=keyword>=</code> <code class=string>"TTFT"</code></z><z class="line number71 index70 alt2"><code class=plain>operators </code><code class=keyword>=</code> <code class=string>"|&^"</code></z><z class="line number72 index71 alt1"><code class=plain>n </code><code class=keyword>=</code> <code class=functions>len</code><code class=plain>(symbols)</code></z><z class="line number73 index72 alt2">&nbsp;</z><z class="line number74 index73 alt1"><code class=comments># There are 4 ways</code></z><z class="line number75 index74 alt2"><code class=comments># ((T|T)&(F^T)), (T|(T&(F^T))),</code></z><z class="line number76 index75 alt1"><code class=comments># (((T|T)&F)^T) and (T|((T&F)^T))</code></z><z class="line number77 index76 alt2"><code class=functions>print</code><code class=plain>(countParenth(symbols, operators, n))</code></z><z class="line number78 index77 alt1">&nbsp;</z><z class="line number79 index78 alt2"><code class=comments># This code is contributed by</code></z><z class="line number80 index79 alt1"><code class=comments># sahil shelangia</code></z></z></td></tr></tbody></table></z></z><z class=code-editor-container></z></x></z><z class=code-output-container><z class=output-block><i id=output-icon title=Output class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i></x><xre class=output-pre></xre></x></z><z class=ide-link-div><i id=copy-url-button title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i></x><xre id=ide-url></xre></x></z></x></z></z><h2 class=tabtitle>C#</h2><z class=tabcontent><z class=code-block><z class=code-gutter><z class=editor-buttons-container><z class=editor-buttons><z class=editor-buttons-div title="Run and Edit"><i id=copy-code-button title="Copy Code" class="gfg-icon gfg-icon_copy code-sidebar-button padding-2px copy-code-button"></i></x><z id=run-and-edit-loader class=ring-load></z><x><i id=run-and-edit-button title="Edit Code" lang=csharp class="gfg-icon gfg-icon_edit_1 padding-2px code-sidebar-button"></i><br><i id=close-code-editor-button title="Close Editor" class="gfg-icon gfg-icon_close-editor padding-2px code-sidebar-button close-code-editor-button"></i></x><z id=run-code-loader class=ring-load></z><x><i id=run-code-button lang=csharp title="Run Code and See Output" class="gfg-icon gfg-icon_play padding-2px code-sidebar-button"></i></x><z id=generate-url-loader class=ring-load></z><x><i id=generate-url-and-run-button title="Run Code and Generate IDE URL" lang=csharp class="gfg-icon gfg-icon_link padding-2px code-sidebar-button generate-url-and-run-button"></i><br><i title="Dark Mode" class="gfg-icon gfg-icon_dark-toggle padding-2px code-sidebar-button dark-editor-button"></i><br><i id=edit-on-ide-button title="Edit on IDE" lang=csharp class="gfg-icon gfg-icon_code padding-2px code-sidebar-button edit-on-ide-button"></i></z></x></z></x></z></x></z><z class=code-container><z id=highlighter_725523 class="syntaxhighlighter nogutter"><table border=0 cellpadding=0 cellspacing=0><tbody><tr><td class=code><z class=container><z class="line number1 index0 alt2"><code class=comments>// C# program of above approach</code></z><z class="line number2 index1 alt1"><code class=keyword>using</code> <code class=plain>System;</code></z><z class="line number3 index2 alt2">&nbsp;</z><z class="line number4 index3 alt1"><code class=keyword>class</code> <code class=plain>GFG</code></z><z class="line number5 index4 alt2"><code class=plain>{</code></z><z class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</z><z class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// Returns count of all possible</code></z><z class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// parenthesizations that lead to</code></z><z class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// result true for a boolean</code></z><z class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// expression with symbols like true</code></z><z class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// and false and operators like &, |</code></z><z class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// and ^ filled between symbols</code></z><z class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>static</code> <code class=keyword>int</code> <code class=plain>countParenth(</code><code class=keyword>char</code> <code class=plain>[]symb,</code></z><z class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>char</code> <code class=plain>[]oper, </code><code class=keyword>int</code> <code class=plain>n)</code></z><z class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>int</code> <code class=plain>[,]F = </code><code class=keyword>new</code> <code class=keyword>int</code><code class=plain>[n, n];</code></z><z class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>int</code> <code class=plain>[,]T = </code><code class=keyword>new</code> <code class=keyword>int</code><code class=plain>[n, n];</code></z><z class="line number18 index17 alt1">&nbsp;</z><z class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// Fill diagonal entries first</code></z><z class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// All diagonal entries in T[i,i]</code></z><z class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// are 1 if symbol[i] is T (true).</code></z><z class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// Similarly, all F[i,i] entries</code></z><z class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// are 1 if symbol[i] is F (False)</code></z><z class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>for</code> <code class=plain>(</code><code class=keyword>int</code> <code class=plain>i = 0; i &lt; n; i++)</code></z><z class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>F[i,i] = (symb[i] == </code><code class=string>\'F\'</code><code class=plain>) ? 1 : 0;</code></z><z class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>T[i,i] = (symb[i] == </code><code class=string>\'T\'</code><code class=plain>) ? 1 : 0;</code></z><z class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number29 index28 alt2">&nbsp;</z><z class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// Now fill T[i,i+1], T[i,i+2],</code></z><z class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// T[i,i+3]... in order And F[i,i+1],</code></z><z class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// F[i,i+2], F[i,i+3]... in order</code></z><z class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>for</code> <code class=plain>(</code><code class=keyword>int</code> <code class=plain>gap = 1; gap &lt; n; ++gap)</code></z><z class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>for</code> <code class=plain>(</code><code class=keyword>int</code> <code class=plain>i = 0, j = gap; j &lt; n; ++i, ++j)</code></z><z class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>T[i, j] = F[i, j] = 0;</code></z><z class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>for</code> <code class=plain>(</code><code class=keyword>int</code> <code class=plain>g = 0; g &lt; gap; g++)</code></z><z class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// Find place of parenthesization</code></z><z class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// using current value of gap</code></z><z class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>int</code> <code class=plain>k = i + g;</code></z><z class="line number43 index42 alt2">&nbsp;</z><z class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// Store Total[i,k] and Total[k+1,j]</code></z><z class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>int</code> <code class=plain>tik = T[i, k] + F[i, k];</code></z><z class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>int</code> <code class=plain>tkj = T[k + 1, j] + F[k + 1, j];</code></z><z class="line number47 index46 alt2">&nbsp;</z><z class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// Follow the recursive formulas</code></z><z class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// according to the current operator</code></z><z class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(oper[k] == </code><code class=string>\'&\'</code><code class=plain>)</code></z><z class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>T[i, j] += T[i, k]</code></z><z class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>* T[k + 1, j];</code></z><z class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>F[i, j] += (tik * tkj</code></z><z class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>- T[i, k] * T[k + 1, j]);</code></z><z class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(oper[k] == </code><code class=string>\'|\'</code><code class=plain>)</code></z><z class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number59 index58 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>F[i,j] += F[i, k]</code></z><z class="line number60 index59 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>* F[k + 1, j];</code></z><z class="line number61 index60 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>T[i,j] += (tik</code></z><z class="line number62 index61 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>* tkj - F[i, k]</code></z><z class="line number63 index62 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>* F[k + 1, j]);</code></z><z class="line number64 index63 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number65 index64 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(oper[k] == </code><code class=string>\'^\'</code><code class=plain>)</code></z><z class="line number66 index65 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number67 index66 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>T[i, j] += F[i, k] * T[k + 1, j] +</code></z><z class="line number68 index67 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>T[i, k] * F[k + 1, j];</code></z><z class="line number69 index68 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>F[i, j] += T[i, k] * T[k + 1, j] +</code></z><z class="line number70 index69 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>F[i, k] * F[k + 1, j];</code></z><z class="line number71 index70 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number72 index71 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number73 index72 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number74 index73 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number75 index74 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>return</code> <code class=plain>T[0,n - 1];</code></z><z class="line number76 index75 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number77 index76 alt2">&nbsp;</z><z class="line number78 index77 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// Driver code</code></z><z class="line number79 index78 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>public</code> <code class=keyword>static</code> <code class=keyword>void</code> <code class=plain>Main()</code></z><z class="line number80 index79 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number81 index80 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>char</code> <code class=plain>[]symbols = </code><code class=string>"TTFT"</code><code class=plain>.ToCharArray();</code></z><z class="line number82 index81 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>char</code> <code class=plain>[]operators = </code><code class=string>"|&^"</code><code class=plain>.ToCharArray();</code></z><z class="line number83 index82 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>int</code> <code class=plain>n = symbols.Length;</code></z><z class="line number84 index83 alt1">&nbsp;</z><z class="line number85 index84 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// There are 4 ways</code></z><z class="line number86 index85 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// ((T|T)&(F^T)), (T|(T&(F^T))),</code></z><z class="line number87 index86 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// (((T|T)&F)^T) and (T|((T&F)^T))</code></z><z class="line number88 index87 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>Console.WriteLine(countParenth(symbols,</code></z><z class="line number89 index88 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>operators, n));</code></z><z class="line number90 index89 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number91 index90 alt2"><code class=plain>}</code></z><z class="line number92 index91 alt1">&nbsp;</z><z class="line number93 index92 alt2"><code class=comments>/* This code contributed by PrinciRaj1992 */</code></z></z></td></tr></tbody></table></z></z><z class=code-editor-container></z></x></z><z class=code-output-container><z class=output-block><i id=output-icon title=Output class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i></x><xre class=output-pre></xre></x></z><z class=ide-link-div><i id=copy-url-button title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i></x><xre id=ide-url></xre></x></z></x></z></z><h2 class=tabtitle>Javascript</h2><z class=tabcontent><z class=code-block><z class=code-gutter><z class=editor-buttons-container><z class=editor-buttons><z class=editor-buttons-div title="Run and Edit"><i id=copy-code-button title="Copy Code" class="gfg-icon gfg-icon_copy code-sidebar-button padding-2px copy-code-button"></i></x><z id=run-and-edit-loader class=ring-load></z><x><i id=run-and-edit-button title="Edit Code" lang=jscript class="gfg-icon gfg-icon_edit_1 padding-2px code-sidebar-button"></i><br><i id=close-code-editor-button title="Close Editor" class="gfg-icon gfg-icon_close-editor padding-2px code-sidebar-button close-code-editor-button"></i></x><z id=run-code-loader class=ring-load></z><x><i id=run-code-button lang=jscript title="Run Code and See Output" class="gfg-icon gfg-icon_play padding-2px code-sidebar-button"></i></x><z id=generate-url-loader class=ring-load></z><x><i id=generate-url-and-run-button title="Run Code and Generate IDE URL" lang=jscript class="gfg-icon gfg-icon_link padding-2px code-sidebar-button generate-url-and-run-button"></i><br><i title="Dark Mode" class="gfg-icon gfg-icon_dark-toggle padding-2px code-sidebar-button dark-editor-button"></i><br><i id=edit-on-ide-button title="Edit on IDE" lang=jscript class="gfg-icon gfg-icon_code padding-2px code-sidebar-button edit-on-ide-button"></i></z></x></z></x></z></x></z><z class=code-container><z id=highlighter_835518 class="syntaxhighlighter nogutter"><table border=0 cellpadding=0 cellspacing=0><tbody><tr><td class=code><z class=container><z class="line number1 index0 alt2"><code class=plain>&lt;script></code></z><z class="line number2 index1 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// Returns count of all possible</code></z><z class="line number3 index2 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// parenthesizations that lead to</code></z><z class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// result true for a boolean</code></z><z class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// expression with symbols like true</code></z><z class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// and false and operators like &, |</code></z><z class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// and ^ filled between symbols</code></z><z class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>function</code> <code class=plain>countParenth(symb, oper, n)</code></z><z class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>let F = </code><code class=keyword>new</code> <code class=plain>Array(n);</code></z><z class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>let T = </code><code class=keyword>new</code> <code class=plain>Array(n);</code></z><z class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</z><z class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>for</code> <code class=plain>(let i = 0; i &lt; n; i++)</code></z><z class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>F[i] = </code><code class=keyword>new</code> <code class=plain>Array(n);</code></z><z class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>T[i] = </code><code class=keyword>new</code> <code class=plain>Array(n);</code></z><z class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>for</code><code class=plain>(let j = 0; j &lt; n; j++)</code></z><z class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>F[i][j] = 0;</code></z><z class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>T[i][j] = 0;</code></z><z class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</z><z class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// Fill diagonal entries first</code></z><z class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// All diagonal entries in T[i][i]</code></z><z class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// are 1 if symbol[i] is T (true).</code></z><z class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// Similarly, all F[i][i] entries</code></z><z class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// are 1 if symbol[i] is F (False)</code></z><z class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>for</code> <code class=plain>(let i = 0; i &lt; n; i++) {</code></z><z class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>F[i][i] = (symb[i] == </code><code class=string>\'F\'</code><code class=plain>) ? 1 : 0;</code></z><z class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>T[i][i] = (symb[i] == </code><code class=string>\'T\'</code><code class=plain>) ? 1 : 0;</code></z><z class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</z><z class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// Now fill T[i][i+1], T[i][i+2],</code></z><z class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// T[i][i+3]... in order And F[i][i+1],</code></z><z class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// F[i][i+2], F[i][i+3]... in order</code></z><z class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>for</code> <code class=plain>(let gap = 1; gap &lt; n; ++gap)</code></z><z class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>for</code> <code class=plain>(let i = 0,</code></z><z class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>j = gap; j &lt; n;</code></z><z class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>++i, ++j)</code></z><z class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>T[i][j] = F[i][j] = 0;</code></z><z class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>for</code> <code class=plain>(let g = 0; g &lt; gap; g++)</code></z><z class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</z><z class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// Find place of parenthesization</code></z><z class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// using current value of gap</code></z><z class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>let k = i + g;</code></z><z class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</z><z class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// Store Total[i][k]</code></z><z class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// and Total[k+1][j]</code></z><z class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>let tik = T[i][k]</code></z><z class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>+ F[i][k];</code></z><z class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>let tkj = T[k + 1][j]</code></z><z class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>+ F[k + 1][j];</code></z><z class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</z><z class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// Follow the recursive formulas</code></z><z class="line number59 index58 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// according to the current operator</code></z><z class="line number60 index59 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(oper[k] == </code><code class=string>\'&\'</code><code class=plain>)</code></z><z class="line number61 index60 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number62 index61 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>T[i][j] += T[i][k]</code></z><z class="line number63 index62 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>* T[k + 1][j];</code></z><z class="line number64 index63 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>F[i][j]</code></z><z class="line number65 index64 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>+= (tik * tkj</code></z><z class="line number66 index65 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>- T[i][k]</code></z><z class="line number67 index66 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>* T[k + 1][j]);</code></z><z class="line number68 index67 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number69 index68 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(oper[k] == </code><code class=string>\'|\'</code><code class=plain>)</code></z><z class="line number70 index69 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number71 index70 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>F[i][j] += F[i][k]</code></z><z class="line number72 index71 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>* F[k + 1][j];</code></z><z class="line number73 index72 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>T[i][j]</code></z><z class="line number74 index73 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>+= (tik * tkj</code></z><z class="line number75 index74 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>- F[i][k]</code></z><z class="line number76 index75 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>* F[k + 1][j]);</code></z><z class="line number77 index76 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number78 index77 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(oper[k] == </code><code class=string>\'^\'</code><code class=plain>)</code></z><z class="line number79 index78 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number80 index79 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>T[i][j] += F[i][k]</code></z><z class="line number81 index80 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>* T[k + 1][j]</code></z><z class="line number82 index81 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>+ T[i][k]</code></z><z class="line number83 index82 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>* F[k + 1][j];</code></z><z class="line number84 index83 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>F[i][j] += T[i][k]</code></z><z class="line number85 index84 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>* T[k + 1][j]</code></z><z class="line number86 index85 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>+ F[i][k]</code></z><z class="line number87 index86 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>* F[k + 1][j];</code></z><z class="line number88 index87 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number89 index88 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number90 index89 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number91 index90 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number92 index91 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>return</code> <code class=plain>T[0][n - 1];</code></z><z class="line number93 index92 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number94 index93 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</z><z class="line number95 index94 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>let symbols = </code><code class=string>"TTFT"</code><code class=plain>.split(</code><code class=string>\'\'</code><code class=plain>);</code></z><z class="line number96 index95 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>let operators = </code><code class=string>"|&^"</code><code class=plain>.split(</code><code class=string>\'\'</code><code class=plain>);</code></z><z class="line number97 index96 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>let n = symbols.length;</code></z><z class="line number98 index97 alt1">&nbsp;</z><z class="line number99 index98 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// There are 4 ways</code></z><z class="line number100 index99 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// ((T|T)&(F^T)), (T|(T&(F^T))),</code></z><z class="line number101 index100 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// (((T|T)&F)^T) and (T|((T&F)^T))</code></z><z class="line number102 index101 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>document.write(countParenth(symbols, operators, n));</code></z><z class="line number103 index102 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</z><z class="line number104 index103 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// This code is contributed by mukesh07.</code></z><z class="line number105 index104 alt2"><code class=plain>&lt;/script></code></z></z></td></tr></tbody></table></z></z><z class=code-editor-container></z></x></z><z class=code-output-container><z class=output-block><i id=output-icon title=Output class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i></x><xre class=output-pre></xre></x></z><z class=ide-link-div><i id=copy-url-button title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i></x><xre id=ide-url></xre></x></z></x></z></z></z><x><strong>Output:</strong>&nbsp;</x><xre>4</xre><x><strong>Time Complexity:</strong> O(n<sup>3</sup>), as we are using nested loops to traverse n<sup>3</sup> times. Where n is the length of the symbols string.<br><strong>Auxiliary Space:</strong> O(n<sup>2</sup>), as we are using extra space for the DP matrix. Where n is the length of the symbols string.</x><z style="min-height:90px;text-align:center;margin:20px 0" id=GFG_AD_Desktop_MTF_Postcontent_728x90></z><x><strong>Approach 2:&nbsp;</strong></x><x>We can also use the recursive approach (Top-Down DP), this approach uses memoization.</x><z class=responsive-tabs><h2 class=tabtitle>C++</h2><z class=tabcontent><z class=code-block><z class=code-gutter><z class=editor-buttons-container><z class=editor-buttons><z class=editor-buttons-div title="Run and Edit"><i id=copy-code-button title="Copy Code" class="gfg-icon gfg-icon_copy code-sidebar-button padding-2px copy-code-button"></i></x><z id=run-and-edit-loader class=ring-load></z><x><i id=run-and-edit-button title="Edit Code" lang=cpp class="gfg-icon gfg-icon_edit_1 padding-2px code-sidebar-button"></i><br><i id=close-code-editor-button title="Close Editor" class="gfg-icon gfg-icon_close-editor padding-2px code-sidebar-button close-code-editor-button"></i></x><z id=run-code-loader class=ring-load></z><x><i id=run-code-button lang=cpp title="Run Code and See Output" class="gfg-icon gfg-icon_play padding-2px code-sidebar-button"></i></x><z id=generate-url-loader class=ring-load></z><x><i id=generate-url-and-run-button title="Run Code and Generate IDE URL" lang=cpp class="gfg-icon gfg-icon_link padding-2px code-sidebar-button generate-url-and-run-button"></i><br><i title="Dark Mode" class="gfg-icon gfg-icon_dark-toggle padding-2px code-sidebar-button dark-editor-button"></i><br><i id=edit-on-ide-button title="Edit on IDE" lang=cpp class="gfg-icon gfg-icon_code padding-2px code-sidebar-button edit-on-ide-button"></i></z></x></z></x></z></x></z><z class=code-container><z id=highlighter_211753 class="syntaxhighlighter nogutter"><table border=0 cellpadding=0 cellspacing=0><tbody><tr><td class=code><z class=container><z class="line number1 index0 alt2"><code class=preprocessor>#include &lt;bits/stdc++.h></code></z><z class="line number2 index1 alt1"><code class="keyword bold">using</code> <code class="keyword bold">namespace</code> <code class=plain>std;</code></z><z class="line number3 index2 alt2">&nbsp;</z><z class="line number4 index3 alt1"><code class="color1 bold">int</code> <code class=plain>dp[101][101][2];</code></z><z class="line number5 index4 alt2"><code class="color1 bold">int</code> <code class=plain>parenthesis_count(string s,</code></z><z class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="color1 bold">int</code> <code class=plain>i,</code></z><z class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="color1 bold">int</code> <code class=plain>j,</code></z><z class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="color1 bold">int</code> <code class=plain>isTrue)</code></z><z class="line number9 index8 alt2"><code class=plain>{</code></z><z class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// Base Condition</code></z><z class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword bold">if</code> <code class=plain>(i > j)</code></z><z class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword bold">return</code> <code class="keyword bold">false</code><code class=plain>;</code></z><z class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword bold">if</code> <code class=plain>(i == j) {</code></z><z class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword bold">if</code> <code class=plain>(isTrue == 1)</code></z><z class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword bold">return</code> <code class=plain>s[i] == </code><code class=string>\'T\'</code><code class=plain>;</code></z><z class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword bold">else</code></z><z class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword bold">return</code> <code class=plain>s[i] == </code><code class=string>\'F\'</code><code class=plain>;</code></z><z class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number19 index18 alt2">&nbsp;</z><z class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword bold">if</code> <code class=plain>(dp[i][j][isTrue] != -1)</code></z><z class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword bold">return</code> <code class=plain>dp[i][j][isTrue];</code></z><z class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="color1 bold">int</code> <code class=plain>ans = 0;</code></z><z class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword bold">for</code> <code class=plain>(</code><code class="color1 bold">int</code> <code class=plain>k = i + 1</code></z><z class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>; k &lt;= j - 1; k = k + 2)</code></z><z class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="color1 bold">int</code> <code class=plain>leftF, leftT, rightT, rightF;</code></z><z class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword bold">if</code> <code class=plain>(dp[i][k - 1][1] == -1)</code></z><z class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>leftT = parenthesis_count(s, i, k - 1, 1);</code></z><z class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>} </code><code class=comments>// Count no. of T in left partition</code></z><z class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword bold">else</code> <code class=plain>{</code></z><z class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>leftT = dp[i][k - 1][1];</code></z><z class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number34 index33 alt1">&nbsp;</z><z class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword bold">if</code> <code class=plain>(dp[k + 1][j][1] == -1)</code></z><z class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>rightT = parenthesis_count(s, k + 1, j, 1);</code></z><z class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>} </code><code class=comments>// Count no. of T in right partition</code></z><z class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword bold">else</code></z><z class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>rightT = dp[k + 1][j][1];</code></z><z class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number43 index42 alt2">&nbsp;</z><z class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword bold">if</code> <code class=plain>(dp[i][k - 1][0] == -1)</code></z><z class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// Count no. of F in left partition</code></z><z class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>leftF = parenthesis_count(s, i, k - 1, 0);</code></z><z class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword bold">else</code></z><z class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>leftF = dp[i][k - 1][0];</code></z><z class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number53 index52 alt2">&nbsp;</z><z class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword bold">if</code> <code class=plain>(dp[k + 1][j][0] == -1)</code></z><z class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// Count no. of F in right partition</code></z><z class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>rightF = parenthesis_count(s, k + 1, j, 0);</code></z><z class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number59 index58 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword bold">else</code></z><z class="line number60 index59 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number61 index60 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>rightF = dp[k + 1][j][0];</code></z><z class="line number62 index61 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number63 index62 alt2">&nbsp;</z><z class="line number64 index63 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword bold">if</code> <code class=plain>(s[k] == </code><code class=string>\'&\'</code><code class=plain>)</code></z><z class="line number65 index64 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number66 index65 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword bold">if</code> <code class=plain>(isTrue == 1)</code></z><z class="line number67 index66 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>ans += leftT * rightT;</code></z><z class="line number68 index67 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword bold">else</code></z><z class="line number69 index68 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>ans += leftF * rightF + leftT * rightF</code></z><z class="line number70 index69 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>+ leftF * rightT;</code></z><z class="line number71 index70 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number72 index71 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword bold">else</code> <code class="keyword bold">if</code> <code class=plain>(s[k] == </code><code class=string>\'|\'</code><code class=plain>)</code></z><z class="line number73 index72 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number74 index73 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword bold">if</code> <code class=plain>(isTrue == 1)</code></z><z class="line number75 index74 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>ans += leftT * rightT + leftT * rightF</code></z><z class="line number76 index75 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>+ leftF * rightT;</code></z><z class="line number77 index76 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword bold">else</code></z><z class="line number78 index77 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>ans = ans + leftF * rightF;</code></z><z class="line number79 index78 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number80 index79 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword bold">else</code> <code class="keyword bold">if</code> <code class=plain>(s[k] == </code><code class=string>\'^\'</code><code class=plain>)</code></z><z class="line number81 index80 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number82 index81 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword bold">if</code> <code class=plain>(isTrue == 1)</code></z><z class="line number83 index82 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>ans = ans + leftF * rightT + leftT * rightF;</code></z><z class="line number84 index83 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword bold">else</code></z><z class="line number85 index84 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>ans = ans + leftT * rightT + leftF * rightF;</code></z><z class="line number86 index85 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number87 index86 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>dp[i][j][isTrue] = ans;</code></z><z class="line number88 index87 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number89 index88 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword bold">return</code> <code class=plain>ans;</code></z><z class="line number90 index89 alt1"><code class=plain>}</code></z><z class="line number91 index90 alt2">&nbsp;</z><z class="line number92 index91 alt1"><code class=comments>// Driver Code</code></z><z class="line number93 index92 alt2"><code class="color1 bold">int</code> <code class=plain>main()</code></z><z class="line number94 index93 alt1"><code class=plain>{</code></z><z class="line number95 index94 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>string symbols = </code><code class=string>"TTFT"</code><code class=plain>;</code></z><z class="line number96 index95 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>string operators = </code><code class=string>"|&^"</code><code class=plain>;</code></z><z class="line number97 index96 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>string s;</code></z><z class="line number98 index97 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="color1 bold">int</code> <code class=plain>j = 0;</code></z><z class="line number99 index98 alt2">&nbsp;</z><z class="line number100 index99 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword bold">for</code> <code class=plain>(</code><code class="color1 bold">int</code> <code class=plain>i = 0; i &lt; symbols.length(); i++)</code></z><z class="line number101 index100 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number102 index101 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>s.push_back(symbols[i]);</code></z><z class="line number103 index102 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword bold">if</code> <code class=plain>(j &lt; operators.length())</code></z><z class="line number104 index103 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>s.push_back(operators[j++]);</code></z><z class="line number105 index104 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number106 index105 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</z><z class="line number107 index106 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// We obtain the string&nbsp; T|T&F^T</code></z><z class="line number108 index107 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="color1 bold">int</code> <code class=plain>n = s.length();</code></z><z class="line number109 index108 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</z><z class="line number110 index109 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// There are 4 ways</code></z><z class="line number111 index110 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// ((T|T)&(F^T)), (T|(T&(F^T))), (((T|T)&F)^T) and</code></z><z class="line number112 index111 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// (T|((T&F)^T))</code></z><z class="line number113 index112 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="functions bold">memset</code><code class=plain>(dp, -1, </code><code class="keyword bold">sizeof</code><code class=plain>(dp));</code></z><z class="line number114 index113 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>cout &lt;&lt; parenthesis_count(s, 0, n - 1, 1);</code></z><z class="line number115 index114 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword bold">return</code> <code class=plain>0;</code></z><z class="line number116 index115 alt1"><code class=plain>}</code></z></z></td></tr></tbody></table></z></z><z class=code-editor-container></z></x></z><z class=code-output-container><z class=output-block><i id=output-icon title=Output class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i></x><xre class=output-pre></xre></x></z><z class=ide-link-div><i id=copy-url-button title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i></x><xre id=ide-url></xre></x></z></x></z></z><h2 class=tabtitle>Java</h2><z class=tabcontent><z class=code-block><z class=code-gutter><z class=editor-buttons-container><z class=editor-buttons><z class=editor-buttons-div title="Run and Edit"><i id=copy-code-button title="Copy Code" class="gfg-icon gfg-icon_copy code-sidebar-button padding-2px copy-code-button"></i></x><z id=run-and-edit-loader class=ring-load></z><x><i id=run-and-edit-button title="Edit Code" lang=java class="gfg-icon gfg-icon_edit_1 padding-2px code-sidebar-button"></i><br><i id=close-code-editor-button title="Close Editor" class="gfg-icon gfg-icon_close-editor padding-2px code-sidebar-button close-code-editor-button"></i></x><z id=run-code-loader class=ring-load></z><x><i id=run-code-button lang=java title="Run Code and See Output" class="gfg-icon gfg-icon_play padding-2px code-sidebar-button"></i></x><z id=generate-url-loader class=ring-load></z><x><i id=generate-url-and-run-button title="Run Code and Generate IDE URL" lang=java class="gfg-icon gfg-icon_link padding-2px code-sidebar-button generate-url-and-run-button"></i><br><i title="Dark Mode" class="gfg-icon gfg-icon_dark-toggle padding-2px code-sidebar-button dark-editor-button"></i><br><i id=edit-on-ide-button title="Edit on IDE" lang=java class="gfg-icon gfg-icon_code padding-2px code-sidebar-button edit-on-ide-button"></i></z></x></z></x></z></x></z><z class=code-container><z id=highlighter_385387 class="syntaxhighlighter nogutter"><table border=0 cellpadding=0 cellspacing=0><tbody><tr><td class=code><z class=container><z class="line number1 index0 alt2"><code class=keyword>import</code> <code class=plain>java.io.*;</code></z><z class="line number2 index1 alt1"><code class=keyword>import</code> <code class=plain>java.util.*;</code></z><z class="line number3 index2 alt2">&nbsp;</z><z class="line number4 index3 alt1"><code class=keyword>class</code> <code class=plain>GFG {</code></z><z class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>public</code> <code class=keyword>static</code> <code class=keyword>int</code> <code class=plain>countWays(</code><code class=keyword>int</code> <code class=plain>N, String S)</code></z><z class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>int</code> <code class=plain>dp[][][] = </code><code class=keyword>new</code> <code class=keyword>int</code><code class=plain>[N + </code><code class=value>1</code><code class=plain>][N + </code><code class=value>1</code><code class=plain>][</code><code class=value>2</code><code class=plain>];</code></z><z class="line number8 index7 alt1">&nbsp;</z><z class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>for</code> <code class=plain>(</code><code class=keyword>int</code> <code class=plain>row[][] : dp)</code></z><z class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>for</code> <code class=plain>(</code><code class=keyword>int</code> <code class=plain>col[] : row)</code></z><z class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>Arrays.fill(col, -</code><code class=value>1</code><code class=plain>);</code></z><z class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>return</code> <code class=plain>parenthesis_count(S, </code><code class=value>0</code><code class=plain>, N - </code><code class=value>1</code><code class=plain>, </code><code class=value>1</code><code class=plain>, dp);</code></z><z class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number14 index13 alt1">&nbsp;</z><z class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>public</code> <code class=keyword>static</code> <code class=keyword>int</code> <code class=plain>parenthesis_count(String str, </code><code class=keyword>int</code> <code class=plain>i,</code></z><z class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>int</code> <code class=plain>j, </code><code class=keyword>int</code> <code class=plain>isTrue,</code></z><z class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>int</code><code class=plain>[][][] dp)</code></z><z class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(i > j)</code></z><z class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>return</code> <code class=value>0</code><code class=plain>;</code></z><z class="line number21 index20 alt2">&nbsp;</z><z class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(i == j)</code></z><z class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(isTrue == </code><code class=value>1</code><code class=plain>)</code></z><z class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>return</code> <code class=plain>(str.charAt(i) == </code><code class=string>\'T\'</code><code class=plain>) ? </code><code class=value>1</code> <code class=plain>: </code><code class=value>0</code><code class=plain>;</code></z><z class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>else</code></z><z class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>return</code> <code class=plain>(str.charAt(i) == </code><code class=string>\'F\'</code><code class=plain>) ? </code><code class=value>1</code> <code class=plain>: </code><code class=value>0</code><code class=plain>;</code></z><z class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number33 index32 alt2">&nbsp;</z><z class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(dp[i][j][isTrue] != -</code><code class=value>1</code><code class=plain>)</code></z><z class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>return</code> <code class=plain>dp[i][j][isTrue];</code></z><z class="line number36 index35 alt1">&nbsp;</z><z class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>int</code> <code class=plain>temp_ans = </code><code class=value>0</code><code class=plain>;</code></z><z class="line number38 index37 alt1">&nbsp;</z><z class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>int</code> <code class=plain>leftTrue, rightTrue, leftFalse, rightFalse;</code></z><z class="line number40 index39 alt1">&nbsp;</z><z class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>for</code> <code class=plain>(</code><code class=keyword>int</code> <code class=plain>k = i + </code><code class=value>1</code><code class=plain>; k &lt;= j - </code><code class=value>1</code><code class=plain>; k = k + </code><code class=value>2</code><code class=plain>)</code></z><z class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number43 index42 alt2">&nbsp;</z><z class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(dp[i][k - </code><code class=value>1</code><code class=plain>][</code><code class=value>1</code><code class=plain>] != -</code><code class=value>1</code><code class=plain>)</code></z><z class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>leftTrue = dp[i][k - </code><code class=value>1</code><code class=plain>][</code><code class=value>1</code><code class=plain>];</code></z><z class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>else</code></z><z class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// Count number of True in left Partition</code></z><z class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>leftTrue = parenthesis_count(str, i, k - </code><code class=value>1</code><code class=plain>,</code></z><z class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=value>1</code><code class=plain>, dp);</code></z><z class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(dp[i][k - </code><code class=value>1</code><code class=plain>][</code><code class=value>0</code><code class=plain>] != -</code><code class=value>1</code><code class=plain>)</code></z><z class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>leftFalse = dp[i][k - </code><code class=value>1</code><code class=plain>][</code><code class=value>0</code><code class=plain>];</code></z><z class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>else</code></z><z class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</z><z class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// Count number of False in left Partition</code></z><z class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>leftFalse = parenthesis_count(str, i, k - </code><code class=value>1</code><code class=plain>,</code></z><z class="line number59 index58 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=value>0</code><code class=plain>, dp);</code></z><z class="line number60 index59 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number61 index60 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(dp[k + </code><code class=value>1</code><code class=plain>][j][</code><code class=value>1</code><code class=plain>] != -</code><code class=value>1</code><code class=plain>)</code></z><z class="line number62 index61 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>rightTrue = dp[k + </code><code class=value>1</code><code class=plain>][j][</code><code class=value>1</code><code class=plain>];</code></z><z class="line number63 index62 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>else</code></z><z class="line number64 index63 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number65 index64 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</z><z class="line number66 index65 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// Count number of True in right Partition</code></z><z class="line number67 index66 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>rightTrue = parenthesis_count(str, k + </code><code class=value>1</code><code class=plain>, j,</code></z><z class="line number68 index67 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=value>1</code><code class=plain>, dp);</code></z><z class="line number69 index68 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number70 index69 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(dp[k + </code><code class=value>1</code><code class=plain>][j][</code><code class=value>0</code><code class=plain>] != -</code><code class=value>1</code><code class=plain>)</code></z><z class="line number71 index70 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>rightFalse = dp[k + </code><code class=value>1</code><code class=plain>][j][</code><code class=value>0</code><code class=plain>];</code></z><z class="line number72 index71 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>else</code></z><z class="line number73 index72 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number74 index73 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</z><z class="line number75 index74 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// Count number of False in right Partition</code></z><z class="line number76 index75 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>rightFalse = parenthesis_count(str, k + </code><code class=value>1</code><code class=plain>,</code></z><z class="line number77 index76 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>j, </code><code class=value>0</code><code class=plain>, dp);</code></z><z class="line number78 index77 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number79 index78 alt2">&nbsp;</z><z class="line number80 index79 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// Evaluate AND operation</code></z><z class="line number81 index80 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(str.charAt(k) == </code><code class=string>\'&\'</code><code class=plain>)</code></z><z class="line number82 index81 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number83 index82 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(isTrue == </code><code class=value>1</code><code class=plain>)</code></z><z class="line number84 index83 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number85 index84 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>temp_ans</code></z><z class="line number86 index85 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>= temp_ans + leftTrue * rightTrue;</code></z><z class="line number87 index86 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number88 index87 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>else</code></z><z class="line number89 index88 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number90 index89 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>temp_ans = temp_ans</code></z><z class="line number91 index90 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>+ leftTrue * rightFalse</code></z><z class="line number92 index91 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>+ leftFalse * rightTrue</code></z><z class="line number93 index92 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>+ leftFalse * rightFalse;</code></z><z class="line number94 index93 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number95 index94 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number96 index95 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// Evaluate OR operation</code></z><z class="line number97 index96 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>else</code> <code class=keyword>if</code> <code class=plain>(str.charAt(k) == </code><code class=string>\'|\'</code><code class=plain>)</code></z><z class="line number98 index97 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number99 index98 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(isTrue == </code><code class=value>1</code><code class=plain>)</code></z><z class="line number100 index99 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number101 index100 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>temp_ans = temp_ans</code></z><z class="line number102 index101 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>+ leftTrue * rightTrue</code></z><z class="line number103 index102 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>+ leftTrue * rightFalse</code></z><z class="line number104 index103 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>+ leftFalse * rightTrue;</code></z><z class="line number105 index104 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number106 index105 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>else</code></z><z class="line number107 index106 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number108 index107 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>temp_ans</code></z><z class="line number109 index108 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>= temp_ans + leftFalse * rightFalse;</code></z><z class="line number110 index109 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number111 index110 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number112 index111 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</z><z class="line number113 index112 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// Evaluate XOR operation</code></z><z class="line number114 index113 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>else</code> <code class=keyword>if</code> <code class=plain>(str.charAt(k) == </code><code class=string>\'^\'</code><code class=plain>)</code></z><z class="line number115 index114 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number116 index115 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(isTrue == </code><code class=value>1</code><code class=plain>)</code></z><z class="line number117 index116 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number118 index117 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>temp_ans = temp_ans</code></z><z class="line number119 index118 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>+ leftTrue * rightFalse</code></z><z class="line number120 index119 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>+ leftFalse * rightTrue;</code></z><z class="line number121 index120 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number122 index121 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>else</code></z><z class="line number123 index122 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number124 index123 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>temp_ans = temp_ans</code></z><z class="line number125 index124 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>+ leftTrue * rightTrue</code></z><z class="line number126 index125 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>+ leftFalse * rightFalse;</code></z><z class="line number127 index126 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number128 index127 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number129 index128 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>dp[i][j][isTrue] = temp_ans;</code></z><z class="line number130 index129 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number131 index130 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>return</code> <code class=plain>temp_ans;</code></z><z class="line number132 index131 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number133 index132 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code>&nbsp;</z><z class="line number134 index133 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class=comments>// Driver code</code></z><z class="line number135 index134 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>public</code> <code class=keyword>static</code> <code class=keyword>void</code> <code class=plain>main(String[] args)</code></z><z class="line number136 index135 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number137 index136 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>String symbols = </code><code class=string>"TTFT"</code><code class=plain>;</code></z><z class="line number138 index137 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>String operators = </code><code class=string>"|&^"</code><code class=plain>;</code></z><z class="line number139 index138 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>StringBuilder S = </code><code class=keyword>new</code> <code class=plain>StringBuilder();</code></z><z class="line number140 index139 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>int</code> <code class=plain>j = </code><code class=value>0</code><code class=plain>;</code></z><z class="line number141 index140 alt2">&nbsp;</z><z class="line number142 index141 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>for</code> <code class=plain>(</code><code class=keyword>int</code> <code class=plain>i = </code><code class=value>0</code><code class=plain>; i &lt; symbols.length(); i++)</code></z><z class="line number143 index142 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number144 index143 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>S.append(symbols.charAt(i));</code></z><z class="line number145 index144 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(j &lt; operators.length())</code></z><z class="line number146 index145 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>S.append(operators.charAt(j++));</code></z><z class="line number147 index146 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number148 index147 alt1">&nbsp;</z><z class="line number149 index148 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// We obtain the string&nbsp; T|T&F^T</code></z><z class="line number150 index149 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>int</code> <code class=plain>N = S.length();</code></z><z class="line number151 index150 alt2">&nbsp;</z><z class="line number152 index151 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// There are 4 ways</code></z><z class="line number153 index152 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// ((T|T)&(F^T)), (T|(T&(F^T))), (((T|T)&F)^T) and</code></z><z class="line number154 index153 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// (T|((T&F)^T))</code></z><z class="line number155 index154 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>System.out.println(countWays(N, S.toString()));</code></z><z class="line number156 index155 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number157 index156 alt2"><code class=plain>}</code></z><z class="line number158 index157 alt1">&nbsp;</z><z class="line number159 index158 alt2"><code class=comments>// This code is contributed by farheenbano.</code></z></z></td></tr></tbody></table></z></z><z class=code-editor-container></z></x></z><z class=code-output-container><z class=output-block><i id=output-icon title=Output class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i></x><xre class=output-pre></xre></x></z><z class=ide-link-div><i id=copy-url-button title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i></x><xre id=ide-url></xre></x></z></x></z></z><h2 class=tabtitle>Python3</h2><z class=tabcontent><z class=code-block><z class=code-gutter><z class=editor-buttons-container><z class=editor-buttons><z class=editor-buttons-div title="Run and Edit"><i id=copy-code-button title="Copy Code" class="gfg-icon gfg-icon_copy code-sidebar-button padding-2px copy-code-button"></i></x><z id=run-and-edit-loader class=ring-load></z><x><i id=run-and-edit-button title="Edit Code" lang=python3 class="gfg-icon gfg-icon_edit_1 padding-2px code-sidebar-button"></i><br><i id=close-code-editor-button title="Close Editor" class="gfg-icon gfg-icon_close-editor padding-2px code-sidebar-button close-code-editor-button"></i></x><z id=run-code-loader class=ring-load></z><x><i id=run-code-button lang=python3 title="Run Code and See Output" class="gfg-icon gfg-icon_play padding-2px code-sidebar-button"></i></x><z id=generate-url-loader class=ring-load></z><x><i id=generate-url-and-run-button title="Run Code and Generate IDE URL" lang=python3 class="gfg-icon gfg-icon_link padding-2px code-sidebar-button generate-url-and-run-button"></i><br><i title="Dark Mode" class="gfg-icon gfg-icon_dark-toggle padding-2px code-sidebar-button dark-editor-button"></i><br><i id=edit-on-ide-button title="Edit on IDE" lang=python3 class="gfg-icon gfg-icon_code padding-2px code-sidebar-button edit-on-ide-button"></i></z></x></z></x></z></x></z><z class=code-container><z id=highlighter_134524 class="syntaxhighlighter nogutter"><table border=0 cellpadding=0 cellspacing=0><tbody><tr><td class=code><z class=container><z class="line number1 index0 alt2"><code class=keyword>def</code> <code class=plain>parenthesis_count(</code><code class=functions>Str</code><code class=plain>, i, j, isTrue, dp) :</code></z><z class="line number2 index1 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</z><z class="line number3 index2 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(i > j) :</code></z><z class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>return</code> <code class=value>0</code></z><z class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</z><z class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(i </code><code class=keyword>=</code><code class=keyword>=</code> <code class=plain>j) :</code></z><z class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</z><z class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(isTrue </code><code class=keyword>=</code><code class=keyword>=</code> <code class=value>1</code><code class=plain>) :</code></z><z class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</z><z class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>return</code> <code class=value>1</code> <code class=keyword>if</code> <code class=functions>Str</code><code class=plain>[i] </code><code class=keyword>=</code><code class=keyword>=</code> <code class=string>\'T\'</code> <code class=keyword>else</code> <code class=value>0</code></z><z class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</z><z class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>else</code> <code class=plain>:</code></z><z class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</z><z class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>return</code> <code class=value>1</code> <code class=keyword>if</code> <code class=functions>Str</code><code class=plain>[i] </code><code class=keyword>=</code><code class=keyword>=</code> <code class=string>\'F\'</code> <code class=keyword>else</code> <code class=value>0</code></z><z class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</z><z class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(dp[i][j][isTrue] !</code><code class=keyword>=</code> <code class=keyword>-</code><code class=value>1</code><code class=plain>) :</code></z><z class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>return</code> <code class=plain>dp[i][j][isTrue]</code></z><z class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</z><z class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>temp_ans </code><code class=keyword>=</code> <code class=value>0</code></z><z class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</z><z class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>for</code> <code class=plain>k </code><code class=keyword>in</code> <code class=functions>range</code><code class=plain>(i </code><code class=keyword>+</code> <code class=value>1</code><code class=plain>, j, </code><code class=value>2</code><code class=plain>) :</code></z><z class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</z><z class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(dp[i][k </code><code class=keyword>-</code> <code class=value>1</code><code class=plain>][</code><code class=value>1</code><code class=plain>] !</code><code class=keyword>=</code> <code class=keyword>-</code><code class=value>1</code><code class=plain>) :</code></z><z class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>leftTrue </code><code class=keyword>=</code> <code class=plain>dp[i][k </code><code class=keyword>-</code> <code class=value>1</code><code class=plain>][</code><code class=value>1</code><code class=plain>]</code></z><z class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>else</code> <code class=plain>:</code></z><z class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments># Count number of True in left Partition</code></z><z class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>leftTrue </code><code class=keyword>=</code> <code class=plain>parenthesis_count(</code><code class=functions>Str</code><code class=plain>, i, k </code><code class=keyword>-</code> <code class=value>1</code><code class=plain>, </code><code class=value>1</code><code class=plain>, dp)</code></z><z class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</z><z class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(dp[i][k </code><code class=keyword>-</code> <code class=value>1</code><code class=plain>][</code><code class=value>0</code><code class=plain>] !</code><code class=keyword>=</code> <code class=keyword>-</code><code class=value>1</code><code class=plain>) :</code></z><z class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>leftFalse </code><code class=keyword>=</code> <code class=plain>dp[i][k </code><code class=keyword>-</code> <code class=value>1</code><code class=plain>][</code><code class=value>0</code><code class=plain>]</code></z><z class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>else</code> <code class=plain>:</code></z><z class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments># Count number of False in left Partition</code></z><z class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>leftFalse </code><code class=keyword>=</code> <code class=plain>parenthesis_count(</code><code class=functions>Str</code><code class=plain>, i, k </code><code class=keyword>-</code> <code class=value>1</code><code class=plain>, </code><code class=value>0</code><code class=plain>, dp)</code></z><z class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</z><z class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(dp[k </code><code class=keyword>+</code> <code class=value>1</code><code class=plain>][j][</code><code class=value>1</code><code class=plain>] !</code><code class=keyword>=</code> <code class=keyword>-</code><code class=value>1</code><code class=plain>) :</code></z><z class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>rightTrue </code><code class=keyword>=</code> <code class=plain>dp[k </code><code class=keyword>+</code> <code class=value>1</code><code class=plain>][j][</code><code class=value>1</code><code class=plain>]</code></z><z class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>else</code> <code class=plain>:</code></z><z class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments># Count number of True in right Partition</code></z><z class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>rightTrue </code><code class=keyword>=</code> <code class=plain>parenthesis_count(</code><code class=functions>Str</code><code class=plain>, k </code><code class=keyword>+</code> <code class=value>1</code><code class=plain>, j, </code><code class=value>1</code><code class=plain>, dp)</code></z><z class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</z><z class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(dp[k </code><code class=keyword>+</code> <code class=value>1</code><code class=plain>][j][</code><code class=value>0</code><code class=plain>] !</code><code class=keyword>=</code> <code class=keyword>-</code><code class=value>1</code><code class=plain>) :</code></z><z class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>rightFalse </code><code class=keyword>=</code> <code class=plain>dp[k </code><code class=keyword>+</code> <code class=value>1</code><code class=plain>][j][</code><code class=value>0</code><code class=plain>]</code></z><z class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>else</code> <code class=plain>:</code></z><z class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments># Count number of False in right Partition</code></z><z class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>rightFalse </code><code class=keyword>=</code> <code class=plain>parenthesis_count(</code><code class=functions>Str</code><code class=plain>, k </code><code class=keyword>+</code> <code class=value>1</code><code class=plain>, j, </code><code class=value>0</code><code class=plain>, dp)</code></z><z class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</z><z class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments># Evaluate AND operation</code></z><z class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(</code><code class=functions>Str</code><code class=plain>[k] </code><code class=keyword>=</code><code class=keyword>=</code> <code class=string>\'&\'</code><code class=plain>) :</code></z><z class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(isTrue </code><code class=keyword>=</code><code class=keyword>=</code> <code class=value>1</code><code class=plain>) :</code></z><z class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>temp_ans </code><code class=keyword>=</code> <code class=plain>temp_ans </code><code class=keyword>+</code> <code class=plain>leftTrue </code><code class=keyword>*</code> <code class=plain>rightTrue</code></z><z class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>else</code> <code class=plain>:</code></z><z class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>temp_ans </code><code class=keyword>=</code> <code class=plain>temp_ans </code><code class=keyword>+</code> <code class=plain>leftTrue </code><code class=keyword>*</code> <code class=plain>rightFalse </code><code class=keyword>+</code> <code class=plain>leftFalse </code><code class=keyword>*</code> <code class=plain>rightTrue </code><code class=keyword>+</code> <code class=plain>leftFalse </code><code class=keyword>*</code> <code class=plain>rightFalse</code></z><z class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments># Evaluate OR operation</code></z><z class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>elif</code> <code class=plain>(</code><code class=functions>Str</code><code class=plain>[k] </code><code class=keyword>=</code><code class=keyword>=</code> <code class=string>\'|\'</code><code class=plain>) :</code></z><z class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(isTrue </code><code class=keyword>=</code><code class=keyword>=</code> <code class=value>1</code><code class=plain>) :</code></z><z class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>temp_ans </code><code class=keyword>=</code> <code class=plain>temp_ans </code><code class=keyword>+</code> <code class=plain>leftTrue </code><code class=keyword>*</code> <code class=plain>rightTrue </code><code class=keyword>+</code> <code class=plain>leftTrue </code><code class=keyword>*</code> <code class=plain>rightFalse </code><code class=keyword>+</code> <code class=plain>leftFalse </code><code class=keyword>*</code> <code class=plain>rightTrue</code></z><z class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>else</code> <code class=plain>:</code></z><z class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>temp_ans </code><code class=keyword>=</code> <code class=plain>temp_ans </code><code class=keyword>+</code> <code class=plain>leftFalse </code><code class=keyword>*</code> <code class=plain>rightFalse</code></z><z class="line number59 index58 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</z><z class="line number60 index59 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments># Evaluate XOR operation</code></z><z class="line number61 index60 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>elif</code> <code class=plain>(</code><code class=functions>Str</code><code class=plain>[k] </code><code class=keyword>=</code><code class=keyword>=</code> <code class=string>\'^\'</code><code class=plain>) :</code></z><z class="line number62 index61 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(isTrue </code><code class=keyword>=</code><code class=keyword>=</code> <code class=value>1</code><code class=plain>) :</code></z><z class="line number63 index62 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>temp_ans </code><code class=keyword>=</code> <code class=plain>temp_ans </code><code class=keyword>+</code> <code class=plain>leftTrue </code><code class=keyword>*</code> <code class=plain>rightFalse </code><code class=keyword>+</code> <code class=plain>leftFalse </code><code class=keyword>*</code> <code class=plain>rightTrue</code></z><z class="line number64 index63 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>else</code> <code class=plain>:</code></z><z class="line number65 index64 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>temp_ans </code><code class=keyword>=</code> <code class=plain>temp_ans </code><code class=keyword>+</code> <code class=plain>leftTrue </code><code class=keyword>*</code> <code class=plain>rightTrue </code><code class=keyword>+</code> <code class=plain>leftFalse </code><code class=keyword>*</code> <code class=plain>rightFalse</code></z><z class="line number66 index65 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>dp[i][j][isTrue] </code><code class=keyword>=</code> <code class=plain>temp_ans</code></z><z class="line number67 index66 alt2">&nbsp;</z><z class="line number68 index67 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>return</code> <code class=plain>temp_ans</code></z><z class="line number69 index68 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</z><z class="line number70 index69 alt1"><code class=keyword>def</code> <code class=plain>countWays(N, S) :</code></z><z class="line number71 index70 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</z><z class="line number72 index71 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>dp </code><code class=keyword>=</code> <code class=plain>[[[</code><code class=keyword>-</code><code class=value>1</code> <code class=keyword>for</code> <code class=plain>k </code><code class=keyword>in</code> <code class=functions>range</code><code class=plain>(</code><code class=value>2</code><code class=plain>)] </code><code class=keyword>for</code> <code class=plain>i </code><code class=keyword>in</code> <code class=functions>range</code><code class=plain>(N </code><code class=keyword>+</code> <code class=value>1</code><code class=plain>)] </code><code class=keyword>for</code> <code class=plain>j </code><code class=keyword>in</code> <code class=functions>range</code><code class=plain>(N </code><code class=keyword>+</code> <code class=value>1</code><code class=plain>)]</code></z><z class="line number73 index72 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>return</code> <code class=plain>parenthesis_count(S, </code><code class=value>0</code><code class=plain>, N </code><code class=keyword>-</code> <code class=value>1</code><code class=plain>, </code><code class=value>1</code><code class=plain>, dp)</code></z><z class="line number74 index73 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</z><z class="line number75 index74 alt2"><code class=plain>symbols </code><code class=keyword>=</code> <code class=string>"TTFT"</code></z><z class="line number76 index75 alt1"><code class=plain>operators </code><code class=keyword>=</code> <code class=string>"|&^"</code></z><z class="line number77 index76 alt2"><code class=plain>S </code><code class=keyword>=</code> <code class=plain>""</code></z><z class="line number78 index77 alt1"><code class=plain>j </code><code class=keyword>=</code> <code class=value>0</code></z><z class="line number79 index78 alt2"><code class=keyword>for</code> <code class=plain>i </code><code class=keyword>in</code> <code class=functions>range</code><code class=plain>(</code><code class=functions>len</code><code class=plain>(symbols)) :</code></z><z class="line number80 index79 alt1">&nbsp;</z><z class="line number81 index80 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code><code class=plain>S </code><code class=keyword>=</code> <code class=plain>S </code><code class=keyword>+</code> <code class=plain>symbols[i]</code></z><z class="line number82 index81 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(j &lt; </code><code class=functions>len</code><code class=plain>(operators)) :</code></z><z class="line number83 index82 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>S </code><code class=keyword>=</code> <code class=plain>S </code><code class=keyword>+</code> <code class=plain>operators[j]</code></z><z class="line number84 index83 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>j </code><code class=keyword>+</code><code class=keyword>=</code> <code class=value>1</code></z><z class="line number85 index84 alt2">&nbsp;</z><z class="line number86 index85 alt1"><code class=comments># We obtain the string&nbsp; T|T&F^T</code></z><z class="line number87 index86 alt2"><code class=plain>N </code><code class=keyword>=</code> <code class=functions>len</code><code class=plain>(S)</code></z><z class="line number88 index87 alt1">&nbsp;</z><z class="line number89 index88 alt2"><code class=comments># There are 4 ways</code></z><z class="line number90 index89 alt1"><code class=comments># ((T|T)&(F^T)), (T|(T&(F^T))), (((T|T)&F)^T) and</code></z><z class="line number91 index90 alt2"><code class=comments># (T|((T&F)^T))</code></z><z class="line number92 index91 alt1"><code class=functions>print</code><code class=plain>(countWays(N, S))</code></z><z class="line number93 index92 alt2">&nbsp;</z><z class="line number94 index93 alt1"><code class=comments># This code is contributed by divyesh072019</code></z></z></td></tr></tbody></table></z></z><z class=code-editor-container></z></x></z><z class=code-output-container><z class=output-block><i id=output-icon title=Output class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i></x><xre class=output-pre></xre></x></z><z class=ide-link-div><i id=copy-url-button title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i></x><xre id=ide-url></xre></x></z></x></z></z><h2 class=tabtitle>C#</h2><z class=tabcontent><z class=code-block><z class=code-gutter><z class=editor-buttons-container><z class=editor-buttons><z class=editor-buttons-div title="Run and Edit"><i id=copy-code-button title="Copy Code" class="gfg-icon gfg-icon_copy code-sidebar-button padding-2px copy-code-button"></i></x><z id=run-and-edit-loader class=ring-load></z><x><i id=run-and-edit-button title="Edit Code" lang=csharp class="gfg-icon gfg-icon_edit_1 padding-2px code-sidebar-button"></i><br><i id=close-code-editor-button title="Close Editor" class="gfg-icon gfg-icon_close-editor padding-2px code-sidebar-button close-code-editor-button"></i></x><z id=run-code-loader class=ring-load></z><x><i id=run-code-button lang=csharp title="Run Code and See Output" class="gfg-icon gfg-icon_play padding-2px code-sidebar-button"></i></x><z id=generate-url-loader class=ring-load></z><x><i id=generate-url-and-run-button title="Run Code and Generate IDE URL" lang=csharp class="gfg-icon gfg-icon_link padding-2px code-sidebar-button generate-url-and-run-button"></i><br><i title="Dark Mode" class="gfg-icon gfg-icon_dark-toggle padding-2px code-sidebar-button dark-editor-button"></i><br><i id=edit-on-ide-button title="Edit on IDE" lang=csharp class="gfg-icon gfg-icon_code padding-2px code-sidebar-button edit-on-ide-button"></i></z></x></z></x></z></x></z><z class=code-container><z id=highlighter_914388 class="syntaxhighlighter nogutter"><table border=0 cellpadding=0 cellspacing=0><tbody><tr><td class=code><z class=container><z class="line number1 index0 alt2"><code class=keyword>using</code> <code class=plain>System;</code></z><z class="line number2 index1 alt1"><code class=keyword>class</code> <code class=plain>GFG</code></z><z class="line number3 index2 alt2"><code class=plain>{</code></z><z class="line number4 index3 alt1">&nbsp;</z><z class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code><code class=keyword>static</code> <code class=keyword>int</code> <code class=plain>parenthesis_count(</code><code class=keyword>string</code> <code class=plain>str, </code><code class=keyword>int</code> <code class=plain>i,</code></z><z class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>int</code> <code class=plain>j, </code><code class=keyword>int</code> <code class=plain>isTrue,</code></z><z class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>int</code><code class=plain>[,,] dp)</code></z><z class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(i > j)</code></z><z class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>return</code> <code class=plain>0;</code></z><z class="line number11 index10 alt2">&nbsp;</z><z class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(i == j)</code></z><z class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(isTrue == 1)</code></z><z class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>return</code> <code class=plain>(str[i] == </code><code class=string>\'T\'</code><code class=plain>) ? 1 : 0;</code></z><z class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>else</code></z><z class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>return</code> <code class=plain>(str[i] == </code><code class=string>\'F\'</code><code class=plain>) ? 1 : 0;</code></z><z class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number23 index22 alt2">&nbsp;</z><z class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(dp[i, j, isTrue] != -1)</code></z><z class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>return</code> <code class=plain>dp[i, j, isTrue];</code></z><z class="line number26 index25 alt1">&nbsp;</z><z class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>int</code> <code class=plain>temp_ans = 0;</code></z><z class="line number28 index27 alt1">&nbsp;</z><z class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>int</code> <code class=plain>leftTrue, rightTrue, leftFalse, rightFalse;</code></z><z class="line number30 index29 alt1">&nbsp;</z><z class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>for</code> <code class=plain>(</code><code class=keyword>int</code> <code class=plain>k = i + 1; k &lt;= j - 1; k = k + 2)</code></z><z class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number33 index32 alt2">&nbsp;</z><z class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(dp[i, k - 1, 1] != -1)</code></z><z class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>leftTrue = dp[i, k - 1, 1];</code></z><z class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>else</code></z><z class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// Count number of True in left Partition</code></z><z class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>leftTrue = parenthesis_count(str, i, k - 1, 1, dp);</code></z><z class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(dp[i, k - 1, 0] != -1)</code></z><z class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>leftFalse = dp[i, k - 1, 0];</code></z><z class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>else</code></z><z class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number45 index44 alt2">&nbsp;</z><z class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// Count number of False in left Partition</code></z><z class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>leftFalse = parenthesis_count(str, i, k - 1, 0, dp);</code></z><z class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(dp[k + 1, j, 1] != -1)</code></z><z class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>rightTrue = dp[k + 1, j, 1];</code></z><z class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>else</code></z><z class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number53 index52 alt2">&nbsp;</z><z class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// Count number of True in right Partition</code></z><z class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>rightTrue = parenthesis_count(str, k + 1, j,</code></z><z class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>1, dp);</code></z><z class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(dp[k + 1, j, 0] != -1)</code></z><z class="line number59 index58 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>rightFalse = dp[k + 1, j, 0];</code></z><z class="line number60 index59 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>else</code></z><z class="line number61 index60 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number62 index61 alt1">&nbsp;</z><z class="line number63 index62 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// Count number of False in right Partition</code></z><z class="line number64 index63 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>rightFalse = parenthesis_count(str, k + 1,</code></z><z class="line number65 index64 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>j, 0, dp);</code></z><z class="line number66 index65 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number67 index66 alt2">&nbsp;</z><z class="line number68 index67 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// Evaluate AND operation</code></z><z class="line number69 index68 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(str[k] == </code><code class=string>\'&\'</code><code class=plain>)</code></z><z class="line number70 index69 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number71 index70 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(isTrue == 1)</code></z><z class="line number72 index71 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number73 index72 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>temp_ans</code></z><z class="line number74 index73 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>= temp_ans + leftTrue * rightTrue;</code></z><z class="line number75 index74 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number76 index75 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>else</code></z><z class="line number77 index76 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number78 index77 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>temp_ans = temp_ans</code></z><z class="line number79 index78 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>+ leftTrue * rightFalse</code></z><z class="line number80 index79 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>+ leftFalse * rightTrue</code></z><z class="line number81 index80 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>+ leftFalse * rightFalse;</code></z><z class="line number82 index81 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number83 index82 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number84 index83 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// Evaluate OR operation</code></z><z class="line number85 index84 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>else</code> <code class=keyword>if</code> <code class=plain>(str[k] == </code><code class=string>\'|\'</code><code class=plain>)</code></z><z class="line number86 index85 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number87 index86 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(isTrue == 1)</code></z><z class="line number88 index87 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number89 index88 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>temp_ans = temp_ans</code></z><z class="line number90 index89 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>+ leftTrue * rightTrue</code></z><z class="line number91 index90 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>+ leftTrue * rightFalse</code></z><z class="line number92 index91 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>+ leftFalse * rightTrue;</code></z><z class="line number93 index92 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number94 index93 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>else</code></z><z class="line number95 index94 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number96 index95 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>temp_ans</code></z><z class="line number97 index96 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>= temp_ans + leftFalse * rightFalse;</code></z><z class="line number98 index97 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number99 index98 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number100 index99 alt1">&nbsp;</z><z class="line number101 index100 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// Evaluate XOR operation</code></z><z class="line number102 index101 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>else</code> <code class=keyword>if</code> <code class=plain>(str[k] == </code><code class=string>\'^\'</code><code class=plain>)</code></z><z class="line number103 index102 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number104 index103 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(isTrue == 1)</code></z><z class="line number105 index104 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number106 index105 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>temp_ans = temp_ans</code></z><z class="line number107 index106 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>+ leftTrue * rightFalse</code></z><z class="line number108 index107 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>+ leftFalse * rightTrue;</code></z><z class="line number109 index108 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number110 index109 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>else</code></z><z class="line number111 index110 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number112 index111 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>temp_ans = temp_ans</code></z><z class="line number113 index112 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>+ leftTrue * rightTrue</code></z><z class="line number114 index113 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>+ leftFalse * rightFalse;</code></z><z class="line number115 index114 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number116 index115 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number117 index116 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>dp[i, j, isTrue] = temp_ans;</code></z><z class="line number118 index117 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number119 index118 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>return</code> <code class=plain>temp_ans;</code></z><z class="line number120 index119 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number121 index120 alt2">&nbsp;</z><z class="line number122 index121 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class=keyword>static</code> <code class=keyword>int</code> <code class=plain>countWays(</code><code class=keyword>int</code> <code class=plain>N, </code><code class=keyword>string</code> <code class=plain>S)</code></z><z class="line number123 index122 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number124 index123 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>int</code><code class=plain>[,,] dp = </code><code class=keyword>new</code> <code class=keyword>int</code><code class=plain>[N + 1, N + 1, 2];</code></z><z class="line number125 index124 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>for</code><code class=plain>(</code><code class=keyword>int</code> <code class=plain>i = 0; i &lt; (N + 1); i++)</code></z><z class="line number126 index125 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number127 index126 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>for</code><code class=plain>(</code><code class=keyword>int</code> <code class=plain>j = 0; j &lt; (N + 1); j++)</code></z><z class="line number128 index127 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number129 index128 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>for</code><code class=plain>(</code><code class=keyword>int</code> <code class=plain>k = 0; k &lt; 2; k++)</code></z><z class="line number130 index129 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number131 index130 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>dp[i, j, k] = -1;</code></z><z class="line number132 index131 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number133 index132 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number134 index133 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number135 index134 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>return</code> <code class=plain>parenthesis_count(S, 0, N - 1, 1, dp);</code></z><z class="line number136 index135 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number137 index136 alt2">&nbsp;</z><z class="line number138 index137 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class=comments>// Driver code</code></z><z class="line number139 index138 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code><code class=keyword>static</code> <code class=keyword>void</code> <code class=plain>Main()</code></z><z class="line number140 index139 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number141 index140 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>string</code> <code class=plain>symbols = </code><code class=string>"TTFT"</code><code class=plain>;</code></z><z class="line number142 index141 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>string</code> <code class=plain>operators = </code><code class=string>"|&^"</code><code class=plain>;</code></z><z class="line number143 index142 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>string</code> <code class=plain>S = </code><code class=string>""</code><code class=plain>;</code></z><z class="line number144 index143 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>int</code> <code class=plain>j = 0;</code></z><z class="line number145 index144 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>for</code> <code class=plain>(</code><code class=keyword>int</code> <code class=plain>i = 0; i &lt; symbols.Length; i++)</code></z><z class="line number146 index145 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number147 index146 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>S = S + symbols[i];</code></z><z class="line number148 index147 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(j &lt; operators.Length)</code></z><z class="line number149 index148 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>S = S + operators[j++];</code></z><z class="line number150 index149 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number151 index150 alt2">&nbsp;</z><z class="line number152 index151 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// We obtain the string&nbsp; T|T&F^T</code></z><z class="line number153 index152 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>int</code> <code class=plain>N = S.Length;</code></z><z class="line number154 index153 alt1">&nbsp;</z><z class="line number155 index154 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// There are 4 ways</code></z><z class="line number156 index155 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// ((T|T)&(F^T)), (T|(T&(F^T))), (((T|T)&F)^T) and</code></z><z class="line number157 index156 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// (T|((T&F)^T))</code></z><z class="line number158 index157 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>Console.WriteLine(countWays(N, S));</code></z><z class="line number159 index158 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number160 index159 alt1"><code class=plain>}</code></z><z class="line number161 index160 alt2">&nbsp;</z><z class="line number162 index161 alt1"><code class=comments>// This code is contributed by divyeshrabadiya07.</code></z></z></td></tr></tbody></table></z></z><z class=code-editor-container></z></x></z><z class=code-output-container><z class=output-block><i id=output-icon title=Output class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i></x><xre class=output-pre></xre></x></z><z class=ide-link-div><i id=copy-url-button title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i></x><xre id=ide-url></xre></x></z></x></z></z><h2 class=tabtitle>Javascript</h2><z class=tabcontent><z class=code-block><z class=code-gutter><z class=editor-buttons-container><z class=editor-buttons><z class=editor-buttons-div title="Run and Edit"><i id=copy-code-button title="Copy Code" class="gfg-icon gfg-icon_copy code-sidebar-button padding-2px copy-code-button"></i></x><z id=run-and-edit-loader class=ring-load></z><x><i id=run-and-edit-button title="Edit Code" lang=jscript class="gfg-icon gfg-icon_edit_1 padding-2px code-sidebar-button"></i><br><i id=close-code-editor-button title="Close Editor" class="gfg-icon gfg-icon_close-editor padding-2px code-sidebar-button close-code-editor-button"></i></x><z id=run-code-loader class=ring-load></z><x><i id=run-code-button lang=jscript title="Run Code and See Output" class="gfg-icon gfg-icon_play padding-2px code-sidebar-button"></i></x><z id=generate-url-loader class=ring-load></z><x><i id=generate-url-and-run-button title="Run Code and Generate IDE URL" lang=jscript class="gfg-icon gfg-icon_link padding-2px code-sidebar-button generate-url-and-run-button"></i><br><i title="Dark Mode" class="gfg-icon gfg-icon_dark-toggle padding-2px code-sidebar-button dark-editor-button"></i><br><i id=edit-on-ide-button title="Edit on IDE" lang=jscript class="gfg-icon gfg-icon_code padding-2px code-sidebar-button edit-on-ide-button"></i></z></x></z></x></z></x></z><z class=code-container><z id=highlighter_815121 class="syntaxhighlighter nogutter"><table border=0 cellpadding=0 cellspacing=0><tbody><tr><td class=code><z class=container><z class="line number1 index0 alt2"><code class=plain>&lt;script></code></z><z class="line number2 index1 alt1">&nbsp;</z><z class="line number3 index2 alt2"><code class=keyword>function</code> <code class=plain>countWays(N, S)</code></z><z class="line number4 index3 alt1"><code class=plain>{</code></z><z class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>let dp = </code><code class=keyword>new</code> <code class=plain>Array(N + 1);</code></z><z class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>for</code><code class=plain>(let i = 0; i &lt; N + 1; i++)</code></z><z class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>dp[i] = </code><code class=keyword>new</code> <code class=plain>Array(N+1);</code></z><z class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>for</code><code class=plain>(let j = 0; j &lt; N + 1;j++)</code></z><z class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>dp[i][j] = </code><code class=keyword>new</code> <code class=plain>Array(2);</code></z><z class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>for</code><code class=plain>(let k = 0; k &lt; 2; k++)</code></z><z class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>dp[i][j][k] = -1;</code></z><z class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</z><z class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</z><z class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>return</code> <code class=plain>parenthesis_count(S, 0, N - 1, 1, dp);</code></z><z class="line number19 index18 alt2"><code class=plain>}</code></z><z class="line number20 index19 alt1">&nbsp;</z><z class="line number21 index20 alt2"><code class=keyword>function</code> <code class=plain>parenthesis_count(str, i, j, isTrue, dp)</code></z><z class="line number22 index21 alt1"><code class=plain>{</code></z><z class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(i > j)</code></z><z class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>return</code> <code class=plain>0;</code></z><z class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</z><z class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(i == j)</code></z><z class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(isTrue == 1)</code></z><z class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>return</code> <code class=plain>(str[i] == </code><code class=string>\'T\'</code><code class=plain>) ? 1 : 0;</code></z><z class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>else</code></z><z class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>return</code> <code class=plain>(str[i] == </code><code class=string>\'F\'</code><code class=plain>) ? 1 : 0;</code></z><z class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</z><z class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(dp[i][j][isTrue] != -1)</code></z><z class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>return</code> <code class=plain>dp[i][j][isTrue];</code></z><z class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</z><z class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>let temp_ans = 0;</code></z><z class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</z><z class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>let leftTrue, rightTrue, leftFalse, rightFalse;</code></z><z class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</z><z class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>for</code> <code class=plain>(let k = i + 1; k &lt;= j - 1; k = k + 2)</code></z><z class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</z><z class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(dp[i][k - 1][1] != -1)</code></z><z class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>leftTrue = dp[i][k - 1][1];</code></z><z class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>else</code></z><z class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// Count number of True in left Partition</code></z><z class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>leftTrue = parenthesis_count(str, i, k - 1,</code></z><z class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>1, dp);</code></z><z class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(dp[i][k - 1][0] != -1)</code></z><z class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>leftFalse = dp[i][k - 1][0];</code></z><z class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>else</code></z><z class="line number59 index58 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number60 index59 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</z><z class="line number61 index60 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// Count number of False in left Partition</code></z><z class="line number62 index61 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>leftFalse = parenthesis_count(str, i, k - 1,</code></z><z class="line number63 index62 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>0, dp);</code></z><z class="line number64 index63 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number65 index64 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(dp[k + 1][j][1] != -1)</code></z><z class="line number66 index65 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>rightTrue = dp[k + 1][j][1];</code></z><z class="line number67 index66 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>else</code></z><z class="line number68 index67 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number69 index68 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</z><z class="line number70 index69 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// Count number of True in right Partition</code></z><z class="line number71 index70 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>rightTrue = parenthesis_count(str, k + 1, j,</code></z><z class="line number72 index71 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>1, dp);</code></z><z class="line number73 index72 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number74 index73 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(dp[k + 1][j][0] != -1)</code></z><z class="line number75 index74 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>rightFalse = dp[k + 1][j][0];</code></z><z class="line number76 index75 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>else</code></z><z class="line number77 index76 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number78 index77 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</z><z class="line number79 index78 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// Count number of False in right Partition</code></z><z class="line number80 index79 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>rightFalse = parenthesis_count(str, k + 1,</code></z><z class="line number81 index80 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>j, 0, dp);</code></z><z class="line number82 index81 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number83 index82 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</z><z class="line number84 index83 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// Evaluate AND operation</code></z><z class="line number85 index84 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(str[k] == </code><code class=string>\'&\'</code><code class=plain>)</code></z><z class="line number86 index85 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number87 index86 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(isTrue == 1)</code></z><z class="line number88 index87 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number89 index88 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>temp_ans</code></z><z class="line number90 index89 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>= temp_ans + leftTrue * rightTrue;</code></z><z class="line number91 index90 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number92 index91 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>else</code></z><z class="line number93 index92 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number94 index93 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>temp_ans = temp_ans</code></z><z class="line number95 index94 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>+ leftTrue * rightFalse</code></z><z class="line number96 index95 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>+ leftFalse * rightTrue</code></z><z class="line number97 index96 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>+ leftFalse * rightFalse;</code></z><z class="line number98 index97 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number99 index98 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number100 index99 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// Evaluate OR operation</code></z><z class="line number101 index100 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>else</code> <code class=keyword>if</code> <code class=plain>(str[k] == </code><code class=string>\'|\'</code><code class=plain>)</code></z><z class="line number102 index101 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number103 index102 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(isTrue == 1)</code></z><z class="line number104 index103 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number105 index104 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>temp_ans = temp_ans</code></z><z class="line number106 index105 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>+ leftTrue * rightTrue</code></z><z class="line number107 index106 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>+ leftTrue * rightFalse</code></z><z class="line number108 index107 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>+ leftFalse * rightTrue;</code></z><z class="line number109 index108 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number110 index109 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>else</code></z><z class="line number111 index110 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number112 index111 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>temp_ans</code></z><z class="line number113 index112 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>= temp_ans + leftFalse * rightFalse;</code></z><z class="line number114 index113 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number115 index114 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number116 index115 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</z><z class="line number117 index116 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=comments>// Evaluate XOR operation</code></z><z class="line number118 index117 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>else</code> <code class=keyword>if</code> <code class=plain>(str[k] == </code><code class=string>\'^\'</code><code class=plain>)</code></z><z class="line number119 index118 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number120 index119 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(isTrue == 1)</code></z><z class="line number121 index120 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number122 index121 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>temp_ans = temp_ans</code></z><z class="line number123 index122 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>+ leftTrue * rightFalse</code></z><z class="line number124 index123 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>+ leftFalse * rightTrue;</code></z><z class="line number125 index124 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number126 index125 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>else</code></z><z class="line number127 index126 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>{</code></z><z class="line number128 index127 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>temp_ans = temp_ans</code></z><z class="line number129 index128 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>+ leftTrue * rightTrue</code></z><z class="line number130 index129 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>+ leftFalse * rightFalse;</code></z><z class="line number131 index130 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number132 index131 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number133 index132 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>dp[i][j][isTrue] = temp_ans;</code></z><z class="line number134 index133 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>}</code></z><z class="line number135 index134 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>return</code> <code class=plain>temp_ans;</code></z><z class="line number136 index135 alt1"><code class=plain>}</code></z><z class="line number137 index136 alt2">&nbsp;</z><z class="line number138 index137 alt1"><code class="undefined spaces">&nbsp;</code><code class=comments>// Driver code</code></z><z class="line number139 index138 alt2"><code class=plain>let symbols = </code><code class=string>"TTFT"</code><code class=plain>;</code></z><z class="line number140 index139 alt1"><code class=plain>let operators = </code><code class=string>"|&^"</code><code class=plain>;</code></z><z class="line number141 index140 alt2"><code class=plain>let S = [];</code></z><z class="line number142 index141 alt1"><code class=plain>let j = 0;</code></z><z class="line number143 index142 alt2">&nbsp;</z><z class="line number144 index143 alt1"><code class=keyword>for</code> <code class=plain>(let i = 0; i &lt; symbols.length; i++)</code></z><z class="line number145 index144 alt2"><code class=plain>{</code></z><z class="line number146 index145 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>S.push(symbols[i]);</code></z><z class="line number147 index146 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=keyword>if</code> <code class=plain>(j &lt; operators.length)</code></z><z class="line number148 index147 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=plain>S.push(operators[j++]);</code></z><z class="line number149 index148 alt2"><code class=plain>}</code></z><z class="line number150 index149 alt1">&nbsp;</z><z class="line number151 index150 alt2"><code class=comments>// We obtain the string&nbsp; T|T&F^T</code></z><z class="line number152 index151 alt1"><code class=plain>let N = S.length;</code></z><z class="line number153 index152 alt2">&nbsp;</z><z class="line number154 index153 alt1"><code class=comments>// There are 4 ways</code></z><z class="line number155 index154 alt2"><code class=comments>// ((T|T)&(F^T)), (T|(T&(F^T))), (((T|T)&F)^T) and</code></z><z class="line number156 index155 alt1"><code class=comments>// (T|((T&F)^T))</code></z><z class="line number157 index156 alt2"><code class=plain>document.write(countWays(N, S.join(</code><code class=string>""</code><code class=plain>)));</code></z><z class="line number158 index157 alt1">&nbsp;</z><z class="line number159 index158 alt2"><code class=comments>// This code is contributed by avanitrachhadiya2155</code></z><z class="line number160 index159 alt1"><code class=plain>&lt;/script></code></z></z></td></tr></tbody></table></z></z><z class=code-editor-container></z></x></z><z class=code-output-container><z class=output-block><i id=output-icon title=Output class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i></x><xre class=output-pre></xre></x></z><z class=ide-link-div><i id=copy-url-button title="Copy Generated Ide URL" class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i></x><xre id=ide-url></xre></x></z></x></z></z></z><z class=code-output><strong>Output</strong></x><xre>4</xre></z><x><strong>Time Complexity: </strong>O(n<sup>3</sup>), as we are using a loop to traverse, n times and we are making recursive calls which will cost n<sup>2 </sup>times. Where n is the length of the symbols string.<br><strong>Auxiliary Space:</strong> O(n<sup>2</sup>), as we are using extra space for the DP matrix. Where n is the length of the symbols string.</x><x><strong>References:</strong>&nbsp;<br><a target=_blank rel="noopener noreferrer nofollow" href=https://people.cs.clemson.edu/~bcdean/dp_practice/dp_9.swf>https://people.cs.clemson.edu/~bcdean/dp_practice/dp_9.swf</a><br>Please write comments if you find anything incorrect, or if you want to share more information about the topic discussed above<br>&nbsp;</x><z class=textBasedMannualAds_2></z><br><z id=AP_G4GR_6></z><z id=personalNoteDiv class="clear hideIt"><z class="personalNoteHeader clear"><y class=noteHeaderText>My Personal Notes</y>
<y class=hideNotesDivIcon><i class="material-icons personalNotesIcon">arrow_drop_up</i></y></z><z class=collapsableDivPersonalNotes><textarea maxlength=5000 id=enteredPersonalNote class=personalNoteStyle placeholder="Add your personal notes here! (max 5000 chars)"></textarea><z class=saveNoteDiv><y class=processSaveNote></y><button class=savePersonalNoteButton onclick=saveUserPersonalNote()>Save</button></z></z></z></z></article><z class=article-meta><z class=vote-wrap><z style=display:flex;align-items:center;justify-content:center;width:100%><button data-type=like class=vote-this style=margin-right:0;margin-left:0>
<i class="gfg-icon gfg-icon_like favoriteIcon"></i>
<y class=favoriteLike>Like</y><figure class=favoriteText></figure></button></z></z><z class="d-row content-bw article-pgnavi v-divider-gfg"><z class=article-pgnavi_prev><a href=https://www.n0sy.com/program-nth-catalan-number/ class=pg-head><y class="gfg-icon gfg-icon_previous"></y><y style=margin-left:5px>Previous</y></a><z class=pg-main><a href=https://www.n0sy.com/program-nth-catalan-number/>Program for nth Catalan Number</a></z></z><z class=article-pgnavi_next><a href=https://www.n0sy.com/count-number-binary-strings-without-consecutive-1s/ class=pg-head><y style=margin-right:5px;margin-left:auto>Next</y>
<y class="gfg-icon gfg-icon_next"></y></a><z class=pg-main><a href=https://www.n0sy.com/count-number-binary-strings-without-consecutive-1s/>Count number of binary strings without consecutive 1\'s</a></z></z></z></z><z class=article--recommended><z class=article--recommended_wrapper><z class=top-bar><z class="def-title_wrap pl-0"><z class="title large">Recommended Articles</z></z><z class=page-list><z class=page-h>Page :</z><z class=pages></z></z></z><z class=gfg--carousel><z class=gfg--carousel_wrap data-flex=2><z class=gfg--carousel_wrap-slide><z class=slide-item_list><z class=slide-item><z class=sno></z><a href="https://www.n0sy.com/nuts-bolts-problem-lock-key-problem/?ref=rp" title="Permalink to Nuts &amp;amp; Bolts Problem (Lock &amp;amp; Key problem) | Set 1" rel=bookmark class=c-wrap><z class=head>Nuts & Bolts Problem (Lock & Key problem) | Set 1</z><z class=meta>20, Dec 14</z></a></z><z class=slide-item><z class=sno></z><a href="https://www.n0sy.com/nuts-bolts-problem-lock-key-problem-set-2-hashmap/?ref=rp" title="Permalink to Nuts &amp;amp; Bolts Problem (Lock &amp;amp; Key problem) | Set 2 (Hashmap)" rel=bookmark class=c-wrap><z class=head>Nuts & Bolts Problem (Lock & Key problem) | Set 2 (Hashmap)</z><z class=meta>02, Jul 17</z></a></z><z class=slide-item><z class=sno></z><a href="https://www.n0sy.com/evaluate-a-boolean-expression-represented-as-string/?ref=rp" title="Permalink to Evaluate a boolean expression represented as string" rel=bookmark class=c-wrap><z class=head>Evaluate a boolean expression represented as string</z><z class=meta>21, Aug 17</z></a></z><z class=slide-item><z class=sno></z><a href="https://www.n0sy.com/a-boolean-matrix-question/?ref=rp" title="Permalink to A Boolean Matrix Question" rel=bookmark class=c-wrap><z class=head>A Boolean Matrix Question</z><z class=meta>18, Oct 11</z></a></z></z></z><z class=gfg--carousel_wrap-slide><z class=slide-item_list><z class=slide-item><z class=sno></z><a href="https://www.n0sy.com/find-length-largest-region-boolean-matrix/?ref=rp" title="Permalink to Find size of the largest region in Boolean Matrix" rel=bookmark class=c-wrap><z class=head>Find size of the largest region in Boolean Matrix</z><z class=meta>12, Mar 17</z></a></z><z class=slide-item><z class=sno></z><a href="https://www.n0sy.com/the-knights-tour-problem-backtracking-1/?ref=rp" title="Permalink to The Knight\'s tour problem | Backtracking-1" rel=bookmark class=c-wrap><z class=head>The Knight\'s tour problem | Backtracking-1</z><z class=meta>14, Jul 11</z></a></z><z class=slide-item><z class=sno></z><a href="https://www.n0sy.com/largest-independent-set-problem-dp-26/?ref=rp" title="Permalink to Largest Independent Set Problem | DP-26" rel=bookmark class=c-wrap><z class=head>Largest Independent Set Problem | DP-26</z><z class=meta>17, Feb 13</z></a></z><z class=slide-item><z class=sno></z><a href="https://www.n0sy.com/highway-billboard-problem/?ref=rp" title="Permalink to Highway Billboard Problem" rel=bookmark class=c-wrap><z class=head>Highway Billboard Problem</z><z class=meta>13, Mar 17</z></a></z></z></z><z class=gfg--carousel_wrap-slide><z class=slide-item_list><z class=slide-item><z class=sno></z><a href="https://www.n0sy.com/tile-stacking-problem/?ref=rp" title="Permalink to Tile Stacking Problem" rel=bookmark class=c-wrap><z class=head>Tile Stacking Problem</z><z class=meta>19, Oct 17</z></a></z><z class=slide-item><z class=sno></z><a href="https://www.n0sy.com/painters-partition-problem-set-2/?ref=rp" title="Permalink to The painter\'s partition problem | Set 2" rel=bookmark class=c-wrap><z class=head>The painter\'s partition problem | Set 2</z><z class=meta>06, Dec 17</z></a></z><z class=slide-item><z class=sno></z><a href="https://www.n0sy.com/water-jug-problem-using-memoization/?ref=rp" title="Permalink to Water Jug Problem using Memoization" rel=bookmark class=c-wrap><z class=head>Water Jug Problem using Memoization</z><z class=meta>02, Sep 18</z></a></z><z class=slide-item><z class=sno></z><a href="https://www.n0sy.com/understanding-the-coin-change-problem-with-dynamic-programming/?ref=rp" title="Permalink to Understanding The Coin Change Problem With Dynamic Programming" rel=bookmark class=c-wrap><z class=head>Understanding The Coin Change Problem With Dynamic Programming</z><z class=meta>19, Oct 18</z></a></z></z></z><z class=gfg--carousel_wrap-slide><z class=slide-item_list><z class=slide-item><z class=sno></z><a href="https://www.n0sy.com/mobile-numeric-keypad-problem-set-2/?ref=rp" title="Permalink to Mobile Numeric Keypad Problem | Set 2" rel=bookmark class=c-wrap><z class=head>Mobile Numeric Keypad Problem | Set 2</z><z class=meta>28, Jun 19</z></a></z><z class=slide-item><z class=sno></z><a href="https://www.n0sy.com/n-consecutive-ropes-problem/?ref=rp" title="Permalink to N consecutive ropes problem" rel=bookmark class=c-wrap><z class=head>N consecutive ropes problem</z><z class=meta>14, Nov 19</z></a></z><z class=slide-item><z class=sno></z><a href="https://www.n0sy.com/0-1-knapsack-problem-to-print-all-possible-solutions/?ref=rp" title="Permalink to 0/1 Knapsack Problem to print all possible solutions" rel=bookmark class=c-wrap><z class=head>0/1 Knapsack Problem to print all possible solutions</z><z class=meta>07, May 20</z></a></z><z class=slide-item><z class=sno></z><a href="https://www.n0sy.com/domino-and-tromino-tiling-problem/?ref=rp" title="Permalink to Domino and Tromino tiling problem" rel=bookmark class=c-wrap><z class=head>Domino and Tromino tiling problem</z><z class=meta>27, Jul 21</z></a></z></z></z><z class=gfg--carousel_wrap-slide><z class=slide-item_list><z class=slide-item><z class=sno></z><a href="https://www.n0sy.com/bitonic-traveling-salesman-problem/?ref=rp" title="Permalink to Bitonic Travelling Salesman Problem" rel=bookmark class=c-wrap><z class=head>Bitonic Travelling Salesman Problem</z><z class=meta>16, Jun 21</z></a></z><z class=slide-item><z class=sno></z><a href="https://www.n0sy.com/total-count-of-sorted-numbers-upto-n-digits-in-range-l-r-magnificent-necklace-combinatorics-problem/?ref=rp" title="Permalink to Total count of sorted numbers upto N digits in range [L, R] (Magnificent necklace combinatorics problem)" rel=bookmark class=c-wrap><z class=head>Total count of sorted numbers upto N digits in range [L, R] (Magnificent necklace combinatorics problem)</z><z class=meta>07, Jul 21</z></a></z><z class=slide-item><z class=sno></z><a href="https://www.n0sy.com/maximum-sum-of-at-most-two-non-overlapping-intervals-in-a-list-of-intervals-interval-scheduling-problem/?ref=rp" title="Permalink to Maximum sum of at most two non-overlapping intervals in a list of Intervals | Interval Scheduling Problem" rel=bookmark class=c-wrap><z class=head>Maximum sum of at most two non-overlapping intervals in a list of Intervals | Interval Scheduling Problem</z><z class=meta>04, Nov 21</z></a></z><z class=slide-item><z class=sno></z><a href="https://www.n0sy.com/partition-problem-dp-18/?ref=rp" title="Permalink to Partition problem | DP-18" rel=bookmark class=c-wrap><z class=head>Partition problem | DP-18</z><z class=meta>04, Jul 12</z></a></z></z></z><z class=gfg--carousel_wrap-slide><z class=slide-item_list><z class=slide-item><z class=sno></z><a href="https://www.n0sy.com/subset-sum-problem-where-array-sum-is-at-most-n/?ref=rp" title="Permalink to Subset sum problem where Array sum is at most N" rel=bookmark class=c-wrap><z class=head>Subset sum problem where Array sum is at most N</z><z class=meta>11, Apr 22</z></a></z><z class=slide-item><z class=sno></z><a href="https://www.n0sy.com/n-queen-problem-backtracking-3/?ref=rp" title="Permalink to N Queen Problem | Backtracking-3" rel=bookmark class=c-wrap><z class=head>N Queen Problem | Backtracking-3</z><z class=meta>21, Jul 11</z></a></z><z class=slide-item><z class=sno></z><a href="https://www.n0sy.com/travelling-salesman-problem-set-1/?ref=rp" title="Permalink to Travelling Salesman Problem | Set 1 (Naive and Dynamic Programming)" rel=bookmark class=c-wrap><z class=head>Travelling Salesman Problem | Set 1 (Naive and Dynamic Programming)</z><z class=meta>03, Nov 13</z></a></z><z class=slide-item><z class=sno></z><a href="https://www.n0sy.com/subset-sum-problem-dp-25/?ref=rp" title="Permalink to Subset Sum Problem | DP-25" rel=bookmark class=c-wrap><z class=head>Subset Sum Problem | DP-25</z><z class=meta>24, Dec 12</z></a></z></z></z></z></z><z class=gfg--carousel_dots><z class=carousel--dots></z></z></z></z><z class=article-meta><z class="bottom-wrap d-row divider-gfg" style=margin-top:0><z class=credits><z class=by>Article Contributed By :</z><z class=media><z class=author><z class=image-wrap><img src=https://media.n0sy.com/wp-content/uploads/20200717172614/authPreLogo.png style=width:45px;height:45px class="img-fluid restrict-popup-gfg" alt=https://media.n0sy.com/auth/avatar.png></z><z class=info><z class=name><a href=javascript:void(0) rel=nofollow style=font-size:12.5pt>Nosy.com</a></z></z></z></z></z><z class=vote-block><z class=vote-d>Vote for difficulty</z><z class=vote-s>Current difficulty :
<a href=https://www.n0sy.com/expert/>Expert</a></z><z class=d-column style=margin-top:20px><z class="label-list without-bg"><button data-gfg-action=article-difficulty data-rating=1 class=btn>Easy</button>
<button data-gfg-action=article-difficulty data-rating=2 class=btn>Normal</button>
<button data-gfg-action=article-difficulty data-rating=3 class=btn>Medium</button>
<button data-gfg-action=article-difficulty data-rating=4 class=btn>Hard</button>
<button data-gfg-action=article-difficulty data-rating=5 class=btn>Expert</button></z><z class=gfg-process style=margin-top:10px;font-size:10pt;font-family:var(--font-din)></z></z></z></z><z class=bottom-wrap><z class=improved><z class=t-head>Improved By :</z><ul><li><a href=https://auth.n0sy.com/user/sahilshelangia>sahilshelangia</a></li><li><a href=https://auth.n0sy.com/user/29AjayKumar>29AjayKumar</a></li><li><a href=https://auth.n0sy.com/user/princiraj1992>princiraj1992</a></li><li><a href=https://auth.n0sy.com/user/bhavneet2000>bhavneet2000</a></li><li><a href=https://auth.n0sy.com/user/farheenbano>farheenbano</a></li><li><a href=https://auth.n0sy.com/user/divyeshrabadiya07>divyeshrabadiya07</a></li><li><a href=https://auth.n0sy.com/user/divyesh072019>divyesh072019</a></li><li><a href=https://auth.n0sy.com/user/mukesh07>mukesh07</a></li><li><a href=https://auth.n0sy.com/user/avanitrachhadiya2155>avanitrachhadiya2155</a></li><li><a href=https://auth.n0sy.com/user/arorakashish0911>arorakashish0911</a></li><li><a href=https://auth.n0sy.com/user/rohitsingh07052>rohitsingh07052</a></li></ul></z><z class=improved><z class=t-head>Article Tags :</z><ul><li><a href=https://www.n0sy.com/tag/amazon/>Amazon</a></li><li><a href=https://www.n0sy.com/tag/linkedin/>Linkedin</a></li><li><a href=https://www.n0sy.com/tag/microsoft/>Microsoft</a></li><li><a href=https://www.n0sy.com/category/algorithm/dynamic-programming/>Dynamic Programming</a></li></ul></z><z class=improved><z class=t-head>Practice Tags :</z><ul><li><a href="https://practice.n0sy.com/explore?company[]=Amazon">Amazon</a></li><li><a href="https://practice.n0sy.com/explore?company[]=Linkedin">Linkedin</a></li><li><a href="https://practice.n0sy.com/explore?company[]=Microsoft">Microsoft</a></li><li><a href="https://practice.n0sy.com/explore?category[]=Dynamic" programming>Dynamic Programming</a></li></ul></z></z><z class=bottom-wrap><z class=improveArticleWrap><z pid=129692 ptitle="Boolean Parenthesization Problem | DP-37" id=improveArticleButtonDiv></z><a href=mailto:review-team@n0sy.com class=reportButton>Report Issue</a></z></z></z></z><z><z class=disqus--viewer><z id=ide_link style=text-align:center;margin-top:50px><x style=text-align:center>Writing code in comment?
Please use <a href=https://ide.n0sy.com/>ide.n0sy.com</a>,
generate link and share the link here.</a></x></z><br><z class=disqus-comment><button id=comment class=action-button style="width:45%;cursor:pointer;margin-right:0%;box-shadow:0 2px 5px rgba(0,0,0,.4),0 6px 20px transparent;border-color:#4cb96b;border-radius:4px">
Load Comments</button></z><z style=height:100% class=bottom-comment-section hidden><z id=login-link style="padding:10px 0 20px 16px"><h5>Please <u><y class=login-modal-btn style=cursor:pointer>Login</y></u> to comment...</h5></z><z style=height:100%><z style=height:100% id=comment-system></z></z></z></z></z></z></z></z><z class=rightBar><z id=secondary class=widget-area role=complementary><aside id=text-15 class="widget widget_text"><z class=textwidget><style>#text-15{flex-direction:column}.mtq_correct_marker,.mtq_wrong_marker{display:none}.sidebar_wrapper>:last-child{margin:unset!important;margin-left:5px!important;margin-top:20px!important;top:70px!important}.darkMode-wrap{bottom:1%!important}#secondary .textwidget{margin-left:auto;margin-right:0;text-align:right}#secondary .widget_text:last-child{top:70px!important}</style><z id=GFG_AD_Desktop_RightSideBar_ATF_300x600 style=min-width:300px;min-height:600px;margin-bottom:10px></z><z id=GFG_AD_Desktop_RightSideBar_ATF_300x250_2 style=min-width:300px;min-height:250px></z></z></aside><z class=rba_all_pages id=whatsNewCardContainer><z class=heading><z class=def-title_wrap><z class=title>What\'s New</z><z id=edit-icon></z></z></z><z class=card-layout><z class=content-wrapper><z class=side--container_wscard><a href="https://practice.n0sy.com/courses/microsoft-test-series?utm_source=gfg&utm_medium=right-bar&utm_campaign=MTS"><z class=card-content><z class=thumbnail><img src=https://media.n0sy.com/wp-content/post-ads-banner/2022-07-12-19-58-02-image(7).png class=img-fluid></z><z class=content><z class=head>Microsoft SDE Preparation Test Series</z><z class=meta></z><z class=ref>View Details</z></z></z></a></z></z></z><z class=card-layout><z class=content-wrapper><z class=side--container_wscard style=margin-top:-25px><a href="https://practice.n0sy.com/courses/dsa-self-paced?utm_source=right-bar&utm_medium=gfg&utm_campaign=dsa&utm_term=dsa"><z class=card-content><z class=thumbnail><img src="https://media.n0sy.com/wp-content/post-ads-banner/2021-12-29-11-18-16-DSA_Ad_icon (1).png" class=img-fluid></z><z class=content><z class=head>Data Structures & Algorithms- Self Paced Course</z><z class=meta></z><z class=ref>View Details</z></z></z></a></z></z></z><z class=card-layout style=margin-bottom:20px><z class=content-wrapper><z class=side--container_wscard style=margin-top:-25px><a href="https://practice.n0sy.com/courses/complete-interview-preparation?utm_source=right-bar&utm_medium=gfg&utm_campaign=dsa&utm_term=dsa"><z class=card-content><z class=thumbnail><img src=https://media.n0sy.com/wp-content/post-ads-banner/2021-12-29-16-30-50-CIP_Icon.png class=img-fluid></z><z class=content><z class=head>Complete Interview Preparation- Self Paced Course</z><z class=meta></z><z class=ref>View Details</z></z></z></a></z></z></z></z><script>$(document).ready(function(){var a=!1,b;window.innerWidth>992&&!a&&(b=$(\'#whatsNewCardContainer .card-layout:last-child\').html(),$(\'#whatsNewCardContainer .card-layout:last-child\').hide(),$(\'#secondary\').prepend(`<z class=\'card-layout\'>${b}</z>`),a=!0),$(window).resize(function(){if(window.innerWidth>992){if(!a){var b=$(\'#whatsNewCardContainer .card-layout:last-child\').html();$(\'#whatsNewCardContainer .card-layout:last-child\').hide(),$(\'#secondary\').prepend(`<z class=\'card-layout\'>${b}</z>`),a=!0}}else $(\'#secondary .card-layout:first-child\').hide(),$(\'#whatsNewCardContainer .card-layout:last-child\').show(),a=!1})})</script><aside id=text-16 class="widget widget_text"><z class=textwidget><z id=GFG_AD_Desktop_ATF_300x100 style=min-width:300px;min-height:100px;margin-bottom:10px></z><z id=GFG_AD_Desktop_RightSideBar_MTF_300x250 style=min-width:300px;min-height:250px></z></z></aside><aside id=text-18 class="widget widget_text"><z class=textwidget><z id=GFG_AD_Desktop_RightSideBar_Docked_160x600 style=min-width:300px;min-height:600px></z></z></aside></z></z></z><section class=disqus-section><z class=article-page_flex><z class=leftBar></z></z></section></z><z id=video-popup style=display:none></z></z><z id=displayModal class="modal fade" role=dialog><z class=modal-dialog><z class=upper-box><h3 style="font:700 18px/31px var(--font-sofia);color:var(--color-black)">Improve your Coding Skills with Practice</h3><button class=upper-box-btn><a style=color:#fff!important href="https://practice.n0sy.com/explore?page=1&sortBy=submissions&utm_source=gfg&utm_medium=search-bar&utm_campaign=practice-search">Try It!</a></button></z><z class=modal-content><z class=error-message></z><z class=modal-body id=dmBody><z id=modal-dm-content></z><z class=modal-overlay aria-hidden=true><y class=loader__animation></y></z></z><z class=modal-footer></z></z></z></z><z id=displayModalBackdrop class=backdrop></z><footer class=gfg-footer id=gfg-footer><z class=footer-wrapper><z class=footer-wrapper_branding><a class=footer-wrapper_branding-anchor href=https://www.n0sy.com/><svg class="footer-wrapper_branding-nlogo" id="Group_230" data-name="Group 230" xmlns="https://www.w3.org/2000/svg" width="300.826" height="39.577" viewBox="0 0 300.826 39.577"><g id="logo" transform="translate(-3608 -227)"><g id="Group_155" data-name="Group 155" transform="translate(3608 227)"><xath id="Path_242" data-name="Path 242" d="M988.871 586.642h-32.7a13.06 13.06.0 0122.949-6.9l4.757-4.783a19.789 19.789.0 00-34.466 11.678H949.3a19.789 19.789.0 00-34.466-11.678l4.757 4.783a13.06 13.06.0 0122.949 6.9h-32.7q-.057.757-.058 1.529a19.791 19.791.0 0039.055 4.533h1.042a19.789 19.789.0 0039.055-4.533Q988.929 587.4 988.871 586.642zm-59.305 14.589a13.063 13.063.0 01-12.261-8.555h24.522A13.064 13.064.0 01929.565 601.231zm39.576.0a13.064 13.064.0 01-12.262-8.555H981.4A13.063 13.063.0 01969.141 601.231z" transform="translate(-909.777 -568.383)" fill="#2f8d46"/></g><g id="Group_170" data-name="Group 170" transform="translate(3703.022 236.148)"><g id="Group_156" data-name="Group 156" transform="translate(26.144 4.527)"><line id="Line_1" data-name="Line 1" x1="1.046" fill="#0f2b3c"/></g><g id="Group_157" data-name="Group 157" transform="translate(56.695 0.004)"><xath id="Path_243" data-name="Path 243" d="M1352.9 615.759l-6.714-6.771v6.771h-3.09V594.521h3.09v12.53l6.084-6.056h3.909l-6.988 6.988 7.67 7.782z" transform="translate(-1343.095 -594.521)" fill="#0f2b3c"/></g><g id="Group_158" data-name="Group 158" transform="translate(113.247 6.427)"><xath id="Path_244" data-name="Path 244" d="M1504.614 627.712V612.948h3.09v2.558a3.7 3.7.0 011.447-1.91 3.9 3.9.0 012.262-.73 5.447 5.447.0 011.208.112l-.7 3a2.449 2.449.0 00-.842-.082 3.044 3.044.0 00-2.388 1.138 4.676 4.676.0 00-.983 3.16v7.515z" transform="translate(-1504.614 -612.865)" fill="#0f2b3c"/></g><g id="Group_159" data-name="Group 159" transform="translate(70.943 6.509)"><xath id="Path_245" data-name="Path 245" d="M1385.943 626.817a5.668 5.668.0 01-2.152-2.683l2.669-1.171a3.743 3.743.0 001.376 1.662 3.657 3.657.0 002.029.572 4.049 4.049.0 001.879-.395 1.266 1.266.0 00.763-1.185 1.367 1.367.0 00-.654-1.2 6.492 6.492.0 00-2.016-.763l-1.662-.409a5.974 5.974.0 01-2.752-1.444 3.452 3.452.0 01-1.089-2.615 3.4 3.4.0 01.722-2.152 4.647 4.647.0 011.948-1.43 6.957 6.957.0 012.67-.5 7.191 7.191.0 013.405.776 4.6 4.6.0 012.125 2.247l-2.615 1.144a2.925 2.925.0 00-2.888-1.608 3.231 3.231.0 00-1.689.409 1.213 1.213.0 00-.681 1.063 1.226 1.226.0 00.518 1.021 4.442 4.442.0 001.526.667l2.043.518a6.573 6.573.0 013.092 1.566 3.5 3.5.0 011.049 2.575 3.72 3.72.0 01-.749 2.3 4.829 4.829.0 01-2.057 1.539 7.44 7.44.0 01-2.887.545A6.781 6.781.0 011385.943 626.817z" transform="translate(-1383.791 -613.101)" fill="#0f2b3c"/></g><g id="Group_160" data-name="Group 160" transform="translate(96.285 6.525)"><xath id="Path_246" data-name="Path 246" d="M1463.543 613.146a7.374 7.374.0 107.374 7.374A7.374 7.374.0 001463.543 613.146zm0 11.532a4.228 4.228.0 114.228-4.228A4.228 4.228.0 011463.543 624.678z" transform="translate(-1456.169 -613.146)" fill="#0f2b3c"/></g><g id="Group_161" data-name="Group 161" transform="translate(23.011 6.524)"><xath id="Path_247" data-name="Path 247" d="M1261.615 621.145c.017-.232.027-.466.024-.7a7.292 7.292.0 00-.212-1.685 7.375 7.375.0 00-14.537 1.84c0 .236.017.47.04.7a7.263 7.263.0 00.673 2.382 7.374 7.374.0 0013.389-.141l-3.267.034a4.617 4.617.0 01-8.014-2.3zm-11.664-2.266a4.614 4.614.0 018.592-.09z" transform="translate(-1246.891 -613.144)" fill="#0f2b3c"/></g><g id="Group_162" data-name="Group 162" transform="translate(39.461 6.524)"><xath id="Path_248" data-name="Path 248" d="M1308.6 621.145c.017-.232.027-.466.025-.7a7.375 7.375.0 10-14.749.155c0 .236.017.47.04.7a7.257 7.257.0 00.672 2.382 7.375 7.375.0 0013.39-.141l-3.268.034a4.616 4.616.0 01-8.014-2.3zm-11.663-2.266a4.614 4.614.0 018.592-.09z" transform="translate(-1293.873 -613.144)" fill="#0f2b3c"/></g><g id="Group_163" data-name="Group 163" transform="translate(85.044 0.245)"><xath id="Path_249" data-name="Path 249" d="M1430.636 598.566a2.5 2.5.0 011.8-.549 4.2 4.2.0 011.657.281v-2.752a7.24 7.24.0 00-2.3-.337 4.82 4.82.0 00-3.455 1.278 4.666 4.666.0 00-1.349 3.554v1.417h-2.922v2.752h2.922v12.036h3.091V604.209h4.016v-2.752h-4.016V600.4A2.5 2.5.0 011430.636 598.566z" transform="translate(-1424.063 -595.209)" fill="#0f2b3c"/></g><g id="Group_164" data-name="Group 164" transform="translate(0)"><xath id="Path_250" data-name="Path 250" d="M1202.443 605.147a10.637 10.637.0 11-2.72-7.1l-1.983 1.982a7.837 7.837.0 101.656 7.09h-6.883v-2.851h9.895Q1202.443 604.7 1202.443 605.147z" transform="translate(-1181.169 -594.51)" fill="#0f2b3c"/></g><g id="Group_165" data-name="Group 165" transform="translate(179.788 0.004)"><xath id="Path_251" data-name="Path 251" d="M1704.467 615.759l-6.714-6.771v6.771h-3.09V594.521h3.09v12.53l6.084-6.056h3.909l-6.988 6.988 7.669 7.782z" transform="translate(-1694.663 -594.521)" fill="#0f2b3c"/></g><g id="Group_166" data-name="Group 166" transform="translate(194.036 6.509)"><xath id="Path_252" data-name="Path 252" d="M1737.51 626.817a5.667 5.667.0 01-2.152-2.683l2.67-1.171a3.742 3.742.0 001.375 1.662 3.658 3.658.0 002.03.572 4.051 4.051.0 001.88-.395 1.267 1.267.0 00.763-1.185 1.367 1.367.0 00-.654-1.2 6.492 6.492.0 00-2.016-.763l-1.662-.409a5.974 5.974.0 01-2.751-1.444 3.451 3.451.0 01-1.09-2.615 3.4 3.4.0 01.722-2.152 4.651 4.651.0 011.948-1.43 6.96 6.96.0 012.67-.5 7.191 7.191.0 013.405.776 4.6 4.6.0 012.125 2.247l-2.615 1.144a2.926 2.926.0 00-2.888-1.608 3.232 3.232.0 00-1.689.409 1.214 1.214.0 00-.681 1.063 1.227 1.227.0 00.518 1.021 4.443 4.443.0 001.526.667l2.043.518a6.576 6.576.0 013.092 1.566 3.5 3.5.0 011.049 2.575 3.719 3.719.0 01-.749 2.3 4.833 4.833.0 01-2.057 1.539 7.44 7.44.0 01-2.888.545A6.781 6.781.0 011737.51 626.817z" transform="translate(-1735.358 -613.101)" fill="#0f2b3c"/></g><g id="Group_167" data-name="Group 167" transform="translate(146.104 6.524)"><xath id="Path_253" data-name="Path 253" d="M1613.182 621.145c.017-.232.027-.466.025-.7a7.375 7.375.0 10-14.749.155c0 .236.017.47.04.7a7.254 7.254.0 00.673 2.382 7.375 7.375.0 0013.389-.141l-3.268.034a4.616 4.616.0 01-8.014-2.3zm-11.663-2.266a4.615 4.615.0 018.592-.09z" transform="translate(-1598.458 -613.144)" fill="#0f2b3c"/></g><g id="Group_168" data-name="Group 168" transform="translate(162.554 6.524)"><xath id="Path_254" data-name="Path 254" d="M1660.165 621.145c.017-.232.027-.466.024-.7a7.375 7.375.0 10-14.749.155c0 .236.017.47.04.7a7.266 7.266.0 00.673 2.382 7.375 7.375.0 0013.389-.141l-3.268.034a4.616 4.616.0 01-8.014-2.3zm-11.663-2.266a4.614 4.614.0 018.592-.09z" transform="translate(-1645.44 -613.144)" fill="#0f2b3c"/></g><g id="Group_169" data-name="Group 169" transform="translate(123.093)"><xath id="Path_255" data-name="Path 255" d="M1554.01 605.147a10.636 10.636.0 11-2.72-7.1l-1.983 1.982a7.837 7.837.0 101.656 7.09h-6.884v-2.851h9.895Q1554.01 604.7 1554.01 605.147z" transform="translate(-1532.736 -594.51)" fill="#0f2b3c"/></g></g></g></svg></a><z class=footer-wrapper_branding-address><i class="gfg-icon gfg-icon_pin"></i>
<y>A-143, 9th Floor, Sovereign Corporate Tower,<br>Sector-136, Noida, Uttar Pradesh - 201305</y></z><z class=footer-wrapper_branding-email><i class="gfg-icon gfg-icon_mail"></i>
<a href=mailto:feedback@n0sy.com>feedback@n0sy.com</a></z><z class=footer-wrapper_branding-social><a href=https://www.facebook.com/n0sy.com/ rel="noopener noreferrer" aria-label="Nosy.com Facebook" target=_blank><z class=facebook></z></a><a href=https://www.instagram.com/geeks_for_geeks/ rel="noopener noreferrer" aria-label="Nosy.com Instagram" target=_blank><z class=instagram></z></a><a href=https://in.linkedin.com/company/Nosy.com rel="noopener noreferrer" aria-label="Nosy.com LinkedIn" target=_blank><z class=linkedin></z></a><a href=https://twitter.com/Nosy.com rel="noopener noreferrer" aria-label="Nosy.com Twitter" target=_blank><z class=twitter></z></a><a href=https://www.youtube.com/Nosy.comvideos rel="noopener noreferrer" aria-label="Nosy.com YouTube" target=_blank><z class=youtube></z></a><a href="https://play.google.com/store/apps/details?id=free.programming.programming" rel="noopener noreferrer" aria-label="Nosy.com App" target=_blank><z class=android></z></a></z></z><z class=footer-wrapper_links><ul class=footer-wrapper_links-list><li>Company</li><li><a href="https://www.n0sy.com/about/?ref=footer">About Us</a></li><li><a href=https://Nosy.com.zohorecruit.in/careers>Careers</a></li><li><a href="https://www.n0sy.com/press-release/?ref=footer">In Media</a></li><li><a href="https://www.n0sy.com/about/contact-us/?ref=footer">Contact Us</a></li><li><a href="https://www.n0sy.com/privacy-policy/?ref=footer">Privacy Policy</a></li><li><a href="https://www.n0sy.com/copyright-information/?ref=footer">Copyright Policy</a></li></ul><ul class=footer-wrapper_links-list><li>Learn</li><li><a href="https://www.n0sy.com/fundamentals-of-algorithms/?ref=footer">Algorithms</a></li><li><a href="https://www.n0sy.com/data-structures/?ref=footer">Data Structures</a></li><li><a href="https://www.n0sy.com/gfg-sde-sheet-a-complete-guide-for-sde-preparation/?ref=footer">SDE Cheat Sheet</a></li><li><a href="https://www.n0sy.com/machine-learning/?ref=footer">Machine learning</a></li><li><a href="https://www.n0sy.com/articles-on-computer-science-subjects-gq/?ref=footer">CS Subjects</a></li><li><a href="https://www.n0sy.com/videos/?ref=footer">Video Tutorials</a></li><li><a href="https://practice.n0sy.com/courses/?ref=footer">Courses</a></li></ul><ul class=footer-wrapper_links-list><li><a class=link-head href="https://news.n0sy.com/?ref=footer">News</a></li><li><a href="https://news.n0sy.com/top?ref=footer">Top News</a></li><li><a href="https://news.n0sy.com/technology?ref=footer">Technology</a></li><li><a href="https://news.n0sy.com/work-career?ref=footer">Work & Career</a></li><li><a href="https://news.n0sy.com/business?ref=footer">Business</a></li><li><a href="https://news.n0sy.com/finance?ref=footer">Finance</a></li><li><a href="https://news.n0sy.com/lifestyle?ref=footer">Lifestyle</a></li><li><a href="https://news.n0sy.com/knowledge?ref=footer">Knowledge</a></li></ul><ul class=footer-wrapper_links-list><li>Languages</li><li><a href="https://www.n0sy.com/python-programming-language/?ref=footer">Python</a></li><li><a href="https://www.n0sy.com/java/?ref=footer">Java</a></li><li><a href="https://www.n0sy.com/c-plus-plus/?ref=footer">CPP</a></li><li><a href="https://www.n0sy.com/golang/?ref=footer">Golang</a></li><li><a href="https://www.n0sy.com/csharp-programming-language/?ref=footer">C#</a></li><li><a href="https://www.n0sy.com/sql-tutorial/?ref=footer">SQL</a></li><li><a href="https://www.n0sy.com/kotlin-programming-language/?ref=footer">Kotlin</a></li></ul><ul class=footer-wrapper_links-list><li>Web Development</li><li><a href="https://www.n0sy.com/web-development/?ref=footer">Web Tutorials</a></li><li><a href="https://www.n0sy.com/django-tutorial/?ref=footer">Django Tutorial</a></li><li><a href="https://www.n0sy.com/html-tutorials/?ref=footer">HTML</a></li><li><a href="https://www.n0sy.com/javascript-tutorial/?ref=footer">JavaScript</a></li><li><a href="https://www.n0sy.com/bootstrap-tutorials/?ref=footer">Bootstrap</a></li><li><a href="https://www.n0sy.com/reactjs-tutorials/?ref=footer">ReactJS</a></li><li><a href="https://www.n0sy.com/nodejs/?ref=footer">NodeJS</a></li></ul><ul class=footer-wrapper_links-list><li>Contribute</li><li><a href="https://www.n0sy.com/contribute/?ref=footer">Write an Article</a></li><li><a href="https://www.n0sy.com/how-to-improve-an-article/?ref=footer">Improve an Article</a></li><li><a href="https://write.n0sy.com/pick-article?ref=footer">Pick Topics to Write</a></li><li><a href="https://www.n0sy.com/write-interview-experience/?ref=footer">Write Interview Experience</a></li><li><a href="https://www.n0sy.com/careers/?job_type=1&ref=footer">Internships</a></li><li><a href="https://script.n0sy.com/on-boarding/youtube?ref=footer">Video Internship</a></li></ul></z></z><z class=footer-strip><z class=copyright><a href=https://www.n0sy.com/ rel="noopener noreferrer" target=_blank>@Nosy.com</a>
<y>, <a href=https://www.n0sy.com/copyright-information/>Some rights reserved</a></y></z><z class=social-links></z></z></footer><z class=darkMode-wrap data-mode="Switch to Dark Mode"><button data-gfg-action=toggleGFGTheme>
<i class="gfg-icon gfg-icon_dark-mode"></i></button></z></z><script src="https://www.n0sy.com/wp-includes/js/wp-embed.min.js?ver=4.9.8"></script><script>jQuery(document).ready(function(a){RESPONSIVEUI.responsiveTabs()})</script><z class="cookie-consent hide-consent"><y class=cookie-text>We use cookies to ensure you have the best browsing experience on our website. By using our site, you
acknowledge that you have read and understood our
<a href=https://www.n0sy.com/cookie-policy/ target=_blank><u>Cookie Policy</u></a> & <a href=https://www.n0sy.com/privacy-policy/ target=_blank><u>Privacy Policy</u></a></y>
<button class=consent-btn>
Got It !</button></z><z class=lightbox-target><img id=lightbox-image src alt=Lightbox>
<y class=lightbox-close></y></z><z class=shell><z class=shell-container><z class=shell-container_content><h2>Start Your Coding Journey Now!</h2><z class=shell-container_actions><button title=Login data-gfg-action=login-modal>Login</button>
<button title=Register data-gfg-action=register-modal>Register</button></z></z></z></z><link rel=stylesheet href=https://use.typekit.net/mrg0hpc.css><script>try{var isAdblockEnabled=a=>fetch(new Request(\'https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\',{method:\'HEAD\',mode:\'no-cors\'})).catch(a);isAdblockEnabled(()=>{var a=window.document.createElement(\'script\'),b=41782;a.setAttribute(\'src\',\'https://delivery.adrecover.com/\'.concat(b,\'/adRecover.js\')),a.setAttribute(\'type\',\'text/javascript\'),a.setAttribute(\'async\',!0),window.document.head.append(a)})}catch(a){console.log(a)}</script><z id=GFG_AD_gfg_mobile_320x50></z>')); ?>