1688053738
waR3U4bTeM%3A04566182b38938055ee46524461c3887-e92911f657851dfbb3117ec7abbfcc35
s:6036:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxNDp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrIjo3OntzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAHN1bW1hcnkiO3M6NDE6IlRoaXMgZmlsZSBpcyBwYXJ0IG9mIHRoZSBDb2NrcGl0IHByb2plY3QuIjtzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGRlc2NyaXB0aW9uIjtPOjQ1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24iOjI6e3M6NTk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AYm9keVRlbXBsYXRlIjtzOjE5NDoiKGMpIEFydHVyIEhlaW56ZSAtIPCfhbDwn4W28J+FtPCfhb3wn4aD8J+FtPCfhbnwn4W+LCBodHRwOi8vYWdlbnRlam8uY29tCgpGb3IgdGhlIGZ1bGwgY29weXJpZ2h0IGFuZCBsaWNlbnNlIGluZm9ybWF0aW9uLCBwbGVhc2UgdmlldyB0aGUgTElDRU5TRQpmaWxlIHRoYXQgd2FzIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBzb3VyY2UgY29kZS4iO3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AdGFncyI7YTowOnt9fXM6Mzk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAdGFncyI7YTowOnt9czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBjb250ZXh0IjtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQ29udGV4dCI6Mjp7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xDb250ZXh0AG5hbWVzcGFjZSI7czowOiIiO3M6NTY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQ29udGV4dABuYW1lc3BhY2VBbGlhc2VzIjthOjA6e319czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBsb2NhdGlvbiI7TjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGlzVGVtcGxhdGVTdGFydCI7YjowO3M6NDg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAaXNUZW1wbGF0ZUVuZCI7YjowO31zOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6ImU5MjkxMWY2NTc4NTFkZmJiMzExN2VjN2FiYmZjYzM1IjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6OToicG9zdHMucGhwIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHBhdGgiO3M6NTQ6ImNvY2twaXQvbW9kdWxlcy9Db2xsZWN0aW9ucy9maWVsZHMtdGVtcGxhdGVzL3Bvc3RzLnBocCI7czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBzb3VyY2UiO3M6MjU0NjoiPD9waHANCi8qKg0KICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgdGhlIENvY2twaXQgcHJvamVjdC4NCiAqDQogKiAoYykgQXJ0dXIgSGVpbnplIC0g8J+FsPCfhbbwn4W08J+FvfCfhoPwn4W08J+FufCfhb4sIGh0dHA6Ly9hZ2VudGVqby5jb20NCiAqDQogKiBGb3IgdGhlIGZ1bGwgY29weXJpZ2h0IGFuZCBsaWNlbnNlIGluZm9ybWF0aW9uLCBwbGVhc2UgdmlldyB0aGUgTElDRU5TRQ0KICogZmlsZSB0aGF0IHdhcyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgc291cmNlIGNvZGUuDQogKi8NCg0KcmV0dXJuIFsNCiAgICAnbmFtZScgICA9PiAncG9zdHMnLA0KICAgICdsYWJlbCcgID0+ICdQb3N0cycsDQogICAgJ2ZpZWxkcycgPT4gWw0KICAgICAgICBbDQogICAgICAgICAgICAnbmFtZScgICAgID0+ICdwdWJsaXNoZWQnLA0KICAgICAgICAgICAgJ2xhYmVsJyAgICA9PiAnUHVibGlzaGVkJywNCiAgICAgICAgICAgICd0eXBlJyAgICAgICAgPT4gJ2Jvb2xlYW4nLA0KICAgICAgICAgICAgJ2RlZmF1bHQnICAgICA9PiAnJywNCiAgICAgICAgICAgICdpbmZvJyAgICAgICAgPT4gJycsDQogICAgICAgICAgICAnbG9jYWxpemUnICAgID0+IGZhbHNlLA0KICAgICAgICAgICAgJ29wdGlvbnMnICAgICA9PiBbDQogICAgICAgICAgICAgICAgJ2RlZmF1bHQnID0+IGZhbHNlLA0KICAgICAgICAgICAgICAgICdsYWJlbCcgICA9PiBmYWxzZQ0KICAgICAgICAgICAgXSwNCiAgICAgICAgICAgICd3aWR0aCcgICAgICAgPT4gJzEtMScsDQogICAgICAgICAgICAnbHN0JyAgICAgICAgID0+IHRydWUNCiAgICAgICAgXSwNCg0KICAgICAgICBbDQogICAgICAgICAgICAnbmFtZScgICAgID0+ICd0aXRsZScsDQogICAgICAgICAgICAnbGFiZWwnICAgID0+ICdUaXRsZScsDQogICAgICAgICAgICAndHlwZScgICAgID0+ICd0ZXh0JywNCiAgICAgICAgICAgICdkZWZhdWx0JyAgPT4gJycsDQogICAgICAgICAgICAnaW5mbycgICAgID0+ICcnLA0KICAgICAgICAgICAgJ2xvY2FsaXplJyA9PiBmYWxzZSwNCiAgICAgICAgICAgICdvcHRpb25zJyAgPT4gWw0KICAgICAgICAgICAgICAgICdzbHVnJyA9PiB0cnVlDQogICAgICAgICAgICBdLA0KICAgICAgICAgICAgJ3dpZHRoJyAgICA9PiAnMS0xJywNCiAgICAgICAgICAgICdsc3QnICAgICAgPT4gdHJ1ZSwNCiAgICAgICAgICAgICdyZXF1aXJlZCcgPT4gdHJ1ZQ0KICAgICAgICBdLA0KDQogICAgICAgIFsNCiAgICAgICAgICAgICduYW1lJyAgICAgPT4gJ2ltYWdlJywNCiAgICAgICAgICAgICdsYWJlbCcgICAgPT4gJ0ZlYXR1cmVkIEltYWdlJywNCiAgICAgICAgICAgICd0eXBlJyAgICAgPT4gJ2Fzc2V0JywNCiAgICAgICAgICAgICdkZWZhdWx0JyAgPT4gJycsDQogICAgICAgICAgICAnaW5mbycgICAgID0+ICcnLA0KICAgICAgICAgICAgJ2xvY2FsaXplJyA9PiBmYWxzZSwNCiAgICAgICAgICAgICdvcHRpb25zJyAgPT4gW10sDQogICAgICAgICAgICAnd2lkdGgnICAgID0+ICcxLTEnLA0KICAgICAgICAgICAgJ2xzdCcgICAgICA9PiB0cnVlDQogICAgICAgIF0sDQoNCiAgICAgICAgWw0KICAgICAgICAgICAgJ25hbWUnICAgICA9PiAnZXhjZXJwdCcsDQogICAgICAgICAgICAnbGFiZWwnICAgID0+ICdFeGNlcnB0JywNCiAgICAgICAgICAgICd0eXBlJyAgICAgPT4gJ21hcmtkb3duJywNCiAgICAgICAgICAgICdkZWZhdWx0JyAgPT4gJycsDQogICAgICAgICAgICAnaW5mbycgICAgID0+ICcnLA0KICAgICAgICAgICAgJ2xvY2FsaXplJyA9PiBmYWxzZSwNCiAgICAgICAgICAgICdvcHRpb25zJyAgPT4gW10sDQogICAgICAgICAgICAnd2lkdGgnICAgID0+ICcxLTEnLA0KICAgICAgICAgICAgJ2xzdCcgICAgICA9PiB0cnVlDQogICAgICAgIF0sDQoNCiAgICAgICAgWw0KICAgICAgICAgICAgJ25hbWUnICAgICA9PiAnY29udGVudCcsDQogICAgICAgICAgICAnbGFiZWwnICAgID0+ICdDb250ZW50JywNCiAgICAgICAgICAgICd0eXBlJyAgICAgPT4gJ21hcmtkb3duJywNCiAgICAgICAgICAgICdkZWZhdWx0JyAgPT4gJycsDQogICAgICAgICAgICAnaW5mbycgICAgID0+ICcnLA0KICAgICAgICAgICAgJ2xvY2FsaXplJyA9PiBmYWxzZSwNCiAgICAgICAgICAgICdvcHRpb25zJyAgPT4gW10sDQogICAgICAgICAgICAnd2lkdGgnICAgID0+ICcxLTEnLA0KICAgICAgICAgICAgJ2xzdCcgICAgICA9PiB0cnVlDQogICAgICAgIF0sDQogICAgICAgIA0KICAgICAgICBbDQogICAgICAgICAgICAnbmFtZScgICAgID0+ICd0YWdzJywNCiAgICAgICAgICAgICdsYWJlbCcgICAgPT4gJ1RhZ3MnLA0KICAgICAgICAgICAgJ3R5cGUnICAgICA9PiAndGFncycsDQogICAgICAgICAgICAnZGVmYXVsdCcgID0+ICcnLA0KICAgICAgICAgICAgJ2luZm8nICAgICA9PiAnJywNCiAgICAgICAgICAgICdsb2NhbGl6ZScgPT4gZmFsc2UsDQogICAgICAgICAgICAnb3B0aW9ucycgID0+IFtdLA0KICAgICAgICAgICAgJ3dpZHRoJyAgICA9PiAnMS0xJywNCiAgICAgICAgICAgICdsc3QnICAgICAgPT4gdHJ1ZQ0KICAgICAgICBdDQogICAgXQ0KXTsiO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAbmFtZXNwYWNlcyI7YTowOnt9czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBpbmNsdWRlcyI7YTowOnt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBmdW5jdGlvbnMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAY29uc3RhbnRzIjthOjA6e31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNsYXNzZXMiO2E6MDp7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW50ZXJmYWNlcyI7YTowOnt9czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQB0cmFpdHMiO2E6MDp7fXM6NDA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAZW51bXMiO2E6MDp7fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAbWV0YWRhdGEiO2E6MDp7fX0=";