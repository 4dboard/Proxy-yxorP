1688053741
waR3U4bTeM%3A353a29cd34dfa1f16e2bb0626c4ff24e-7e6e5a4e30bcbd226b6d7aea3c471967
s:30484:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxNDp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6IjdlNmU1YTRlMzBiY2JkMjI2YjZkN2FlYTNjNDcxOTY3IjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6MTM6IlhtbERyaXZlci5waHAiO3M6Mzk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAcGF0aCI7czo3MDoidmVuZG9yL2ptcy9zZXJpYWxpemVyL3NyYy9KTVMvU2VyaWFsaXplci9NZXRhZGF0YS9Ecml2ZXIvWG1sRHJpdmVyLnBocCI7czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBzb3VyY2UiO3M6MTYwNzQ6Ijw/cGhwCgovKgogKiBDb3B5cmlnaHQgMjAxNiBKb2hhbm5lcyBNLiBTY2htaXR0IDxzY2htaXR0am9oQGdtYWlsLmNvbT4KICoKICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7CiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CiAqCiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKICoKICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQogKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAogKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAogKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KICovCgpuYW1lc3BhY2UgSk1TXFNlcmlhbGl6ZXJcTWV0YWRhdGFcRHJpdmVyOwoKdXNlIEpNU1xTZXJpYWxpemVyXEdyYXBoTmF2aWdhdG9yOwp1c2UgSk1TXFNlcmlhbGl6ZXJcRXhjZXB0aW9uXFJ1bnRpbWVFeGNlcHRpb247CnVzZSBKTVNcU2VyaWFsaXplclxFeGNlcHRpb25cWG1sRXJyb3JFeGNlcHRpb247CnVzZSBKTVNcU2VyaWFsaXplclxBbm5vdGF0aW9uXEV4Y2x1c2lvblBvbGljeTsKdXNlIEpNU1xTZXJpYWxpemVyXE1ldGFkYXRhXEV4cHJlc3Npb25Qcm9wZXJ0eU1ldGFkYXRhOwp1c2UgSk1TXFNlcmlhbGl6ZXJcTWV0YWRhdGFcUHJvcGVydHlNZXRhZGF0YTsKdXNlIEpNU1xTZXJpYWxpemVyXE1ldGFkYXRhXFZpcnR1YWxQcm9wZXJ0eU1ldGFkYXRhOwp1c2UgTWV0YWRhdGFcTWV0aG9kTWV0YWRhdGE7CnVzZSBKTVNcU2VyaWFsaXplclxNZXRhZGF0YVxDbGFzc01ldGFkYXRhOwp1c2UgTWV0YWRhdGFcRHJpdmVyXEFic3RyYWN0RmlsZURyaXZlcjsKCmNsYXNzIFhtbERyaXZlciBleHRlbmRzIEFic3RyYWN0RmlsZURyaXZlcgp7CiAgICBwcm90ZWN0ZWQgZnVuY3Rpb24gbG9hZE1ldGFkYXRhRnJvbUZpbGUoXFJlZmxlY3Rpb25DbGFzcyAkY2xhc3MsICRwYXRoKQogICAgewogICAgICAgICRwcmV2aW91cyA9IGxpYnhtbF91c2VfaW50ZXJuYWxfZXJyb3JzKHRydWUpOwogICAgICAgIGxpYnhtbF9jbGVhcl9lcnJvcnMoKTsKCiAgICAgICAgJGVsZW0gPSBzaW1wbGV4bWxfbG9hZF9maWxlKCRwYXRoKTsKICAgICAgICBsaWJ4bWxfdXNlX2ludGVybmFsX2Vycm9ycygkcHJldmlvdXMpOwoKICAgICAgICBpZiAoZmFsc2UgPT09ICRlbGVtKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBYbWxFcnJvckV4Y2VwdGlvbihsaWJ4bWxfZ2V0X2xhc3RfZXJyb3IoKSk7CiAgICAgICAgfQoKICAgICAgICAkbWV0YWRhdGEgPSBuZXcgQ2xhc3NNZXRhZGF0YSgkbmFtZSA9ICRjbGFzcy0+bmFtZSk7CiAgICAgICAgaWYgKCAhICRlbGVtcyA9ICRlbGVtLT54cGF0aCgiLi9jbGFzc1tAbmFtZSA9ICciLiRuYW1lLiInXSIpKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBSdW50aW1lRXhjZXB0aW9uKHNwcmludGYoJ0NvdWxkIG5vdCBmaW5kIGNsYXNzICVzIGluc2lkZSBYTUwgZWxlbWVudC4nLCAkbmFtZSkpOwogICAgICAgIH0KICAgICAgICAkZWxlbSA9IHJlc2V0KCRlbGVtcyk7CgogICAgICAgICRtZXRhZGF0YS0+ZmlsZVJlc291cmNlc1tdID0gJHBhdGg7CiAgICAgICAgJG1ldGFkYXRhLT5maWxlUmVzb3VyY2VzW10gPSAkY2xhc3MtPmdldEZpbGVOYW1lKCk7CiAgICAgICAgJGV4Y2x1c2lvblBvbGljeSA9IHN0cnRvdXBwZXIoJGVsZW0tPmF0dHJpYnV0ZXMoKS0+eydleGNsdXNpb24tcG9saWN5J30pID86ICdOT05FJzsKICAgICAgICAkZXhjbHVkZUFsbCA9IG51bGwgIT09ICgkZXhjbHVkZSA9ICRlbGVtLT5hdHRyaWJ1dGVzKCktPmV4Y2x1ZGUpID8gJ3RydWUnID09PSBzdHJ0b2xvd2VyKCRleGNsdWRlKSA6IGZhbHNlOwogICAgICAgICRjbGFzc0FjY2Vzc1R5cGUgPSAoc3RyaW5nKSAoJGVsZW0tPmF0dHJpYnV0ZXMoKS0+eydhY2Nlc3MtdHlwZSd9ID86IFByb3BlcnR5TWV0YWRhdGE6OkFDQ0VTU19UWVBFX1BST1BFUlRZKTsKCiAgICAgICAgJHByb3BlcnRpZXNNZXRhZGF0YSA9IGFycmF5KCk7CiAgICAgICAgJHByb3BlcnRpZXNOb2RlcyA9IGFycmF5KCk7CgogICAgICAgIGlmIChudWxsICE9PSAkYWNjZXNzb3JPcmRlciA9ICRlbGVtLT5hdHRyaWJ1dGVzKCktPnsnYWNjZXNzb3Itb3JkZXInfSkgewogICAgICAgICAgICAkbWV0YWRhdGEtPnNldEFjY2Vzc29yT3JkZXIoKHN0cmluZykgJGFjY2Vzc29yT3JkZXIsIHByZWdfc3BsaXQoJy9ccyosXHMqLycsIChzdHJpbmcpICRlbGVtLT5hdHRyaWJ1dGVzKCktPnsnY3VzdG9tLWFjY2Vzc29yLW9yZGVyJ30pKTsKICAgICAgICB9CgogICAgICAgIGlmIChudWxsICE9PSAkeG1sUm9vdE5hbWUgPSAkZWxlbS0+YXR0cmlidXRlcygpLT57J3htbC1yb290LW5hbWUnfSkgewogICAgICAgICAgICAkbWV0YWRhdGEtPnhtbFJvb3ROYW1lID0gKHN0cmluZykgJHhtbFJvb3ROYW1lOwogICAgICAgIH0KCiAgICAgICAgaWYgKG51bGwgIT09ICR4bWxSb290TmFtZXNwYWNlID0gJGVsZW0tPmF0dHJpYnV0ZXMoKS0+eyd4bWwtcm9vdC1uYW1lc3BhY2UnfSkgewogICAgICAgICAgICAkbWV0YWRhdGEtPnhtbFJvb3ROYW1lc3BhY2UgPSAoc3RyaW5nKSAkeG1sUm9vdE5hbWVzcGFjZTsKICAgICAgICB9CgogICAgICAgICRyZWFkT25seUNsYXNzID0gJ3RydWUnID09PSBzdHJ0b2xvd2VyKCRlbGVtLT5hdHRyaWJ1dGVzKCktPnsncmVhZC1vbmx5J30pOwoKICAgICAgICAkZGlzY3JpbWluYXRvckZpZWxkTmFtZSA9IChzdHJpbmcpICRlbGVtLT5hdHRyaWJ1dGVzKCktPnsnZGlzY3JpbWluYXRvci1maWVsZC1uYW1lJ307CiAgICAgICAgJGRpc2NyaW1pbmF0b3JNYXAgPSBhcnJheSgpOwogICAgICAgIGZvcmVhY2ggKCRlbGVtLT54cGF0aCgnLi9kaXNjcmltaW5hdG9yLWNsYXNzJykgYXMgJGVudHJ5KSB7CiAgICAgICAgICAgIGlmICggISBpc3NldCgkZW50cnktPmF0dHJpYnV0ZXMoKS0+dmFsdWUpKSB7CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUnVudGltZUV4Y2VwdGlvbignRWFjaCBkaXNjcmltaW5hdG9yLWNsYXNzIGVsZW1lbnQgbXVzdCBoYXZlIGEgInZhbHVlIiBhdHRyaWJ1dGUuJyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICRkaXNjcmltaW5hdG9yTWFwWyhzdHJpbmcpICRlbnRyeS0+YXR0cmlidXRlcygpLT52YWx1ZV0gPSAoc3RyaW5nKSAkZW50cnk7CiAgICAgICAgfQoKICAgICAgICBpZiAoJ3RydWUnID09PSAoc3RyaW5nKSAkZWxlbS0+YXR0cmlidXRlcygpLT57J2Rpc2NyaW1pbmF0b3ItZGlzYWJsZWQnfSkgewogICAgICAgICAgICAkbWV0YWRhdGEtPmRpc2NyaW1pbmF0b3JEaXNhYmxlZCA9IHRydWU7CiAgICAgICAgfSBlbHNlaWYgKCAhIGVtcHR5KCRkaXNjcmltaW5hdG9yRmllbGROYW1lKSB8fCAhIGVtcHR5KCRkaXNjcmltaW5hdG9yTWFwKSkgewoKICAgICAgICAgICAgJGRpc2NyaW1pbmF0b3JHcm91cHMgPSBhcnJheSgpOwogICAgICAgICAgICBmb3JlYWNoICgkZWxlbS0+eHBhdGgoJy4vZGlzY3JpbWluYXRvci1ncm91cHMvZ3JvdXAnKSBhcyAkZW50cnkpIHsKICAgICAgICAgICAgICAgICRkaXNjcmltaW5hdG9yR3JvdXBzW10gPSAoc3RyaW5nKSAkZW50cnk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgJG1ldGFkYXRhLT5zZXREaXNjcmltaW5hdG9yKCRkaXNjcmltaW5hdG9yRmllbGROYW1lLCAkZGlzY3JpbWluYXRvck1hcCwgJGRpc2NyaW1pbmF0b3JHcm91cHMpOwogICAgICAgIH0KCiAgICAgICAgZm9yZWFjaCAoJGVsZW0tPnhwYXRoKCcuL3htbC1uYW1lc3BhY2UnKSBhcyAkeG1sTmFtZXNwYWNlKSB7CiAgICAgICAgICAgIGlmICggISBpc3NldCgkeG1sTmFtZXNwYWNlLT5hdHRyaWJ1dGVzKCktPnVyaSkpIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBSdW50aW1lRXhjZXB0aW9uKCdUaGUgcHJlZml4IGF0dHJpYnV0ZSBtdXN0IGJlIHNldCBmb3IgYWxsIHhtbC1uYW1lc3BhY2UgZWxlbWVudHMuJyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChpc3NldCgkeG1sTmFtZXNwYWNlLT5hdHRyaWJ1dGVzKCktPnByZWZpeCkpIHsKICAgICAgICAgICAgICAgICRwcmVmaXggPSAoc3RyaW5nKSAkeG1sTmFtZXNwYWNlLT5hdHRyaWJ1dGVzKCktPnByZWZpeDsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICRwcmVmaXggPSBudWxsOwogICAgICAgICAgICB9CgogICAgICAgICAgICAkbWV0YWRhdGEtPnJlZ2lzdGVyTmFtZXNwYWNlKChzdHJpbmcpICR4bWxOYW1lc3BhY2UtPmF0dHJpYnV0ZXMoKS0+dXJpLCAkcHJlZml4KTsKICAgICAgICB9CgogICAgICAgIGZvcmVhY2ggKCRlbGVtLT54cGF0aCgnLi94bWwtZGlzY3JpbWluYXRvcicpIGFzICR4bWxEaXNjcmltaW5hdG9yKSB7CiAgICAgICAgICAgIGlmIChpc3NldCgkeG1sRGlzY3JpbWluYXRvci0+YXR0cmlidXRlcygpLT5hdHRyaWJ1dGUpKSB7CiAgICAgICAgICAgICAgICAkbWV0YWRhdGEtPnhtbERpc2NyaW1pbmF0b3JBdHRyaWJ1dGUgPSAoc3RyaW5nKSAkeG1sRGlzY3JpbWluYXRvci0+YXR0cmlidXRlcygpLT5hdHRyaWJ1dGUgPT09ICd0cnVlJzsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoaXNzZXQoJHhtbERpc2NyaW1pbmF0b3ItPmF0dHJpYnV0ZXMoKS0+Y2RhdGEpKSB7CiAgICAgICAgICAgICAgICAkbWV0YWRhdGEtPnhtbERpc2NyaW1pbmF0b3JDRGF0YSA9IChzdHJpbmcpICR4bWxEaXNjcmltaW5hdG9yLT5hdHRyaWJ1dGVzKCktPmNkYXRhID09PSAndHJ1ZSc7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGlzc2V0KCR4bWxEaXNjcmltaW5hdG9yLT5hdHRyaWJ1dGVzKCktPm5hbWVzcGFjZSkpIHsKICAgICAgICAgICAgICAgICRtZXRhZGF0YS0+eG1sRGlzY3JpbWluYXRvck5hbWVzcGFjZSA9IChzdHJpbmcpICR4bWxEaXNjcmltaW5hdG9yLT5hdHRyaWJ1dGVzKCktPm5hbWVzcGFjZTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZm9yZWFjaCAoJGVsZW0tPnhwYXRoKCcuL3ZpcnR1YWwtcHJvcGVydHknKSBhcyAkbWV0aG9kKSB7CgogICAgICAgICAgICBpZiAoaXNzZXQoJG1ldGhvZC0+YXR0cmlidXRlcygpLT5leHByZXNzaW9uKSkgewogICAgICAgICAgICAgICAgJHZpcnR1YWxQcm9wZXJ0eU1ldGFkYXRhID0gbmV3IEV4cHJlc3Npb25Qcm9wZXJ0eU1ldGFkYXRhKCRuYW1lLCAoc3RyaW5nKSRtZXRob2QtPmF0dHJpYnV0ZXMoKS0+bmFtZSwgKHN0cmluZykkbWV0aG9kLT5hdHRyaWJ1dGVzKCktPmV4cHJlc3Npb24pOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgaWYgKCAhIGlzc2V0KCRtZXRob2QtPmF0dHJpYnV0ZXMoKS0+bWV0aG9kKSkgewogICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBSdW50aW1lRXhjZXB0aW9uKCdUaGUgbWV0aG9kIGF0dHJpYnV0ZSBtdXN0IGJlIHNldCBmb3IgYWxsIHZpcnR1YWwtcHJvcGVydHkgZWxlbWVudHMuJyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAkdmlydHVhbFByb3BlcnR5TWV0YWRhdGEgPSBuZXcgVmlydHVhbFByb3BlcnR5TWV0YWRhdGEoJG5hbWUsIChzdHJpbmcpICRtZXRob2QtPmF0dHJpYnV0ZXMoKS0+bWV0aG9kKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgJHByb3BlcnRpZXNNZXRhZGF0YVtdID0gJHZpcnR1YWxQcm9wZXJ0eU1ldGFkYXRhOwogICAgICAgICAgICAkcHJvcGVydGllc05vZGVzW10gPSAkbWV0aG9kOwogICAgICAgIH0KCiAgICAgICAgaWYgKCAhICRleGNsdWRlQWxsKSB7CgogICAgICAgICAgICBmb3JlYWNoICgkY2xhc3MtPmdldFByb3BlcnRpZXMoKSBhcyAkcHJvcGVydHkpIHsKICAgICAgICAgICAgICAgIGlmICgkcHJvcGVydHktPmNsYXNzICE9PSAkbmFtZSB8fCAoaXNzZXQoJHByb3BlcnR5LT5pbmZvKSAmJiAkcHJvcGVydHktPmluZm9bJ2NsYXNzJ10gIT09ICRuYW1lKSkgewogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICRwcm9wZXJ0aWVzTWV0YWRhdGFbXSA9IG5ldyBQcm9wZXJ0eU1ldGFkYXRhKCRuYW1lLCAkcE5hbWUgPSAkcHJvcGVydHktPmdldE5hbWUoKSk7CiAgICAgICAgICAgICAgICAkcEVsZW1zID0gJGVsZW0tPnhwYXRoKCIuL3Byb3BlcnR5W0BuYW1lID0gJyIuJHBOYW1lLiInXSIpOwoKICAgICAgICAgICAgICAgICRwcm9wZXJ0aWVzTm9kZXNbXSA9ICRwRWxlbXMgPyByZXNldCgkcEVsZW1zKSA6IG51bGw7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZvcmVhY2ggKCRwcm9wZXJ0aWVzTWV0YWRhdGEgYXMgJHByb3BlcnR5S2V5ID0+ICRwTWV0YWRhdGEpIHsKCiAgICAgICAgICAgICAgICAkaXNFeGNsdWRlID0gZmFsc2U7CiAgICAgICAgICAgICAgICAkaXNFeHBvc2UgPSAkcE1ldGFkYXRhIGluc3RhbmNlb2YgVmlydHVhbFByb3BlcnR5TWV0YWRhdGEKICAgICAgICAgICAgICAgICAgICB8fCAkcE1ldGFkYXRhIGluc3RhbmNlb2YgRXhwcmVzc2lvblByb3BlcnR5TWV0YWRhdGE7CgogICAgICAgICAgICAgICAgJHBFbGVtID0gJHByb3BlcnRpZXNOb2Rlc1skcHJvcGVydHlLZXldOwogICAgICAgICAgICAgICAgaWYgKCAhIGVtcHR5KCRwRWxlbSkpIHsKCiAgICAgICAgICAgICAgICAgICAgaWYgKG51bGwgIT09ICRleGNsdWRlID0gJHBFbGVtLT5hdHRyaWJ1dGVzKCktPmV4Y2x1ZGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJGlzRXhjbHVkZSA9ICd0cnVlJyA9PT0gc3RydG9sb3dlcigkZXhjbHVkZSk7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBpZiAobnVsbCAhPT0gJGV4cG9zZSA9ICRwRWxlbS0+YXR0cmlidXRlcygpLT5leHBvc2UpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJGlzRXhwb3NlID0gJ3RydWUnID09PSBzdHJ0b2xvd2VyKCRleHBvc2UpOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgaWYgKG51bGwgIT09ICRleGNsdWRlSWYgPSAkcEVsZW0tPmF0dHJpYnV0ZXMoKS0+eydleGNsdWRlLWlmJ30pIHsKICAgICAgICAgICAgICAgICAgICAgICAgJHBNZXRhZGF0YS0+ZXhjbHVkZUlmID0kZXhjbHVkZUlmOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgaWYgKG51bGwgIT09ICRza2lwID0gJHBFbGVtLT5hdHRyaWJ1dGVzKCktPnsnc2tpcC13aGVuLWVtcHR5J30pIHsKICAgICAgICAgICAgICAgICAgICAgICAgJHBNZXRhZGF0YS0+c2tpcFdoZW5FbXB0eSA9ICd0cnVlJyA9PT0gc3RydG9sb3dlcigkc2tpcCk7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBpZiAobnVsbCAhPT0gJGV4Y2x1ZGVJZiA9ICRwRWxlbS0+YXR0cmlidXRlcygpLT57J2V4cG9zZS1pZid9KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRwTWV0YWRhdGEtPmV4Y2x1ZGVJZiA9ICIhKCIgLiAkZXhjbHVkZUlmIC4iKSI7CiAgICAgICAgICAgICAgICAgICAgICAgICRpc0V4cG9zZSA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBpZiAobnVsbCAhPT0gJHZlcnNpb24gPSAkcEVsZW0tPmF0dHJpYnV0ZXMoKS0+eydzaW5jZS12ZXJzaW9uJ30pIHsKICAgICAgICAgICAgICAgICAgICAgICAgJHBNZXRhZGF0YS0+c2luY2VWZXJzaW9uID0gKHN0cmluZykgJHZlcnNpb247CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBpZiAobnVsbCAhPT0gJHZlcnNpb24gPSAkcEVsZW0tPmF0dHJpYnV0ZXMoKS0+eyd1bnRpbC12ZXJzaW9uJ30pIHsKICAgICAgICAgICAgICAgICAgICAgICAgJHBNZXRhZGF0YS0+dW50aWxWZXJzaW9uID0gKHN0cmluZykgJHZlcnNpb247CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBpZiAobnVsbCAhPT0gJHNlcmlhbGl6ZWROYW1lID0gJHBFbGVtLT5hdHRyaWJ1dGVzKCktPnsnc2VyaWFsaXplZC1uYW1lJ30pIHsKICAgICAgICAgICAgICAgICAgICAgICAgJHBNZXRhZGF0YS0+c2VyaWFsaXplZE5hbWUgPSAoc3RyaW5nKSAkc2VyaWFsaXplZE5hbWU7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBpZiAobnVsbCAhPT0gJHR5cGUgPSAkcEVsZW0tPmF0dHJpYnV0ZXMoKS0+dHlwZSkgewogICAgICAgICAgICAgICAgICAgICAgICAkcE1ldGFkYXRhLT5zZXRUeXBlKChzdHJpbmcpICR0eXBlKTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2VpZiAoaXNzZXQoJHBFbGVtLT50eXBlKSkgewogICAgICAgICAgICAgICAgICAgICAgICAkcE1ldGFkYXRhLT5zZXRUeXBlKChzdHJpbmcpICRwRWxlbS0+dHlwZSk7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBpZiAobnVsbCAhPT0gJGdyb3VwcyA9ICRwRWxlbS0+YXR0cmlidXRlcygpLT5ncm91cHMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJHBNZXRhZGF0YS0+Z3JvdXBzID0gcHJlZ19zcGxpdCgnL1xzKixccyovJywgKHN0cmluZykgJGdyb3Vwcyk7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBpZiAoaXNzZXQoJHBFbGVtLT57J3htbC1saXN0J30pKSB7CgogICAgICAgICAgICAgICAgICAgICAgICAkcE1ldGFkYXRhLT54bWxDb2xsZWN0aW9uID0gdHJ1ZTsKCiAgICAgICAgICAgICAgICAgICAgICAgICRjb2xDb25maWcgPSAkcEVsZW0tPnsneG1sLWxpc3QnfTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzc2V0KCRjb2xDb25maWctPmF0dHJpYnV0ZXMoKS0+aW5saW5lKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHBNZXRhZGF0YS0+eG1sQ29sbGVjdGlvbklubGluZSA9ICd0cnVlJyA9PT0gKHN0cmluZykgJGNvbENvbmZpZy0+YXR0cmlidXRlcygpLT5pbmxpbmU7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc3NldCgkY29sQ29uZmlnLT5hdHRyaWJ1dGVzKCktPnsnZW50cnktbmFtZSd9KSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHBNZXRhZGF0YS0+eG1sRW50cnlOYW1lID0gKHN0cmluZykgJGNvbENvbmZpZy0+YXR0cmlidXRlcygpLT57J2VudHJ5LW5hbWUnfTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzc2V0KCRjb2xDb25maWctPmF0dHJpYnV0ZXMoKS0+eydza2lwLXdoZW4tZW1wdHknfSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwTWV0YWRhdGEtPnhtbENvbGxlY3Rpb25Ta2lwV2hlbkVtcHR5ID0gJ3RydWUnID09PSAoc3RyaW5nKSAkY29sQ29uZmlnLT5hdHRyaWJ1dGVzKCktPnsnc2tpcC13aGVuLWVtcHR5J307CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcE1ldGFkYXRhLT54bWxDb2xsZWN0aW9uU2tpcFdoZW5FbXB0eSA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc3NldCgkY29sQ29uZmlnLT5hdHRyaWJ1dGVzKCktPm5hbWVzcGFjZSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwTWV0YWRhdGEtPnhtbEVudHJ5TmFtZXNwYWNlID0gKHN0cmluZykgJGNvbENvbmZpZy0+YXR0cmlidXRlcygpLT5uYW1lc3BhY2U7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGlmIChpc3NldCgkcEVsZW0tPnsneG1sLW1hcCd9KSkgewogICAgICAgICAgICAgICAgICAgICAgICAkcE1ldGFkYXRhLT54bWxDb2xsZWN0aW9uID0gdHJ1ZTsKCiAgICAgICAgICAgICAgICAgICAgICAgICRjb2xDb25maWcgPSAkcEVsZW0tPnsneG1sLW1hcCd9OwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNzZXQoJGNvbENvbmZpZy0+YXR0cmlidXRlcygpLT5pbmxpbmUpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcE1ldGFkYXRhLT54bWxDb2xsZWN0aW9uSW5saW5lID0gJ3RydWUnID09PSAoc3RyaW5nKSAkY29sQ29uZmlnLT5hdHRyaWJ1dGVzKCktPmlubGluZTsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzc2V0KCRjb2xDb25maWctPmF0dHJpYnV0ZXMoKS0+eydlbnRyeS1uYW1lJ30pKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcE1ldGFkYXRhLT54bWxFbnRyeU5hbWUgPSAoc3RyaW5nKSAkY29sQ29uZmlnLT5hdHRyaWJ1dGVzKCktPnsnZW50cnktbmFtZSd9OwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNzZXQoJGNvbENvbmZpZy0+YXR0cmlidXRlcygpLT5uYW1lc3BhY2UpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcE1ldGFkYXRhLT54bWxFbnRyeU5hbWVzcGFjZSA9IChzdHJpbmcpICRjb2xDb25maWctPmF0dHJpYnV0ZXMoKS0+bmFtZXNwYWNlOwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNzZXQoJGNvbENvbmZpZy0+YXR0cmlidXRlcygpLT57J2tleS1hdHRyaWJ1dGUtbmFtZSd9KSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHBNZXRhZGF0YS0+eG1sS2V5QXR0cmlidXRlID0gKHN0cmluZykgJGNvbENvbmZpZy0+YXR0cmlidXRlcygpLT57J2tleS1hdHRyaWJ1dGUtbmFtZSd9OwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBpZiAoaXNzZXQoJHBFbGVtLT57J3htbC1lbGVtZW50J30pKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRjb2xDb25maWcgPSAkcEVsZW0tPnsneG1sLWVsZW1lbnQnfTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzc2V0KCRjb2xDb25maWctPmF0dHJpYnV0ZXMoKS0+Y2RhdGEpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcE1ldGFkYXRhLT54bWxFbGVtZW50Q0RhdGEgPSAndHJ1ZScgPT09IChzdHJpbmcpICRjb2xDb25maWctPmF0dHJpYnV0ZXMoKS0+Y2RhdGE7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc3NldCgkY29sQ29uZmlnLT5hdHRyaWJ1dGVzKCktPm5hbWVzcGFjZSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwTWV0YWRhdGEtPnhtbE5hbWVzcGFjZSA9IChzdHJpbmcpICRjb2xDb25maWctPmF0dHJpYnV0ZXMoKS0+bmFtZXNwYWNlOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBpZiAoaXNzZXQoJHBFbGVtLT5hdHRyaWJ1dGVzKCktPnsneG1sLWF0dHJpYnV0ZSd9KSkgewogICAgICAgICAgICAgICAgICAgICAgICAkcE1ldGFkYXRhLT54bWxBdHRyaWJ1dGUgPSAndHJ1ZScgPT09IChzdHJpbmcpICRwRWxlbS0+YXR0cmlidXRlcygpLT57J3htbC1hdHRyaWJ1dGUnfTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGlmIChpc3NldCgkcEVsZW0tPmF0dHJpYnV0ZXMoKS0+eyd4bWwtYXR0cmlidXRlLW1hcCd9KSkgewogICAgICAgICAgICAgICAgICAgICAgICAkcE1ldGFkYXRhLT54bWxBdHRyaWJ1dGVNYXAgPSAndHJ1ZScgPT09IChzdHJpbmcpICRwRWxlbS0+YXR0cmlidXRlcygpLT57J3htbC1hdHRyaWJ1dGUtbWFwJ307CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBpZiAoaXNzZXQoJHBFbGVtLT5hdHRyaWJ1dGVzKCktPnsneG1sLXZhbHVlJ30pKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRwTWV0YWRhdGEtPnhtbFZhbHVlID0gJ3RydWUnID09PSAoc3RyaW5nKSAkcEVsZW0tPmF0dHJpYnV0ZXMoKS0+eyd4bWwtdmFsdWUnfTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGlmIChpc3NldCgkcEVsZW0tPmF0dHJpYnV0ZXMoKS0+eyd4bWwta2V5LXZhbHVlLXBhaXJzJ30pKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRwTWV0YWRhdGEtPnhtbEtleVZhbHVlUGFpcnMgPSAndHJ1ZScgPT09IChzdHJpbmcpICRwRWxlbS0+YXR0cmlidXRlcygpLT57J3htbC1rZXktdmFsdWUtcGFpcnMnfTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGlmIChpc3NldCgkcEVsZW0tPmF0dHJpYnV0ZXMoKS0+eydtYXgtZGVwdGgnfSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJHBNZXRhZGF0YS0+bWF4RGVwdGggPSAoaW50KSAkcEVsZW0tPmF0dHJpYnV0ZXMoKS0+eydtYXgtZGVwdGgnfTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIC8vd2UgbmVlZCByZWFkLW9ubHkgYmVmb3JlIHNldHRlciBhbmQgZ2V0dGVyIHNldCwgYmVjYXVzZSB0aGF0IG1ldGhvZCBkZXBlbmRzIG9uIGZsYWcgYmVpbmcgc2V0CiAgICAgICAgICAgICAgICAgICAgaWYgKG51bGwgIT09ICRyZWFkT25seSA9ICRwRWxlbS0+YXR0cmlidXRlcygpLT57J3JlYWQtb25seSd9KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRwTWV0YWRhdGEtPnJlYWRPbmx5ID0gJ3RydWUnID09PSBzdHJ0b2xvd2VyKCRyZWFkT25seSk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgJHBNZXRhZGF0YS0+cmVhZE9ubHkgPSAkcE1ldGFkYXRhLT5yZWFkT25seSB8fCAkcmVhZE9ubHlDbGFzczsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICRnZXR0ZXIgPSAkcEVsZW0tPmF0dHJpYnV0ZXMoKS0+eydhY2Nlc3Nvci1nZXR0ZXInfTsKICAgICAgICAgICAgICAgICAgICAkc2V0dGVyID0gJHBFbGVtLT5hdHRyaWJ1dGVzKCktPnsnYWNjZXNzb3Itc2V0dGVyJ307CiAgICAgICAgICAgICAgICAgICAgJHBNZXRhZGF0YS0+c2V0QWNjZXNzb3IoCiAgICAgICAgICAgICAgICAgICAgICAgIChzdHJpbmcpICgkcEVsZW0tPmF0dHJpYnV0ZXMoKS0+eydhY2Nlc3MtdHlwZSd9ID86ICRjbGFzc0FjY2Vzc1R5cGUpLAogICAgICAgICAgICAgICAgICAgICAgICAkZ2V0dGVyID8gKHN0cmluZykgJGdldHRlciA6IG51bGwsCiAgICAgICAgICAgICAgICAgICAgICAgICRzZXR0ZXIgPyAoc3RyaW5nKSAkc2V0dGVyIDogbnVsbAogICAgICAgICAgICAgICAgICAgICk7CgogICAgICAgICAgICAgICAgICAgIGlmIChudWxsICE9PSAkaW5saW5lID0gJHBFbGVtLT5hdHRyaWJ1dGVzKCktPmlubGluZSkgewogICAgICAgICAgICAgICAgICAgICAgICAkcE1ldGFkYXRhLT5pbmxpbmUgPSAndHJ1ZScgPT09IHN0cnRvbG93ZXIoJGlubGluZSk7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoKEV4Y2x1c2lvblBvbGljeTo6Tk9ORSA9PT0gKHN0cmluZykgJGV4Y2x1c2lvblBvbGljeSAmJiAhICRpc0V4Y2x1ZGUpCiAgICAgICAgICAgICAgICAgICAgfHwgKEV4Y2x1c2lvblBvbGljeTo6QUxMID09PSAoc3RyaW5nKSAkZXhjbHVzaW9uUG9saWN5ICYmICRpc0V4cG9zZSkpIHsKCiAgICAgICAgICAgICAgICAgICAgJG1ldGFkYXRhLT5hZGRQcm9wZXJ0eU1ldGFkYXRhKCRwTWV0YWRhdGEpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBmb3JlYWNoICgkZWxlbS0+eHBhdGgoJy4vY2FsbGJhY2stbWV0aG9kJykgYXMgJG1ldGhvZCkgewogICAgICAgICAgICBpZiAoICEgaXNzZXQoJG1ldGhvZC0+YXR0cmlidXRlcygpLT50eXBlKSkgewogICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJ1bnRpbWVFeGNlcHRpb24oJ1RoZSB0eXBlIGF0dHJpYnV0ZSBtdXN0IGJlIHNldCBmb3IgYWxsIGNhbGxiYWNrLW1ldGhvZCBlbGVtZW50cy4nKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoICEgaXNzZXQoJG1ldGhvZC0+YXR0cmlidXRlcygpLT5uYW1lKSkgewogICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJ1bnRpbWVFeGNlcHRpb24oJ1RoZSBuYW1lIGF0dHJpYnV0ZSBtdXN0IGJlIHNldCBmb3IgYWxsIGNhbGxiYWNrLW1ldGhvZCBlbGVtZW50cy4nKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgc3dpdGNoICgoc3RyaW5nKSAkbWV0aG9kLT5hdHRyaWJ1dGVzKCktPnR5cGUpIHsKICAgICAgICAgICAgICAgIGNhc2UgJ3ByZS1zZXJpYWxpemUnOgogICAgICAgICAgICAgICAgICAgICRtZXRhZGF0YS0+YWRkUHJlU2VyaWFsaXplTWV0aG9kKG5ldyBNZXRob2RNZXRhZGF0YSgkbmFtZSwgKHN0cmluZykgJG1ldGhvZC0+YXR0cmlidXRlcygpLT5uYW1lKSk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgICAgY2FzZSAncG9zdC1zZXJpYWxpemUnOgogICAgICAgICAgICAgICAgICAgICRtZXRhZGF0YS0+YWRkUG9zdFNlcmlhbGl6ZU1ldGhvZChuZXcgTWV0aG9kTWV0YWRhdGEoJG5hbWUsIChzdHJpbmcpICRtZXRob2QtPmF0dHJpYnV0ZXMoKS0+bmFtZSkpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICAgIGNhc2UgJ3Bvc3QtZGVzZXJpYWxpemUnOgogICAgICAgICAgICAgICAgICAgICRtZXRhZGF0YS0+YWRkUG9zdERlc2VyaWFsaXplTWV0aG9kKG5ldyBNZXRob2RNZXRhZGF0YSgkbmFtZSwgKHN0cmluZykgJG1ldGhvZC0+YXR0cmlidXRlcygpLT5uYW1lKSk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgICAgY2FzZSAnaGFuZGxlcic6CiAgICAgICAgICAgICAgICAgICAgaWYgKCAhIGlzc2V0KCRtZXRob2QtPmF0dHJpYnV0ZXMoKS0+Zm9ybWF0KSkgewogICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUnVudGltZUV4Y2VwdGlvbignVGhlIGZvcm1hdCBhdHRyaWJ1dGUgbXVzdCBiZSBzZXQgZm9yICJoYW5kbGVyIiBjYWxsYmFjayBtZXRob2RzLicpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAoICEgaXNzZXQoJG1ldGhvZC0+YXR0cmlidXRlcygpLT5kaXJlY3Rpb24pKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBSdW50aW1lRXhjZXB0aW9uKCdUaGUgZGlyZWN0aW9uIGF0dHJpYnV0ZSBtdXN0IGJlIHNldCBmb3IgImhhbmRsZXIiIGNhbGxiYWNrIG1ldGhvZHMuJyk7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAkZGlyZWN0aW9uID0gR3JhcGhOYXZpZ2F0b3I6OnBhcnNlRGlyZWN0aW9uKChzdHJpbmcpICRtZXRob2QtPmF0dHJpYnV0ZXMoKS0+ZGlyZWN0aW9uKTsKICAgICAgICAgICAgICAgICAgICAkZm9ybWF0ID0gKHN0cmluZykgJG1ldGhvZC0+YXR0cmlidXRlcygpLT5mb3JtYXQ7CiAgICAgICAgICAgICAgICAgICAgJG1ldGFkYXRhLT5hZGRIYW5kbGVyQ2FsbGJhY2soJGRpcmVjdGlvbiwgJGZvcm1hdCwgKHN0cmluZykgJG1ldGhvZC0+YXR0cmlidXRlcygpLT5uYW1lKTsKCiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUnVudGltZUV4Y2VwdGlvbihzcHJpbnRmKCdUaGUgdHlwZSAiJXMiIGlzIG5vdCBzdXBwb3J0ZWQuJywgJG1ldGhvZC0+YXR0cmlidXRlcygpLT5uYW1lKSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHJldHVybiAkbWV0YWRhdGE7CiAgICB9CgogICAgcHJvdGVjdGVkIGZ1bmN0aW9uIGdldEV4dGVuc2lvbigpCiAgICB7CiAgICAgICAgcmV0dXJuICd4bWwnOwogICAgfQp9CiI7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBuYW1lc3BhY2VzIjthOjE6e3M6MzE6IlxKTVNcU2VyaWFsaXplclxNZXRhZGF0YVxEcml2ZXIiO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czozMToiXEpNU1xTZXJpYWxpemVyXE1ldGFkYXRhXERyaXZlciI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjY6IkRyaXZlciI7fX1zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGluY2x1ZGVzIjthOjA6e31zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGZ1bmN0aW9ucyI7YTowOnt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBjb25zdGFudHMiO2E6MDp7fXM6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAY2xhc3NlcyI7YToxOntzOjQxOiJcSk1TXFNlcmlhbGl6ZXJcTWV0YWRhdGFcRHJpdmVyXFhtbERyaXZlciI7TzozNToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18iOjEzOntzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18AZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo0MToiXEpNU1xTZXJpYWxpemVyXE1ldGFkYXRhXERyaXZlclxYbWxEcml2ZXIiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czo5OiJYbWxEcml2ZXIiO31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18AZG9jQmxvY2siO047czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAGFic3RyYWN0IjtiOjA7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAGZpbmFsIjtiOjA7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAHBhcmVudCI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjM1OiJcTWV0YWRhdGFcRHJpdmVyXEFic3RyYWN0RmlsZURyaXZlciI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjE4OiJBYnN0cmFjdEZpbGVEcml2ZXIiO31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18AaW1wbGVtZW50cyI7YTowOnt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAGNvbnN0YW50cyI7YTowOnt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAHByb3BlcnRpZXMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBtZXRob2RzIjthOjI6e3M6NjU6IlxKTVNcU2VyaWFsaXplclxNZXRhZGF0YVxEcml2ZXJcWG1sRHJpdmVyOjpsb2FkTWV0YWRhdGFGcm9tRmlsZSgpIjtPOjM1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZCI6MTI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABkb2NCbG9jayI7TjtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo2NToiXEpNU1xTZXJpYWxpemVyXE1ldGFkYXRhXERyaXZlclxYbWxEcml2ZXI6OmxvYWRNZXRhZGF0YUZyb21GaWxlKCkiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoyMDoibG9hZE1ldGFkYXRhRnJvbUZpbGUiO31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYWJzdHJhY3QiO2I6MDtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZmluYWwiO2I6MDtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAc3RhdGljIjtiOjA7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHZpc2liaWxpdHkiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eSI6MTp7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eQB2aXNpYmlsaXR5IjtzOjk6InByb3RlY3RlZCI7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhcmd1bWVudHMiO2E6Mjp7aTowO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQiOjU6e3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AG5hbWUiO3M6NToiY2xhc3MiO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AHR5cGUiO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xPYmplY3RfIjoxOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE9iamVjdF8AZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czoxNjoiXFJlZmxlY3Rpb25DbGFzcyI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjE1OiJSZWZsZWN0aW9uQ2xhc3MiO319czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAZGVmYXVsdCI7TjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABieVJlZmVyZW5jZSI7YjowO3M6NDk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGlzVmFyaWFkaWMiO2I6MDt9aToxO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQiOjU6e3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AG5hbWUiO3M6NDoicGF0aCI7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAdHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGRlZmF1bHQiO047czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAYnlSZWZlcmVuY2UiO2I6MDtzOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABpc1ZhcmlhZGljIjtiOjA7fX1zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAbG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjM0O3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjA7fXM6NDg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABlbmRMb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6MzQ4O3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjA7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAByZXR1cm5UeXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9czo1NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGhhc1JldHVybkJ5UmVmZXJlbmNlIjtiOjA7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAG1ldGFkYXRhIjthOjA6e319czo1NzoiXEpNU1xTZXJpYWxpemVyXE1ldGFkYXRhXERyaXZlclxYbWxEcml2ZXI6OmdldEV4dGVuc2lvbigpIjtPOjM1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZCI6MTI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABkb2NCbG9jayI7TjtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo1NzoiXEpNU1xTZXJpYWxpemVyXE1ldGFkYXRhXERyaXZlclxYbWxEcml2ZXI6OmdldEV4dGVuc2lvbigpIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6MTI6ImdldEV4dGVuc2lvbiI7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhYnN0cmFjdCI7YjowO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmaW5hbCI7YjowO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABzdGF0aWMiO2I6MDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAdmlzaWJpbGl0eSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5IjoxOntzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5AHZpc2liaWxpdHkiO3M6OToicHJvdGVjdGVkIjt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFyZ3VtZW50cyI7YTowOnt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTozNTA7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo0ODoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGVuZExvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTozNTM7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHJldHVyblR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e31zOjU3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAaGFzUmV0dXJuQnlSZWZlcmVuY2UiO2I6MDtzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAbWV0YWRhdGEiO2E6MDp7fX19czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAHVzZWRUcmFpdHMiO2E6MDp7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6MzI7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo0ODoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAGVuZExvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTozNTQ7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAG1ldGFkYXRhIjthOjA6e319fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW50ZXJmYWNlcyI7YTowOnt9czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQB0cmFpdHMiO2E6MDp7fXM6NDA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAZW51bXMiO2E6MDp7fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAbWV0YWRhdGEiO2E6MDp7fX0=";