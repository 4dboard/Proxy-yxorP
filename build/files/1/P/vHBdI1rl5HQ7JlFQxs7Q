1687719710
waR3U4bTeM%3Abd45051806d3813f342b3dc93c93cf42-c42b5ce1e7632aca1c2975bd66407390
s:25740:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxNDp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6ImM0MmI1Y2UxZTc2MzJhY2ExYzI5NzViZDY2NDA3MzkwIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6MTg6IkltYWdlVmFsaWRhdG9yLnBocCI7czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBwYXRoIjtzOjU1OiJ2ZW5kb3Ivc3ltZm9ueS92YWxpZGF0b3IvQ29uc3RyYWludHMvSW1hZ2VWYWxpZGF0b3IucGhwIjtzOjQxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHNvdXJjZSI7czoxMTM1MjoiPD9waHAKCi8qCiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHRoZSBTeW1mb255IHBhY2thZ2UuCiAqCiAqIChjKSBGYWJpZW4gUG90ZW5jaWVyIDxmYWJpZW5Ac3ltZm9ueS5jb20+CiAqCiAqIEZvciB0aGUgZnVsbCBjb3B5cmlnaHQgYW5kIGxpY2Vuc2UgaW5mb3JtYXRpb24sIHBsZWFzZSB2aWV3IHRoZSBMSUNFTlNFCiAqIGZpbGUgdGhhdCB3YXMgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHNvdXJjZSBjb2RlLgogKi8KCm5hbWVzcGFjZSBTeW1mb255XENvbXBvbmVudFxWYWxpZGF0b3JcQ29uc3RyYWludHM7Cgp1c2UgU3ltZm9ueVxDb21wb25lbnRcVmFsaWRhdG9yXENvbnN0cmFpbnQ7CnVzZSBTeW1mb255XENvbXBvbmVudFxWYWxpZGF0b3JcQ29udGV4dFxFeGVjdXRpb25Db250ZXh0SW50ZXJmYWNlOwp1c2UgU3ltZm9ueVxDb21wb25lbnRcVmFsaWRhdG9yXEV4Y2VwdGlvblxDb25zdHJhaW50RGVmaW5pdGlvbkV4Y2VwdGlvbjsKdXNlIFN5bWZvbnlcQ29tcG9uZW50XFZhbGlkYXRvclxFeGNlcHRpb25cVW5leHBlY3RlZFR5cGVFeGNlcHRpb247CgovKioKICogVmFsaWRhdGVzIHdoZXRoZXIgYSB2YWx1ZSBpcyBhIHZhbGlkIGltYWdlIGZpbGUgYW5kIGlzIHZhbGlkCiAqIGFnYWluc3QgbWluV2lkdGgsIG1heFdpZHRoLCBtaW5IZWlnaHQgYW5kIG1heEhlaWdodCBjb25zdHJhaW50cy4KICoKICogQGF1dGhvciBCZW5qYW1pbiBEdWxhdSA8YmVuamFtaW4uZHVsYXVAZ21haWwuY29tPgogKiBAYXV0aG9yIEJlcm5oYXJkIFNjaHVzc2VrIDxic2NodXNzZWtAZ21haWwuY29tPgogKi8KY2xhc3MgSW1hZ2VWYWxpZGF0b3IgZXh0ZW5kcyBGaWxlVmFsaWRhdG9yCnsKICAgIC8qKgogICAgICoge0Bpbmhlcml0ZG9jfQogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gdmFsaWRhdGUoJHZhbHVlLCBDb25zdHJhaW50ICRjb25zdHJhaW50KQogICAgewogICAgICAgIGlmICghJGNvbnN0cmFpbnQgaW5zdGFuY2VvZiBJbWFnZSkgewogICAgICAgICAgICB0aHJvdyBuZXcgVW5leHBlY3RlZFR5cGVFeGNlcHRpb24oJGNvbnN0cmFpbnQsIF9fTkFNRVNQQUNFX18uJ1xJbWFnZScpOwogICAgICAgIH0KCiAgICAgICAgJHZpb2xhdGlvbnMgPSBcY291bnQoJHRoaXMtPmNvbnRleHQtPmdldFZpb2xhdGlvbnMoKSk7CgogICAgICAgIHBhcmVudDo6dmFsaWRhdGUoJHZhbHVlLCAkY29uc3RyYWludCk7CgogICAgICAgICRmYWlsZWQgPSBcY291bnQoJHRoaXMtPmNvbnRleHQtPmdldFZpb2xhdGlvbnMoKSkgIT09ICR2aW9sYXRpb25zOwoKICAgICAgICBpZiAoJGZhaWxlZCB8fCBudWxsID09PSAkdmFsdWUgfHwgJycgPT09ICR2YWx1ZSkgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICBpZiAobnVsbCA9PT0gJGNvbnN0cmFpbnQtPm1pbldpZHRoICYmIG51bGwgPT09ICRjb25zdHJhaW50LT5tYXhXaWR0aAogICAgICAgICAgICAmJiBudWxsID09PSAkY29uc3RyYWludC0+bWluSGVpZ2h0ICYmIG51bGwgPT09ICRjb25zdHJhaW50LT5tYXhIZWlnaHQKICAgICAgICAgICAgJiYgbnVsbCA9PT0gJGNvbnN0cmFpbnQtPm1pblJhdGlvICYmIG51bGwgPT09ICRjb25zdHJhaW50LT5tYXhSYXRpbwogICAgICAgICAgICAmJiAkY29uc3RyYWludC0+YWxsb3dTcXVhcmUgJiYgJGNvbnN0cmFpbnQtPmFsbG93TGFuZHNjYXBlICYmICRjb25zdHJhaW50LT5hbGxvd1BvcnRyYWl0KSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgICRzaXplID0gQGdldGltYWdlc2l6ZSgkdmFsdWUpOwoKICAgICAgICBpZiAoZW1wdHkoJHNpemUpIHx8ICgwID09PSAkc2l6ZVswXSkgfHwgKDAgPT09ICRzaXplWzFdKSkgewogICAgICAgICAgICBpZiAoJHRoaXMtPmNvbnRleHQgaW5zdGFuY2VvZiBFeGVjdXRpb25Db250ZXh0SW50ZXJmYWNlKSB7CiAgICAgICAgICAgICAgICAkdGhpcy0+Y29udGV4dC0+YnVpbGRWaW9sYXRpb24oJGNvbnN0cmFpbnQtPnNpemVOb3REZXRlY3RlZE1lc3NhZ2UpCiAgICAgICAgICAgICAgICAgICAgLT5zZXRDb2RlKEltYWdlOjpTSVpFX05PVF9ERVRFQ1RFRF9FUlJPUikKICAgICAgICAgICAgICAgICAgICAtPmFkZFZpb2xhdGlvbigpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgJHRoaXMtPmJ1aWxkVmlvbGF0aW9uKCRjb25zdHJhaW50LT5zaXplTm90RGV0ZWN0ZWRNZXNzYWdlKQogICAgICAgICAgICAgICAgICAgIC0+c2V0Q29kZShJbWFnZTo6U0laRV9OT1RfREVURUNURURfRVJST1IpCiAgICAgICAgICAgICAgICAgICAgLT5hZGRWaW9sYXRpb24oKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgJHdpZHRoID0gJHNpemVbMF07CiAgICAgICAgJGhlaWdodCA9ICRzaXplWzFdOwoKICAgICAgICBpZiAoJGNvbnN0cmFpbnQtPm1pbldpZHRoKSB7CiAgICAgICAgICAgIGlmICghY3R5cGVfZGlnaXQoKHN0cmluZykgJGNvbnN0cmFpbnQtPm1pbldpZHRoKSkgewogICAgICAgICAgICAgICAgdGhyb3cgbmV3IENvbnN0cmFpbnREZWZpbml0aW9uRXhjZXB0aW9uKHNwcmludGYoJyIlcyIgaXMgbm90IGEgdmFsaWQgbWluaW11bSB3aWR0aCcsICRjb25zdHJhaW50LT5taW5XaWR0aCkpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoJHdpZHRoIDwgJGNvbnN0cmFpbnQtPm1pbldpZHRoKSB7CiAgICAgICAgICAgICAgICBpZiAoJHRoaXMtPmNvbnRleHQgaW5zdGFuY2VvZiBFeGVjdXRpb25Db250ZXh0SW50ZXJmYWNlKSB7CiAgICAgICAgICAgICAgICAgICAgJHRoaXMtPmNvbnRleHQtPmJ1aWxkVmlvbGF0aW9uKCRjb25zdHJhaW50LT5taW5XaWR0aE1lc3NhZ2UpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+c2V0UGFyYW1ldGVyKCd7eyB3aWR0aCB9fScsICR3aWR0aCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5zZXRQYXJhbWV0ZXIoJ3t7IG1pbl93aWR0aCB9fScsICRjb25zdHJhaW50LT5taW5XaWR0aCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5zZXRDb2RlKEltYWdlOjpUT09fTkFSUk9XX0VSUk9SKQogICAgICAgICAgICAgICAgICAgICAgICAtPmFkZFZpb2xhdGlvbigpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkdGhpcy0+YnVpbGRWaW9sYXRpb24oJGNvbnN0cmFpbnQtPm1pbldpZHRoTWVzc2FnZSkKICAgICAgICAgICAgICAgICAgICAgICAgLT5zZXRQYXJhbWV0ZXIoJ3t7IHdpZHRoIH19JywgJHdpZHRoKQogICAgICAgICAgICAgICAgICAgICAgICAtPnNldFBhcmFtZXRlcigne3sgbWluX3dpZHRoIH19JywgJGNvbnN0cmFpbnQtPm1pbldpZHRoKQogICAgICAgICAgICAgICAgICAgICAgICAtPnNldENvZGUoSW1hZ2U6OlRPT19OQVJST1dfRVJST1IpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+YWRkVmlvbGF0aW9uKCk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAoJGNvbnN0cmFpbnQtPm1heFdpZHRoKSB7CiAgICAgICAgICAgIGlmICghY3R5cGVfZGlnaXQoKHN0cmluZykgJGNvbnN0cmFpbnQtPm1heFdpZHRoKSkgewogICAgICAgICAgICAgICAgdGhyb3cgbmV3IENvbnN0cmFpbnREZWZpbml0aW9uRXhjZXB0aW9uKHNwcmludGYoJyIlcyIgaXMgbm90IGEgdmFsaWQgbWF4aW11bSB3aWR0aCcsICRjb25zdHJhaW50LT5tYXhXaWR0aCkpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoJHdpZHRoID4gJGNvbnN0cmFpbnQtPm1heFdpZHRoKSB7CiAgICAgICAgICAgICAgICBpZiAoJHRoaXMtPmNvbnRleHQgaW5zdGFuY2VvZiBFeGVjdXRpb25Db250ZXh0SW50ZXJmYWNlKSB7CiAgICAgICAgICAgICAgICAgICAgJHRoaXMtPmNvbnRleHQtPmJ1aWxkVmlvbGF0aW9uKCRjb25zdHJhaW50LT5tYXhXaWR0aE1lc3NhZ2UpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+c2V0UGFyYW1ldGVyKCd7eyB3aWR0aCB9fScsICR3aWR0aCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5zZXRQYXJhbWV0ZXIoJ3t7IG1heF93aWR0aCB9fScsICRjb25zdHJhaW50LT5tYXhXaWR0aCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5zZXRDb2RlKEltYWdlOjpUT09fV0lERV9FUlJPUikKICAgICAgICAgICAgICAgICAgICAgICAgLT5hZGRWaW9sYXRpb24oKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgJHRoaXMtPmJ1aWxkVmlvbGF0aW9uKCRjb25zdHJhaW50LT5tYXhXaWR0aE1lc3NhZ2UpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+c2V0UGFyYW1ldGVyKCd7eyB3aWR0aCB9fScsICR3aWR0aCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5zZXRQYXJhbWV0ZXIoJ3t7IG1heF93aWR0aCB9fScsICRjb25zdHJhaW50LT5tYXhXaWR0aCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5zZXRDb2RlKEltYWdlOjpUT09fV0lERV9FUlJPUikKICAgICAgICAgICAgICAgICAgICAgICAgLT5hZGRWaW9sYXRpb24oKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmICgkY29uc3RyYWludC0+bWluSGVpZ2h0KSB7CiAgICAgICAgICAgIGlmICghY3R5cGVfZGlnaXQoKHN0cmluZykgJGNvbnN0cmFpbnQtPm1pbkhlaWdodCkpIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBDb25zdHJhaW50RGVmaW5pdGlvbkV4Y2VwdGlvbihzcHJpbnRmKCciJXMiIGlzIG5vdCBhIHZhbGlkIG1pbmltdW0gaGVpZ2h0JywgJGNvbnN0cmFpbnQtPm1pbkhlaWdodCkpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoJGhlaWdodCA8ICRjb25zdHJhaW50LT5taW5IZWlnaHQpIHsKICAgICAgICAgICAgICAgIGlmICgkdGhpcy0+Y29udGV4dCBpbnN0YW5jZW9mIEV4ZWN1dGlvbkNvbnRleHRJbnRlcmZhY2UpIHsKICAgICAgICAgICAgICAgICAgICAkdGhpcy0+Y29udGV4dC0+YnVpbGRWaW9sYXRpb24oJGNvbnN0cmFpbnQtPm1pbkhlaWdodE1lc3NhZ2UpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+c2V0UGFyYW1ldGVyKCd7eyBoZWlnaHQgfX0nLCAkaGVpZ2h0KQogICAgICAgICAgICAgICAgICAgICAgICAtPnNldFBhcmFtZXRlcigne3sgbWluX2hlaWdodCB9fScsICRjb25zdHJhaW50LT5taW5IZWlnaHQpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+c2V0Q29kZShJbWFnZTo6VE9PX0xPV19FUlJPUikKICAgICAgICAgICAgICAgICAgICAgICAgLT5hZGRWaW9sYXRpb24oKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgJHRoaXMtPmJ1aWxkVmlvbGF0aW9uKCRjb25zdHJhaW50LT5taW5IZWlnaHRNZXNzYWdlKQogICAgICAgICAgICAgICAgICAgICAgICAtPnNldFBhcmFtZXRlcigne3sgaGVpZ2h0IH19JywgJGhlaWdodCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5zZXRQYXJhbWV0ZXIoJ3t7IG1pbl9oZWlnaHQgfX0nLCAkY29uc3RyYWludC0+bWluSGVpZ2h0KQogICAgICAgICAgICAgICAgICAgICAgICAtPnNldENvZGUoSW1hZ2U6OlRPT19MT1dfRVJST1IpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+YWRkVmlvbGF0aW9uKCk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAoJGNvbnN0cmFpbnQtPm1heEhlaWdodCkgewogICAgICAgICAgICBpZiAoIWN0eXBlX2RpZ2l0KChzdHJpbmcpICRjb25zdHJhaW50LT5tYXhIZWlnaHQpKSB7CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQ29uc3RyYWludERlZmluaXRpb25FeGNlcHRpb24oc3ByaW50ZignIiVzIiBpcyBub3QgYSB2YWxpZCBtYXhpbXVtIGhlaWdodCcsICRjb25zdHJhaW50LT5tYXhIZWlnaHQpKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCRoZWlnaHQgPiAkY29uc3RyYWludC0+bWF4SGVpZ2h0KSB7CiAgICAgICAgICAgICAgICBpZiAoJHRoaXMtPmNvbnRleHQgaW5zdGFuY2VvZiBFeGVjdXRpb25Db250ZXh0SW50ZXJmYWNlKSB7CiAgICAgICAgICAgICAgICAgICAgJHRoaXMtPmNvbnRleHQtPmJ1aWxkVmlvbGF0aW9uKCRjb25zdHJhaW50LT5tYXhIZWlnaHRNZXNzYWdlKQogICAgICAgICAgICAgICAgICAgICAgICAtPnNldFBhcmFtZXRlcigne3sgaGVpZ2h0IH19JywgJGhlaWdodCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5zZXRQYXJhbWV0ZXIoJ3t7IG1heF9oZWlnaHQgfX0nLCAkY29uc3RyYWludC0+bWF4SGVpZ2h0KQogICAgICAgICAgICAgICAgICAgICAgICAtPnNldENvZGUoSW1hZ2U6OlRPT19ISUdIX0VSUk9SKQogICAgICAgICAgICAgICAgICAgICAgICAtPmFkZFZpb2xhdGlvbigpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkdGhpcy0+YnVpbGRWaW9sYXRpb24oJGNvbnN0cmFpbnQtPm1heEhlaWdodE1lc3NhZ2UpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+c2V0UGFyYW1ldGVyKCd7eyBoZWlnaHQgfX0nLCAkaGVpZ2h0KQogICAgICAgICAgICAgICAgICAgICAgICAtPnNldFBhcmFtZXRlcigne3sgbWF4X2hlaWdodCB9fScsICRjb25zdHJhaW50LT5tYXhIZWlnaHQpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+c2V0Q29kZShJbWFnZTo6VE9PX0hJR0hfRVJST1IpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+YWRkVmlvbGF0aW9uKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgICRyYXRpbyA9IHJvdW5kKCR3aWR0aCAvICRoZWlnaHQsIDIpOwoKICAgICAgICBpZiAobnVsbCAhPT0gJGNvbnN0cmFpbnQtPm1pblJhdGlvKSB7CiAgICAgICAgICAgIGlmICghaXNfbnVtZXJpYygoc3RyaW5nKSAkY29uc3RyYWludC0+bWluUmF0aW8pKSB7CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQ29uc3RyYWludERlZmluaXRpb25FeGNlcHRpb24oc3ByaW50ZignIiVzIiBpcyBub3QgYSB2YWxpZCBtaW5pbXVtIHJhdGlvJywgJGNvbnN0cmFpbnQtPm1pblJhdGlvKSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICgkcmF0aW8gPCAkY29uc3RyYWludC0+bWluUmF0aW8pIHsKICAgICAgICAgICAgICAgIGlmICgkdGhpcy0+Y29udGV4dCBpbnN0YW5jZW9mIEV4ZWN1dGlvbkNvbnRleHRJbnRlcmZhY2UpIHsKICAgICAgICAgICAgICAgICAgICAkdGhpcy0+Y29udGV4dC0+YnVpbGRWaW9sYXRpb24oJGNvbnN0cmFpbnQtPm1pblJhdGlvTWVzc2FnZSkKICAgICAgICAgICAgICAgICAgICAgICAgLT5zZXRQYXJhbWV0ZXIoJ3t7IHJhdGlvIH19JywgJHJhdGlvKQogICAgICAgICAgICAgICAgICAgICAgICAtPnNldFBhcmFtZXRlcigne3sgbWluX3JhdGlvIH19JywgJGNvbnN0cmFpbnQtPm1pblJhdGlvKQogICAgICAgICAgICAgICAgICAgICAgICAtPnNldENvZGUoSW1hZ2U6OlJBVElPX1RPT19TTUFMTF9FUlJPUikKICAgICAgICAgICAgICAgICAgICAgICAgLT5hZGRWaW9sYXRpb24oKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgJHRoaXMtPmJ1aWxkVmlvbGF0aW9uKCRjb25zdHJhaW50LT5taW5SYXRpb01lc3NhZ2UpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+c2V0UGFyYW1ldGVyKCd7eyByYXRpbyB9fScsICRyYXRpbykKICAgICAgICAgICAgICAgICAgICAgICAgLT5zZXRQYXJhbWV0ZXIoJ3t7IG1pbl9yYXRpbyB9fScsICRjb25zdHJhaW50LT5taW5SYXRpbykKICAgICAgICAgICAgICAgICAgICAgICAgLT5zZXRDb2RlKEltYWdlOjpSQVRJT19UT09fU01BTExfRVJST1IpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+YWRkVmlvbGF0aW9uKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmIChudWxsICE9PSAkY29uc3RyYWludC0+bWF4UmF0aW8pIHsKICAgICAgICAgICAgaWYgKCFpc19udW1lcmljKChzdHJpbmcpICRjb25zdHJhaW50LT5tYXhSYXRpbykpIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBDb25zdHJhaW50RGVmaW5pdGlvbkV4Y2VwdGlvbihzcHJpbnRmKCciJXMiIGlzIG5vdCBhIHZhbGlkIG1heGltdW0gcmF0aW8nLCAkY29uc3RyYWludC0+bWF4UmF0aW8pKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCRyYXRpbyA+ICRjb25zdHJhaW50LT5tYXhSYXRpbykgewogICAgICAgICAgICAgICAgaWYgKCR0aGlzLT5jb250ZXh0IGluc3RhbmNlb2YgRXhlY3V0aW9uQ29udGV4dEludGVyZmFjZSkgewogICAgICAgICAgICAgICAgICAgICR0aGlzLT5jb250ZXh0LT5idWlsZFZpb2xhdGlvbigkY29uc3RyYWludC0+bWF4UmF0aW9NZXNzYWdlKQogICAgICAgICAgICAgICAgICAgICAgICAtPnNldFBhcmFtZXRlcigne3sgcmF0aW8gfX0nLCAkcmF0aW8pCiAgICAgICAgICAgICAgICAgICAgICAgIC0+c2V0UGFyYW1ldGVyKCd7eyBtYXhfcmF0aW8gfX0nLCAkY29uc3RyYWludC0+bWF4UmF0aW8pCiAgICAgICAgICAgICAgICAgICAgICAgIC0+c2V0Q29kZShJbWFnZTo6UkFUSU9fVE9PX0JJR19FUlJPUikKICAgICAgICAgICAgICAgICAgICAgICAgLT5hZGRWaW9sYXRpb24oKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgJHRoaXMtPmJ1aWxkVmlvbGF0aW9uKCRjb25zdHJhaW50LT5tYXhSYXRpb01lc3NhZ2UpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+c2V0UGFyYW1ldGVyKCd7eyByYXRpbyB9fScsICRyYXRpbykKICAgICAgICAgICAgICAgICAgICAgICAgLT5zZXRQYXJhbWV0ZXIoJ3t7IG1heF9yYXRpbyB9fScsICRjb25zdHJhaW50LT5tYXhSYXRpbykKICAgICAgICAgICAgICAgICAgICAgICAgLT5zZXRDb2RlKEltYWdlOjpSQVRJT19UT09fQklHX0VSUk9SKQogICAgICAgICAgICAgICAgICAgICAgICAtPmFkZFZpb2xhdGlvbigpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAoISRjb25zdHJhaW50LT5hbGxvd1NxdWFyZSAmJiAkd2lkdGggPT0gJGhlaWdodCkgewogICAgICAgICAgICBpZiAoJHRoaXMtPmNvbnRleHQgaW5zdGFuY2VvZiBFeGVjdXRpb25Db250ZXh0SW50ZXJmYWNlKSB7CiAgICAgICAgICAgICAgICAkdGhpcy0+Y29udGV4dC0+YnVpbGRWaW9sYXRpb24oJGNvbnN0cmFpbnQtPmFsbG93U3F1YXJlTWVzc2FnZSkKICAgICAgICAgICAgICAgICAgICAtPnNldFBhcmFtZXRlcigne3sgd2lkdGggfX0nLCAkd2lkdGgpCiAgICAgICAgICAgICAgICAgICAgLT5zZXRQYXJhbWV0ZXIoJ3t7IGhlaWdodCB9fScsICRoZWlnaHQpCiAgICAgICAgICAgICAgICAgICAgLT5zZXRDb2RlKEltYWdlOjpTUVVBUkVfTk9UX0FMTE9XRURfRVJST1IpCiAgICAgICAgICAgICAgICAgICAgLT5hZGRWaW9sYXRpb24oKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICR0aGlzLT5idWlsZFZpb2xhdGlvbigkY29uc3RyYWludC0+YWxsb3dTcXVhcmVNZXNzYWdlKQogICAgICAgICAgICAgICAgICAgIC0+c2V0UGFyYW1ldGVyKCd7eyB3aWR0aCB9fScsICR3aWR0aCkKICAgICAgICAgICAgICAgICAgICAtPnNldFBhcmFtZXRlcigne3sgaGVpZ2h0IH19JywgJGhlaWdodCkKICAgICAgICAgICAgICAgICAgICAtPnNldENvZGUoSW1hZ2U6OlNRVUFSRV9OT1RfQUxMT1dFRF9FUlJPUikKICAgICAgICAgICAgICAgICAgICAtPmFkZFZpb2xhdGlvbigpOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAoISRjb25zdHJhaW50LT5hbGxvd0xhbmRzY2FwZSAmJiAkd2lkdGggPiAkaGVpZ2h0KSB7CiAgICAgICAgICAgIGlmICgkdGhpcy0+Y29udGV4dCBpbnN0YW5jZW9mIEV4ZWN1dGlvbkNvbnRleHRJbnRlcmZhY2UpIHsKICAgICAgICAgICAgICAgICR0aGlzLT5jb250ZXh0LT5idWlsZFZpb2xhdGlvbigkY29uc3RyYWludC0+YWxsb3dMYW5kc2NhcGVNZXNzYWdlKQogICAgICAgICAgICAgICAgICAgIC0+c2V0UGFyYW1ldGVyKCd7eyB3aWR0aCB9fScsICR3aWR0aCkKICAgICAgICAgICAgICAgICAgICAtPnNldFBhcmFtZXRlcigne3sgaGVpZ2h0IH19JywgJGhlaWdodCkKICAgICAgICAgICAgICAgICAgICAtPnNldENvZGUoSW1hZ2U6OkxBTkRTQ0FQRV9OT1RfQUxMT1dFRF9FUlJPUikKICAgICAgICAgICAgICAgICAgICAtPmFkZFZpb2xhdGlvbigpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgJHRoaXMtPmJ1aWxkVmlvbGF0aW9uKCRjb25zdHJhaW50LT5hbGxvd0xhbmRzY2FwZU1lc3NhZ2UpCiAgICAgICAgICAgICAgICAgICAgLT5zZXRQYXJhbWV0ZXIoJ3t7IHdpZHRoIH19JywgJHdpZHRoKQogICAgICAgICAgICAgICAgICAgIC0+c2V0UGFyYW1ldGVyKCd7eyBoZWlnaHQgfX0nLCAkaGVpZ2h0KQogICAgICAgICAgICAgICAgICAgIC0+c2V0Q29kZShJbWFnZTo6TEFORFNDQVBFX05PVF9BTExPV0VEX0VSUk9SKQogICAgICAgICAgICAgICAgICAgIC0+YWRkVmlvbGF0aW9uKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmICghJGNvbnN0cmFpbnQtPmFsbG93UG9ydHJhaXQgJiYgJHdpZHRoIDwgJGhlaWdodCkgewogICAgICAgICAgICBpZiAoJHRoaXMtPmNvbnRleHQgaW5zdGFuY2VvZiBFeGVjdXRpb25Db250ZXh0SW50ZXJmYWNlKSB7CiAgICAgICAgICAgICAgICAkdGhpcy0+Y29udGV4dC0+YnVpbGRWaW9sYXRpb24oJGNvbnN0cmFpbnQtPmFsbG93UG9ydHJhaXRNZXNzYWdlKQogICAgICAgICAgICAgICAgICAgIC0+c2V0UGFyYW1ldGVyKCd7eyB3aWR0aCB9fScsICR3aWR0aCkKICAgICAgICAgICAgICAgICAgICAtPnNldFBhcmFtZXRlcigne3sgaGVpZ2h0IH19JywgJGhlaWdodCkKICAgICAgICAgICAgICAgICAgICAtPnNldENvZGUoSW1hZ2U6OlBPUlRSQUlUX05PVF9BTExPV0VEX0VSUk9SKQogICAgICAgICAgICAgICAgICAgIC0+YWRkVmlvbGF0aW9uKCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAkdGhpcy0+YnVpbGRWaW9sYXRpb24oJGNvbnN0cmFpbnQtPmFsbG93UG9ydHJhaXRNZXNzYWdlKQogICAgICAgICAgICAgICAgICAgIC0+c2V0UGFyYW1ldGVyKCd7eyB3aWR0aCB9fScsICR3aWR0aCkKICAgICAgICAgICAgICAgICAgICAtPnNldFBhcmFtZXRlcigne3sgaGVpZ2h0IH19JywgJGhlaWdodCkKICAgICAgICAgICAgICAgICAgICAtPnNldENvZGUoSW1hZ2U6OlBPUlRSQUlUX05PVF9BTExPV0VEX0VSUk9SKQogICAgICAgICAgICAgICAgICAgIC0+YWRkVmlvbGF0aW9uKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0KIjtzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWVzcGFjZXMiO2E6MTp7czo0MDoiXFN5bWZvbnlcQ29tcG9uZW50XFZhbGlkYXRvclxDb25zdHJhaW50cyI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjQwOiJcU3ltZm9ueVxDb21wb25lbnRcVmFsaWRhdG9yXENvbnN0cmFpbnRzIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6MTE6IkNvbnN0cmFpbnRzIjt9fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW5jbHVkZXMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAZnVuY3Rpb25zIjthOjA6e31zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNvbnN0YW50cyI7YTowOnt9czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBjbGFzc2VzIjthOjE6e3M6NTU6IlxTeW1mb255XENvbXBvbmVudFxWYWxpZGF0b3JcQ29uc3RyYWludHNcSW1hZ2VWYWxpZGF0b3IiO086MzU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfIjoxMzp7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6NTU6IlxTeW1mb255XENvbXBvbmVudFxWYWxpZGF0b3JcQ29uc3RyYWludHNcSW1hZ2VWYWxpZGF0b3IiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxNDoiSW1hZ2VWYWxpZGF0b3IiO31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18AZG9jQmxvY2siO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jayI6Nzp7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBzdW1tYXJ5IjtzOjEyNToiVmFsaWRhdGVzIHdoZXRoZXIgYSB2YWx1ZSBpcyBhIHZhbGlkIGltYWdlIGZpbGUgYW5kIGlzIHZhbGlkCmFnYWluc3QgbWluV2lkdGgsIG1heFdpZHRoLCBtaW5IZWlnaHQgYW5kIG1heEhlaWdodCBjb25zdHJhaW50cy4iO3M6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAZGVzY3JpcHRpb24iO086NDU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbiI6Mjp7czo1OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgBib2R5VGVtcGxhdGUiO3M6MDoiIjtzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uAHRhZ3MiO2E6MDp7fX1zOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAHRhZ3MiO2E6Mjp7aTowO086NDU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xUYWdzXEF1dGhvciI6NDp7czo3OiIAKgBuYW1lIjtzOjY6ImF1dGhvciI7czoxNDoiACoAZGVzY3JpcHRpb24iO047czo1NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xUYWdzXEF1dGhvcgBhdXRob3JOYW1lIjtzOjE0OiJCZW5qYW1pbiBEdWxhdSI7czo1ODoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xUYWdzXEF1dGhvcgBhdXRob3JFbWFpbCI7czoyNDoiYmVuamFtaW4uZHVsYXVAZ21haWwuY29tIjt9aToxO086NDU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xUYWdzXEF1dGhvciI6NDp7czo3OiIAKgBuYW1lIjtzOjY6ImF1dGhvciI7czoxNDoiACoAZGVzY3JpcHRpb24iO047czo1NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xUYWdzXEF1dGhvcgBhdXRob3JOYW1lIjtzOjE3OiJCZXJuaGFyZCBTY2h1c3NlayI7czo1ODoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xUYWdzXEF1dGhvcgBhdXRob3JFbWFpbCI7czoxOToiYnNjaHVzc2VrQGdtYWlsLmNvbSI7fX1zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGNvbnRleHQiO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xDb250ZXh0IjoyOntzOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXENvbnRleHQAbmFtZXNwYWNlIjtzOjM5OiJTeW1mb255XENvbXBvbmVudFxWYWxpZGF0b3JcQ29uc3RyYWludHMiO3M6NTY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQ29udGV4dABuYW1lc3BhY2VBbGlhc2VzIjthOjQ6e3M6MTA6IkNvbnN0cmFpbnQiO3M6Mzg6IlN5bWZvbnlcQ29tcG9uZW50XFZhbGlkYXRvclxDb25zdHJhaW50IjtzOjI1OiJFeGVjdXRpb25Db250ZXh0SW50ZXJmYWNlIjtzOjYxOiJTeW1mb255XENvbXBvbmVudFxWYWxpZGF0b3JcQ29udGV4dFxFeGVjdXRpb25Db250ZXh0SW50ZXJmYWNlIjtzOjI5OiJDb25zdHJhaW50RGVmaW5pdGlvbkV4Y2VwdGlvbiI7czo2NzoiU3ltZm9ueVxDb21wb25lbnRcVmFsaWRhdG9yXEV4Y2VwdGlvblxDb25zdHJhaW50RGVmaW5pdGlvbkV4Y2VwdGlvbiI7czoyMzoiVW5leHBlY3RlZFR5cGVFeGNlcHRpb24iO3M6NjE6IlN5bWZvbnlcQ29tcG9uZW50XFZhbGlkYXRvclxFeGNlcHRpb25cVW5leHBlY3RlZFR5cGVFeGNlcHRpb24iO319czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBsb2NhdGlvbiI7TjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGlzVGVtcGxhdGVTdGFydCI7YjowO3M6NDg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAaXNUZW1wbGF0ZUVuZCI7YjowO31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18AYWJzdHJhY3QiO2I6MDtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18AZmluYWwiO2I6MDtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18AcGFyZW50IjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6NTQ6IlxTeW1mb255XENvbXBvbmVudFxWYWxpZGF0b3JcQ29uc3RyYWludHNcRmlsZVZhbGlkYXRvciI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjEzOiJGaWxlVmFsaWRhdG9yIjt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAGltcGxlbWVudHMiO2E6MDp7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBjb25zdGFudHMiO2E6MDp7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBwcm9wZXJ0aWVzIjthOjA6e31zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18AbWV0aG9kcyI7YToxOntzOjY3OiJcU3ltZm9ueVxDb21wb25lbnRcVmFsaWRhdG9yXENvbnN0cmFpbnRzXEltYWdlVmFsaWRhdG9yOjp2YWxpZGF0ZSgpIjtPOjM1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZCI6MTI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABkb2NCbG9jayI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrIjo3OntzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAHN1bW1hcnkiO3M6MTM6IntAaW5oZXJpdGRvY30iO3M6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAZGVzY3JpcHRpb24iO086NDU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbiI6Mjp7czo1OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgBib2R5VGVtcGxhdGUiO3M6MDoiIjtzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uAHRhZ3MiO2E6MDp7fX1zOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAHRhZ3MiO2E6MDp7fXM6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAY29udGV4dCI7cjozNTtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGxvY2F0aW9uIjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAaXNUZW1wbGF0ZVN0YXJ0IjtiOjA7czo0ODoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBpc1RlbXBsYXRlRW5kIjtiOjA7fXM6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjY3OiJcU3ltZm9ueVxDb21wb25lbnRcVmFsaWRhdG9yXENvbnN0cmFpbnRzXEltYWdlVmFsaWRhdG9yOjp2YWxpZGF0ZSgpIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6ODoidmFsaWRhdGUiO31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYWJzdHJhY3QiO2I6MDtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZmluYWwiO2I6MDtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAc3RhdGljIjtiOjA7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHZpc2liaWxpdHkiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eSI6MTp7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eQB2aXNpYmlsaXR5IjtzOjY6InB1YmxpYyI7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhcmd1bWVudHMiO2E6Mjp7aTowO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQiOjU6e3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AG5hbWUiO3M6NToidmFsdWUiO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AHR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABkZWZhdWx0IjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO31pOjE7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAbmFtZSI7czoxMDoiY29uc3RyYWludCI7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAdHlwZSI7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE9iamVjdF8iOjE6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcT2JqZWN0XwBmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjM5OiJcU3ltZm9ueVxDb21wb25lbnRcVmFsaWRhdG9yXENvbnN0cmFpbnQiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxMDoiQ29uc3RyYWludCI7fX1zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABkZWZhdWx0IjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO319czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTozMTtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO31zOjQ4OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZW5kTG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjI2MDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAcmV0dXJuVHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fXM6NTc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABoYXNSZXR1cm5CeVJlZmVyZW5jZSI7YjowO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABtZXRhZGF0YSI7YTowOnt9fX1zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18AdXNlZFRyYWl0cyI7YTowOnt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aToyNjtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO31zOjQ4OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18AZW5kTG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjI2MTtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18AbWV0YWRhdGEiO2E6MDp7fX19czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBpbnRlcmZhY2VzIjthOjA6e31zOjQxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHRyYWl0cyI7YTowOnt9czo0MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBlbnVtcyI7YTowOnt9czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBtZXRhZGF0YSI7YTowOnt9fQ==";