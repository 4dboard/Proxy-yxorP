1688053738
waR3U4bTeM%3A79d09160fac26a8e2f8816143cac7191-975538b4b5ad8254a67a750c59059902
s:41336:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxNDp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6Ijk3NTUzOGI0YjVhZDgyNTRhNjdhNzUwYzU5MDU5OTAyIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6NTM6ImVudHJpZXMucGhwLjA4YWNiMDliYzU4ODBmOGI1ZGZiNGI0YjFjZTg5NDllLmxleHkucGhwIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHBhdGgiO3M6NzM6ImNvY2twaXQvc3RvcmFnZS90bXAvZW50cmllcy5waHAuMDhhY2IwOWJjNTg4MGY4YjVkZmI0YjRiMWNlODk0OWUubGV4eS5waHAiO3M6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAc291cmNlIjtzOjMwMDA1OiINCjxzdHlsZT4NCg0KLnVrLXNjcm9sbGFibGUtYm94IHsNCiAgICBib3JkZXI6IG5vbmU7DQogICAgcGFkZGluZy10b3A6IDA7DQogICAgcGFkZGluZy1sZWZ0OiAwOw0KfQ0KDQouY29sbGVjdGlvbi1ncmlkLWF2YXRhci1jb250YWluZXIgew0KICAgIGJvcmRlci10b3A6IDFweCByZ2JhKDAsMCwwLDAuMSkgc29saWQ7DQp9DQoNCi5jb2xsZWN0aW9uLWdyaWQtYXZhdGFyIHsNCiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7DQogICAgbWF4LXdpZHRoOiA0MHB4Ow0KICAgIG1heC1oZWlnaHQ6IDQwcHg7DQogICAgYm9yZGVyOiAxcHggI2ZmZiBzb2xpZDsNCiAgICBib3gtc2hhZG93OiAwIDAgNDBweCByZ2JhKDAsMCwwLDAuMyk7DQogICAgYm9yZGVyLXJhZGl1czogNTAlOw0KICAgIG1hcmdpbjogMCBhdXRvOw0KfQ0KDQouY29sbGVjdGlvbi1ncmlkLWF2YXRhciAudWstaWNvbi1zcGlubmVyIHsNCiAgICBkaXNwbGF5OiBub25lOw0KfQ0KDQo8L3N0eWxlPg0KDQoNCg0KPGRpdiBjbGFzcz0idWstbWFyZ2luLXRvcCIgcmlvdC12aWV3Pg0KDQogICAgPGRpdiBjbGFzcz0idWstbWFyZ2luIHVrLXRleHQtY2VudGVyIHVrLXRleHQtbXV0ZWQiIHNob3c9InsgKEFycmF5LmlzQXJyYXkoZW50cmllcykgJiYgZW50cmllcy5sZW5ndGgpIHx8IGZpbHRlcn0iPg0KDQogICAgICAgIDxpbWcgY2xhc3M9InVrLXN2Zy1hZGp1c3QiIHNyYz0iPD9waHAgZWNobyAkYXBwLT5wYXRoVG9VcmwoJGNvbGxlY3Rpb25bJ2ljb24nXSA/ICdhc3NldHM6YXBwL21lZGlhL2ljb25zLycuJGNvbGxlY3Rpb25bJ2ljb24nXTonY29sbGVjdGlvbnM6aWNvbi5zdmcnKTsgPz4iIHdpZHRoPSI1MCIgYWx0PSJpY29uIiBkYXRhLXVrLXN2Zz4NCiAgICAgICAgPD9waHAgaWYgKCRjb2xsZWN0aW9uWydkZXNjcmlwdGlvbiddKSB7ID8+DQogICAgICAgIDxkaXYgY2xhc3M9InVrLWNvbnRhaW5lci1jZW50ZXIgdWstbWFyZ2luLXRvcCB1ay13aWR0aC1tZWRpdW0tMS0yIj4NCiAgICAgICAgICAgIDw/cGhwIGVjaG8gIGh0bWxzcGVjaWFsY2hhcnMoJGNvbGxlY3Rpb25bJ2Rlc2NyaXB0aW9uJ10sIEVOVF9RVU9URVMsICdVVEYtOCcpIDsgPz4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDw/cGhwIH0gPz4NCiAgICA8L2Rpdj4NCg0KDQogICAgPGRpdj4NCg0KICAgICAgICA8ZGl2IGNsYXNzPSJ1ay13aWR0aC1tZWRpdW0tMS0zIHVrLXZpZXdwb3J0LWhlaWdodC0xLTIgdWstY29udGFpbmVyLWNlbnRlciB1ay10ZXh0LWNlbnRlciB1ay1mbGV4IHVrLWZsZXgtY2VudGVyIHVrLWZsZXgtbWlkZGxlIiBpZj0ieyBsb2FkaW5nIH0iPg0KDQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1ay1hbmltYXRpb24tZmFkZSB1ay10ZXh0LWNlbnRlciI+DQoNCiAgICAgICAgICAgICAgICA8Y3AtcHJlbG9hZGVyIGNsYXNzPSJ1ay1jb250YWluZXItY2VudGVyIj48L2NwLXByZWxvYWRlcj4NCg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgPGRpdiBjbGFzcz0idWstd2lkdGgtbWVkaXVtLTEtMyB1ay12aWV3cG9ydC1oZWlnaHQtMS0yIHVrLWNvbnRhaW5lci1jZW50ZXIgdWstdGV4dC1jZW50ZXIgdWstZmxleCB1ay1mbGV4LWNlbnRlciB1ay1mbGV4LW1pZGRsZSIgaWY9InsgIWxvYWRpbmcgJiYgIWVudHJpZXMubGVuZ3RoICYmICFmaWx0ZXIgfSI+DQoNCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InVrLWFuaW1hdGlvbi1zY2FsZSI+DQoNCiAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJ1ay1zdmctYWRqdXN0IiBzcmM9Ijw/cGhwIGVjaG8gJGFwcC0+cGF0aFRvVXJsKCRjb2xsZWN0aW9uWydpY29uJ10gPyAnYXNzZXRzOmFwcC9tZWRpYS9pY29ucy8nLiRjb2xsZWN0aW9uWydpY29uJ106J2NvbGxlY3Rpb25zOmljb24uc3ZnJyk7ID8+IiB3aWR0aD0iNTAiIGFsdD0iaWNvbiIgZGF0YS11ay1zdmc+DQogICAgICAgICAgICAgICAgPD9waHAgaWYgKCRjb2xsZWN0aW9uWydkZXNjcmlwdGlvbiddKSB7ID8+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idWstbWFyZ2luLXRvcCB1ay10ZXh0LXNtYWxsIHVrLXRleHQtbXV0ZWQiPg0KICAgICAgICAgICAgICAgICAgICA8P3BocCBlY2hvICBodG1sc3BlY2lhbGNoYXJzKCRjb2xsZWN0aW9uWydkZXNjcmlwdGlvbiddLCBFTlRfUVVPVEVTLCAnVVRGLTgnKSA7ID8+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPD9waHAgfSA/Pg0KICAgICAgICAgICAgICAgIDxocj4NCiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idWstdGV4dC1sYXJnZSI+PHN0cm9uZz48P3BocCBlY2hvICRhcHAoImkxOG4iKS0+Z2V0KCdObyBlbnRyaWVzJyk7ID8+Ljwvc3Ryb25nPiA8YSBocmVmPSI8P3BocCAkYXBwLT5yb3V0ZSgnL2NvbGxlY3Rpb25zL2VudHJ5LycuJGNvbGxlY3Rpb25bJ25hbWUnXSk7ID8+Ij48P3BocCBlY2hvICRhcHAoImkxOG4iKS0+Z2V0KCdDcmVhdGUgYW4gZW50cnknKTsgPz4uPC9hPjwvc3Bhbj4NCg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgPGRpdiBjbGFzcz0idWstY2xlYXJmaXggdWstbWFyZ2luLXRvcCIgc2hvdz0ieyAhbG9hZGluZyAmJiAoZW50cmllcy5sZW5ndGggfHwgZmlsdGVyKSB9Ij4NCg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0idWstZmxvYXQtbGVmdCI+DQoNCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1ay1idXR0b24tZ3JvdXAiPg0KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJ1ay1idXR0b24gdWstYnV0dG9uLWxhcmdlIHtsaXN0bW9kZT09J2xpc3QnICYmICd1ay1idXR0b24tcHJpbWFyeSd9IiBvbmNsaWNrPSJ7IHRvZ2dsZUxpc3RNb2RlIH0iPjxpIGNsYXNzPSJ1ay1pY29uLWxpc3QiPjwvaT48L2J1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0idWstYnV0dG9uIHVrLWJ1dHRvbi1sYXJnZSB7bGlzdG1vZGU9PSdncmlkJyAmJiAndWstYnV0dG9uLXByaW1hcnknfSIgb25jbGljaz0ieyB0b2dnbGVMaXN0TW9kZSB9Ij48aSBjbGFzcz0idWstaWNvbi10aCI+PC9pPjwvYnV0dG9uPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0idWstZmxvYXQtbGVmdCB1ay1mb3JtLXNlbGVjdCB1ay1tYXJnaW4tc21hbGwtbGVmdCIgaWY9InsgIWxvYWRpbmcgJiYgbGFuZ3VhZ2VzLmxlbmd0aCB9Ij4NCiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idWstYnV0dG9uIHVrLWJ1dHRvbi1sYXJnZSB1ay1idXR0b24tbGluayB7bGFuZyA/ICd1ay10ZXh0LXByaW1hcnknIDogJ3VrLXRleHQtbXV0ZWQnfSI+DQogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJ1ay1pY29uLWdsb2JlIj48L2k+DQogICAgICAgICAgICAgICAgICAgIHsgbGFuZyA/IF8uZmluZChsYW5ndWFnZXMseydjb2RlJzpsYW5nfSkubGFiZWwgOiBBcHAuJGRhdGEubGFuZ3VhZ2VEZWZhdWx0TGFiZWwgfQ0KICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICA8c2VsZWN0IG9uY2hhbmdlPSJ7Y2hhbmdlbGFuZ3VhZ2V9Ij4NCiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ie2xhbmcgPT09ICcnfSI+e0FwcC4kZGF0YS5sYW5ndWFnZURlZmF1bHRMYWJlbH08L29wdGlvbj4NCiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiBlYWNoPSJ7bGFuZ3VhZ2UsaWR4IGluIGxhbmd1YWdlc30iIHZhbHVlPSJ7bGFuZ3VhZ2UuY29kZX0iIHNlbGVjdGVkPSJ7bGFuZyA9PT0gbGFuZ3VhZ2UuY29kZX0iPntsYW5ndWFnZS5sYWJlbH08L29wdGlvbj4NCiAgICAgICAgICAgICAgICA8L3NlbGVjdD4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1ay1mbG9hdC1sZWZ0IHVrLXdpZHRoLTEtMiB1ay1tYXJnaW4tc21hbGwtbGVmdCI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idWstZm9ybS1pY29uIHVrLWZvcm0gdWstd2lkdGgtMS0xIHVrLXRleHQtbXV0ZWQiPg0KDQogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJ1ay1pY29uLXNlYXJjaCI+PC9pPg0KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9InVrLXdpZHRoLTEtMSB1ay1mb3JtLWxhcmdlIHVrLWZvcm0tYmxhbmsge2ZpbHRlciAmJiBmaWx0ZXIubWF0Y2goL1x7KC4qKVx9LykgJiYgJ3VrLXRleHQtbW9ub3NwYWNlJ30iIHR5cGU9InRleHQiIHJlZj0idHh0ZmlsdGVyIiBwbGFjZWhvbGRlcj0iPD9waHAgZWNobyAkYXBwKCJpMThuIiktPmdldCgnRmlsdGVyIGl0ZW1zLi4uJyk7ID8+IiBvbmNoYW5nZT0ieyB1cGRhdGVmaWx0ZXIgfSI+DQoNCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1ay1mbG9hdC1yaWdodCI+DQoNCiAgICAgICAgICAgICAgICA8P3BocCBpZiAoJGFwcC0+bW9kdWxlKCdjb2xsZWN0aW9ucycpLT5oYXNhY2Nlc3MoJGNvbGxlY3Rpb25bJ25hbWUnXSwgJ2VudHJpZXNfZWRpdCcpKSB7ID8+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idWstZGlzcGxheS1pbmxpbmUtYmxvY2sgdWstbWFyZ2luLXNtYWxsLXJpZ2h0IiBkYXRhLXVrLWRyb3Bkb3duPSJtb2RlOidjbGljayciIGlmPSJ7IHNlbGVjdGVkLmxlbmd0aCB9Ij4NCiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0idWstYnV0dG9uIHVrLWJ1dHRvbi1sYXJnZSB1ay1hbmltYXRpb24tZmFkZSI+PD9waHAgZWNobyAkYXBwKCJpMThuIiktPmdldCgnQmF0Y2ggQWN0aW9uJyk7ID8+IDxzcGFuIGNsYXNzPSJ1ay1iYWRnZSB1ay1iYWRnZS1jb250cmFzdCB1ay1tYXJnaW4tc21hbGwtbGVmdCI+eyBzZWxlY3RlZC5sZW5ndGggfTwvc3Bhbj48L2J1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idWstZHJvcGRvd24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ1ay1uYXYgdWstbmF2LWRyb3Bkb3duIHVrLWRyb3Bkb3duLWNsb3NlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InVrLW5hdi1oZWFkZXIiPjw/cGhwIGVjaG8gJGFwcCgiaTE4biIpLT5nZXQoJ0FjdGlvbnMnKTsgPz48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBvbmNsaWNrPSJ7IGJhdGNoZWRpdCB9Ij48P3BocCBlY2hvICRhcHAoImkxOG4iKS0+Z2V0KCdFZGl0Jyk7ID8+PC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAgaWYgKCRhcHAtPm1vZHVsZSgnY29sbGVjdGlvbnMnKS0+aGFzYWNjZXNzKCRjb2xsZWN0aW9uWyduYW1lJ10sICdlbnRyaWVzX2RlbGV0ZScpKSB7ID8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ1ay1uYXYtaXRlbS1kYW5nZXIiPjxhIG9uY2xpY2s9InsgcmVtb3Zlc2VsZWN0ZWQgfSI+PD9waHAgZWNobyAkYXBwKCJpMThuIiktPmdldCgnRGVsZXRlJyk7ID8+PC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAgfSA/Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPD9waHAgfSA/Pg0KDQogICAgICAgICAgICAgICAgPD9waHAgaWYgKCRhcHAtPm1vZHVsZSgnY29sbGVjdGlvbnMnKS0+aGFzYWNjZXNzKCRjb2xsZWN0aW9uWyduYW1lJ10sICdlbnRyaWVzX2NyZWF0ZScpKSB7ID8+DQogICAgICAgICAgICAgICAgPGEgY2xhc3M9InVrLWJ1dHRvbiB1ay1idXR0b24tbGFyZ2UgdWstYnV0dG9uLXByaW1hcnkiIGhyZWY9Ijw/cGhwICRhcHAtPnJvdXRlKCcvY29sbGVjdGlvbnMvZW50cnkvJy4kY29sbGVjdGlvblsnbmFtZSddKTsgPz4iPjw/cGhwIGVjaG8gJGFwcCgiaTE4biIpLT5nZXQoJ0FkZCBFbnRyeScpOyA/PjwvYT4NCiAgICAgICAgICAgICAgICA8P3BocCB9ID8+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgPGRpdiBjbGFzcz0idWstbWFyZ2luLXRvcCIgc2hvdz0ieyAhbG9hZGluZyAmJiAoZW50cmllcy5sZW5ndGggfHwgZmlsdGVyKSB9Ij4NCg0KICAgICAgICA8ZGl2IGNsYXNzPSJ1ay10ZXh0LXhsYXJnZSB1ay10ZXh0LW11dGVkIHVrLXZpZXdwb3J0LWhlaWdodC0xLTMgdWstZmxleCB1ay1mbGV4LWNlbnRlciB1ay1mbGV4LW1pZGRsZSIgaWY9InsgIWVudHJpZXMubGVuZ3RoICYmIGZpbHRlciAmJiAhbG9hZGluZyB9Ij4NCiAgICAgICAgICAgIDxkaXY+PD9waHAgZWNobyAkYXBwKCJpMThuIiktPmdldCgnTm8gZW50cmllcyBmb3VuZCcpOyA/PjwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCg0KDQogICAgICAgIDxkaXYgY2xhc3M9InVrLWdyaWQgdWstZ3JpZC1tYXRjaCB1ay1ncmlkLXdpZHRoLW1lZGl1bS0xLTQgdWstZmxleC1jZW50ZXIiIGlmPSJ7IGVudHJpZXMubGVuZ3RoICYmICFsb2FkaW5nICYmIGxpc3Rtb2RlPT0nZ3JpZCcgfSI+DQoNCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InVrLWdyaWQtbWFyZ2luIiBlYWNoPSJ7ZW50cnksaWR4IGluIGVudHJpZXN9Ij4NCg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVrLXBhbmVsIHVrLXBhbmVsLWJveCB1ay1wYW5lbC1jYXJkIHVrLXBhbmVsLWNhcmQtaG92ZXIiPg0KDQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVrLXBvc2l0aW9uLXJlbGF0aXZlIHVrLW5iZmMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGNhbnZhcyB3aWR0aD0iNDAwIiBoZWlnaHQ9IjI1MCI+PC9jYW52YXM+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1ay1wb3NpdGlvbi1jb3ZlciB1ay1mbGV4IHVrLWZsZXgtY2VudGVyIHVrLWZsZXgtbWlkZGxlIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjcC10aHVtYm5haWwgc3JjPSJ7IHBhcmVudC5pc0ltYWdlRmllbGQoZW50cnkpIH0iIHdpZHRoPSI0MDAiIGhlaWdodD0iMjUwIiBpZj0ieyBwYXJlbnQuaXNJbWFnZUZpZWxkKGVudHJ5KSB9Ij48L2NwLXRodW1ibmFpbD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVrLXN2Zy1hZGp1c3QgdWstdGV4dC1wcmltYXJ5IiBzdHlsZT0iY29sb3I6PD9waHAgZWNobyAgQCRjb2xsZWN0aW9uWydjb2xvciddIDsgPz4gIWltcG9ydGFudDsiIGlmPSJ7ICFwYXJlbnQuaXNJbWFnZUZpZWxkKGVudHJ5KSB9Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ijw/cGhwIGVjaG8gJGFwcC0+cGF0aFRvVXJsKCRjb2xsZWN0aW9uWydpY29uJ10gPyAnYXNzZXRzOmFwcC9tZWRpYS9pY29ucy8nLiRjb2xsZWN0aW9uWydpY29uJ106J2NvbGxlY3Rpb25zOmljb24uc3ZnJyk7ID8+IiB3aWR0aD0iODAiIGFsdD0iaWNvbiIgZGF0YS11ay1zdmc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJ1ay1wb3NpdGlvbi1jb3ZlciIgaHJlZj0iPD9waHAgJGFwcC0+cm91dGUoJy9jb2xsZWN0aW9ucy9lbnRyeS8nLiRjb2xsZWN0aW9uWyduYW1lJ10pOyA/Pi97IGVudHJ5Ll9pZCB9Ij48L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2xsZWN0aW9uLWdyaWQtYXZhdGFyLWNvbnRhaW5lciI+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2xsZWN0aW9uLWdyaWQtYXZhdGFyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y3AtYWNjb3VudCBhY2NvdW50PSJ7ZW50cnkuX21ieSB8fCBlbnRyeS5fYnl9IiBsYWJlbD0ie2ZhbHNlfSIgc2l6ZT0iNDAiIGlmPSJ7ZW50cnkuX21ieSB8fCBlbnRyeS5fYnl9Ij48L2NwLWFjY291bnQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNwLWdyYXZhdGFyIGFsdD0iPyIgc2l6ZT0iNDAiIGlmPSJ7IShlbnRyeS5fbWJ5IHx8IGVudHJ5Ll9ieSl9Ij48L2NwLWdyYXZhdGFyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1ay1mbGV4IHVrLWZsZXgtbWlkZGxlIHVrLW1hcmdpbi1zbWFsbC10b3AiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1ay1mbGV4LWl0ZW0tMSB1ay1tYXJnaW4tc21hbGwtcmlnaHQgdWstdGV4dC1zbWFsbCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InVrLXRleHQtc3VjY2VzcyB1ay1tYXJnaW4tc21hbGwtcmlnaHQiPnsgQXBwLlV0aWxzLmRhdGVmb3JtYXQoIG5ldyBEYXRlKCAxMDAwICogZW50cnkuX2NyZWF0ZWQgKSkgfTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idWstdGV4dC1wcmltYXJ5Ij57IEFwcC5VdGlscy5kYXRlZm9ybWF0KCBuZXcgRGF0ZSggMTAwMCAqIGVudHJ5Ll9tb2RpZmllZCApKSB9PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtdWstZHJvcGRvd249Im1vZGU6J2NsaWNrJywgcG9zOidib3R0b20tcmlnaHQnIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJ1ay1pY29uLWJhcnMiPjwvYT4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVrLWRyb3Bkb3duIHVrLWRyb3Bkb3duLWZsaXAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InVrLW5hdiB1ay1uYXYtZHJvcGRvd24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ1ay1uYXYtaGVhZGVyIj48P3BocCBlY2hvICRhcHAoImkxOG4iKS0+Z2V0KCdBY3Rpb25zJyk7ID8+PC9saT4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAgaWYgKCRhcHAtPm1vZHVsZSgnY29sbGVjdGlvbnMnKS0+aGFzYWNjZXNzKCRjb2xsZWN0aW9uWyduYW1lJ10sICdlbnRyaWVzX2VkaXQnKSkgeyA/Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ijw/cGhwICRhcHAtPnJvdXRlKCcvY29sbGVjdGlvbnMvZW50cnkvJy4kY29sbGVjdGlvblsnbmFtZSddKTsgPz4veyBlbnRyeS5faWQgfSI+PD9waHAgZWNobyAkYXBwKCJpMThuIiktPmdldCgnRWRpdCcpOyA/PjwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAgfSBlbHNlIHsgPz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSI8P3BocCAkYXBwLT5yb3V0ZSgnL2NvbGxlY3Rpb25zL2VudHJ5LycuJGNvbGxlY3Rpb25bJ25hbWUnXSk7ID8+L3sgZW50cnkuX2lkIH0iPjw/cGhwIGVjaG8gJGFwcCgiaTE4biIpLT5nZXQoJ1ZpZXcnKTsgPz48L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDw/cGhwIH0gPz4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAgaWYgKCRhcHAtPm1vZHVsZSgnY29sbGVjdGlvbnMnKS0+aGFzYWNjZXNzKCRjb2xsZWN0aW9uWyduYW1lJ10sICdlbnRyaWVzX2RlbGV0ZScpKSB7ID8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InVrLW5hdi1pdGVtLWRhbmdlciI+PGEgY2xhc3M9InVrLWRyb3Bkb3duLWNsb3NlIiBvbmNsaWNrPSJ7IHBhcmVudC5yZW1vdmUgfSI+PD9waHAgZWNobyAkYXBwKCJpMThuIiktPmdldCgnRGVsZXRlJyk7ID8+PC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8P3BocCB9ID8+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDw/cGhwIGlmICgkYXBwLT5tb2R1bGUoJ2NvbGxlY3Rpb25zJyktPmhhc2FjY2VzcygkY29sbGVjdGlvblsnbmFtZSddLCAnZW50cmllc19jcmVhdGUnKSkgeyA/Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ1ay1uYXYtZGl2aWRlciI+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBjbGFzcz0idWstZHJvcGRvd24tY2xvc2UiIG9uY2xpY2s9InsgcGFyZW50LmR1cGxpY2F0ZUVudHJ5IH0iPjw/cGhwIGVjaG8gJGFwcCgiaTE4biIpLT5nZXQoJ0R1cGxpY2F0ZScpOyA/PjwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAgfSA/Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1ay1tYXJnaW4tdG9wIHVrLXNjcm9sbGFibGUtYm94Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVrLW1hcmdpbi1zbWFsbC1ib3R0b20iIGVhY2g9IntmaWVsZCxpZHkgaW4gcGFyZW50LmZpZWxkc30iIGlmPSJ7IGZpZWxkLm5hbWUgIT0gJ19tb2RpZmllZCcgJiYgZmllbGQubmFtZSAhPSAnX2NyZWF0ZWQnIH0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ1ay10ZXh0LXNtYWxsIHVrLXRleHQtdXBwZXJjYXNlIHVrLXRleHQtbXV0ZWQiPnsgZmllbGQubGFiZWwgfHwgZmllbGQubmFtZSB9PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJ1ay1saW5rLW11dGVkIHVrLXRleHQtc21hbGwgdWstZGlzcGxheS1ibG9jayB1ay10ZXh0LXRydW5jYXRlIiBocmVmPSI8P3BocCAkYXBwLT5yb3V0ZSgnL2NvbGxlY3Rpb25zL2VudHJ5LycuJGNvbGxlY3Rpb25bJ25hbWUnXSk7ID8+L3sgcGFyZW50LmVudHJ5Ll9pZCB9Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJhdyBjb250ZW50PSJ7IEFwcC5VdGlscy5yZW5kZXJWYWx1ZShmaWVsZC50eXBlLCBwYXJlbnQuZW50cnlbZmllbGQubmFtZV0sIGZpZWxkLCBsYW5nKSB9IiBpZj0ie3BhcmVudC5lbnRyeVtmaWVsZC5uYW1lXSAhPT0gdW5kZWZpbmVkfSI+PC9yYXc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ1ay1pY29uLWV5ZS1zbGFzaCB1ay10ZXh0LW11dGVkIiBpZj0ie3BhcmVudC5lbnRyeVtmaWVsZC5uYW1lXSA9PT0gdW5kZWZpbmVkfSI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgIDwvZGl2Pg0KDQogICAgICAgIDxkaXYgY2xhc3M9InVrLW1hcmdpbi1sYXJnZS10b3AgdWstb3ZlcmZsb3ctY29udGFpbmVyIHVrLXZpZXdwb3J0LWhlaWdodC0xLTMiIGlmPSJ7IGVudHJpZXMubGVuZ3RoICYmICFsb2FkaW5nICYmIGxpc3Rtb2RlPT0nbGlzdCcgfSI+DQogICAgICAgICAgICA8dGFibGUgY2xhc3M9InVrLXRhYmxlIHVrLXRhYmxlLXRhYmJlZCB1ay10YWJsZS1zdHJpcGVkIj4NCiAgICAgICAgICAgICAgICA8dGhlYWQ+DQogICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0aCB3aWR0aD0iMjAiPjxpbnB1dCBjbGFzcz0idWstY2hlY2tib3giIHR5cGU9ImNoZWNrYm94IiBkYXRhLWNoZWNrPSJhbGwiPjwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGggd2lkdGg9IntmaWVsZC5uYW1lID09ICdfbW9kaWZpZWQnIHx8IGZpZWxkLm5hbWUgPT0gJ19jcmVhdGVkJyA/ICcxMDAnOicnfSIgY2xhc3M9InVrLXRleHQtc21hbGwiIGVhY2g9IntmaWVsZCxpZHggaW4gZmllbGRzfSI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0idWstbGluay1tdXRlZCB1ay1ub3NlbGVjdCB7IChwYXJlbnQuc29ydFtmaWVsZC5uYW1lXSB8fCBwYXJlbnQuc29ydFtmaWVsZC5uYW1lKycuZGlzcGxheSddKSA/ICd1ay10ZXh0LXByaW1hcnknOicnIH0iIG9uY2xpY2s9InsgcGFyZW50LnVwZGF0ZXNvcnQgfSIgZGF0YS1zb3J0PSJ7IGZpZWxkLm5hbWUgfSI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBmaWVsZC5sYWJlbCB8fCBmaWVsZC5uYW1lIH0NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZj0ieyhwYXJlbnQuc29ydFtmaWVsZC5uYW1lXSB8fCBwYXJlbnQuc29ydFtmaWVsZC5uYW1lKycuZGlzcGxheSddKX0iIGNsYXNzPSJ1ay1pY29uLWxvbmctYXJyb3cteyAocGFyZW50LnNvcnRbZmllbGQubmFtZV0gPT0gMSB8fCBwYXJlbnQuc29ydFtmaWVsZC5uYW1lKycuZGlzcGxheSddPT0xKSA/ICd1cCc6J2Rvd24nfSI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGggd2lkdGg9IjIwIj48L3RoPg0KICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgIDwvdGhlYWQ+DQogICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICA8dHIgZWFjaD0ie2VudHJ5LGlkeCBpbiBlbnRyaWVzfSI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PGlucHV0IGNsYXNzPSJ1ay1jaGVja2JveCIgdHlwZT0iY2hlY2tib3giIGRhdGEtY2hlY2sgZGF0YS1pZD0ieyBlbnRyeS5faWQgfSI+PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0idWstdGV4dC10cnVuY2F0ZSIgZWFjaD0ie2ZpZWxkLGlkeSBpbiBwYXJlbnQuZmllbGRzfSIgaWY9InsgZmllbGQubmFtZSAhPSAnX21vZGlmaWVkJyAmJiBmaWVsZC5uYW1lICE9ICdfY3JlYXRlZCcgfSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InVrLWxpbmstbXV0ZWQiIGhyZWY9Ijw/cGhwICRhcHAtPnJvdXRlKCcvY29sbGVjdGlvbnMvZW50cnkvJy4kY29sbGVjdGlvblsnbmFtZSddKTsgPz4veyBwYXJlbnQuZW50cnkuX2lkIH0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cmF3IGNvbnRlbnQ9InsgQXBwLlV0aWxzLnJlbmRlclZhbHVlKGZpZWxkLnR5cGUsIHBhcmVudC5lbnRyeVtmaWVsZC5uYW1lXSwgZmllbGQsIGxhbmcpIH0iIGlmPSJ7cGFyZW50LmVudHJ5W2ZpZWxkLm5hbWVdICE9PSB1bmRlZmluZWR9Ij48L3Jhdz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InVrLWljb24tZXllLXNsYXNoIHVrLXRleHQtbXV0ZWQiIGlmPSJ7cGFyZW50LmVudHJ5W2ZpZWxkLm5hbWVdID09PSB1bmRlZmluZWR9Ij48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48c3BhbiBjbGFzcz0idWstYmFkZ2UgdWstYmFkZ2Utb3V0bGluZSB1ay10ZXh0LW11dGVkIj57IEFwcC5VdGlscy5kYXRlZm9ybWF0KCBuZXcgRGF0ZSggMTAwMCAqIGVudHJ5Ll9jcmVhdGVkICkpIH08L3NwYW4+PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48c3BhbiBjbGFzcz0idWstYmFkZ2UgdWstYmFkZ2Utb3V0bGluZSB1ay10ZXh0LXByaW1hcnkiPnsgQXBwLlV0aWxzLmRhdGVmb3JtYXQoIG5ldyBEYXRlKCAxMDAwICogZW50cnkuX21vZGlmaWVkICkpIH08L3NwYW4+PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLXVrLWRyb3Bkb3duPSJtb2RlOidjbGljayciPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJ1ay1pY29uLWJhcnMiPjwvYT4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1ay1kcm9wZG93biB1ay1kcm9wZG93bi1mbGlwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idWstbmF2IHVrLW5hdi1kcm9wZG93biI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ1ay1uYXYtaGVhZGVyIj48P3BocCBlY2hvICRhcHAoImkxOG4iKS0+Z2V0KCdBY3Rpb25zJyk7ID8+PC9saT4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDw/cGhwIGlmICgkYXBwLT5tb2R1bGUoJ2NvbGxlY3Rpb25zJyktPmhhc2FjY2VzcygkY29sbGVjdGlvblsnbmFtZSddLCAnZW50cmllc19lZGl0JykpIHsgPz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iPD9waHAgJGFwcC0+cm91dGUoJy9jb2xsZWN0aW9ucy9lbnRyeS8nLiRjb2xsZWN0aW9uWyduYW1lJ10pOyA/Pi97IGVudHJ5Ll9pZCB9Ij48P3BocCBlY2hvICRhcHAoImkxOG4iKS0+Z2V0KCdFZGl0Jyk7ID8+PC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAgfSBlbHNlIHsgPz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iPD9waHAgJGFwcC0+cm91dGUoJy9jb2xsZWN0aW9ucy9lbnRyeS8nLiRjb2xsZWN0aW9uWyduYW1lJ10pOyA/Pi97IGVudHJ5Ll9pZCB9Ij48P3BocCBlY2hvICRhcHAoImkxOG4iKS0+Z2V0KCdWaWV3Jyk7ID8+PC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAgfSA/Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAgaWYgKCRhcHAtPm1vZHVsZSgnY29sbGVjdGlvbnMnKS0+aGFzYWNjZXNzKCRjb2xsZWN0aW9uWyduYW1lJ10sICdlbnRyaWVzX2RlbGV0ZScpKSB7ID8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ1ay1uYXYtaXRlbS1kYW5nZXIiPjxhIGNsYXNzPSJ1ay1kcm9wZG93bi1jbG9zZSIgb25jbGljaz0ieyBwYXJlbnQucmVtb3ZlIH0iPjw/cGhwIGVjaG8gJGFwcCgiaTE4biIpLT5nZXQoJ0RlbGV0ZScpOyA/PjwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDw/cGhwIH0gPz4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDw/cGhwIGlmICgkYXBwLT5tb2R1bGUoJ2NvbGxlY3Rpb25zJyktPmhhc2FjY2VzcygkY29sbGVjdGlvblsnbmFtZSddLCAnZW50cmllc19jcmVhdGUnKSkgeyA/Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idWstbmF2LWRpdmlkZXIiPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGNsYXNzPSJ1ay1kcm9wZG93bi1jbG9zZSIgb25jbGljaz0ieyBwYXJlbnQuZHVwbGljYXRlRW50cnkgfSI+PD9waHAgZWNobyAkYXBwKCJpMThuIiktPmdldCgnRHVwbGljYXRlJyk7ID8+PC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAgfSA/Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgPGRpdiBjbGFzcz0idWstbWFyZ2luIHVrLWZsZXggdWstZmxleC1taWRkbGUiIGlmPSJ7ICFsb2FkaW5nICYmIHBhZ2VzID4gMSB9Ij4NCg0KICAgICAgICAgICAgPHVsIGNsYXNzPSJ1ay1icmVhZGNydW1iIHVrLW1hcmdpbi1yZW1vdmUiPg0KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idWstYWN0aXZlIj48c3Bhbj57IHBhZ2UgfTwvc3Bhbj48L2xpPg0KICAgICAgICAgICAgICAgIDxsaSBkYXRhLXVrLWRyb3Bkb3duPSJtb2RlOidjbGljayciPg0KDQogICAgICAgICAgICAgICAgICAgIDxhPjxpIGNsYXNzPSJ1ay1pY29uLWJhcnMiPjwvaT4geyBwYWdlcyB9PC9hPg0KDQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVrLWRyb3Bkb3duIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZyBjbGFzcz0idWstdGV4dC1zbWFsbCI+PD9waHAgZWNobyAkYXBwKCJpMThuIiktPmdldCgnUGFnZXMnKTsgPz48L3N0cm9uZz4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idWstbWFyZ2luLXNtYWxsLXRvcCB7IHBhZ2VzID4gNSA/ICd1ay1zY3JvbGxhYmxlLWJveCc6JycgfSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ1ay1uYXYgdWstbmF2LWRyb3Bkb3duIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ1ay10ZXh0LXNtYWxsIiBlYWNoPSJ7ayx2IGluIG5ldyBBcnJheShwYWdlcyl9Ij48YSBjbGFzcz0idWstZHJvcGRvd24tY2xvc2UiIG9uY2xpY2s9InsgcGFyZW50LmxvYWRwYWdlLmJpbmQocGFyZW50LCB2KzEpIH0iPjw/cGhwIGVjaG8gJGFwcCgiaTE4biIpLT5nZXQoJ1BhZ2UnKTsgPz4ge3YgKyAxfTwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgPC91bD4NCg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0idWstYnV0dG9uLWdyb3VwIHVrLW1hcmdpbi1zbWFsbC1sZWZ0Ij4NCiAgICAgICAgICAgICAgICA8YSBjbGFzcz0idWstYnV0dG9uIHVrLWJ1dHRvbi1zbWFsbCIgb25jbGljaz0ieyBsb2FkcGFnZS5iaW5kKHRoaXMsIHBhZ2UtMSkgfSIgaWY9IntwYWdlLTEgPiAwfSI+PD9waHAgZWNobyAkYXBwKCJpMThuIiktPmdldCgnUHJldmlvdXMnKTsgPz48L2E+DQogICAgICAgICAgICAgICAgPGEgY2xhc3M9InVrLWJ1dHRvbiB1ay1idXR0b24tc21hbGwiIG9uY2xpY2s9InsgbG9hZHBhZ2UuYmluZCh0aGlzLCBwYWdlKzEpIH0iIGlmPSJ7cGFnZSsxIDw9IHBhZ2VzfSI+PD9waHAgZWNobyAkYXBwKCJpMThuIiktPmdldCgnTmV4dCcpOyA/PjwvYT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1ay1tYXJnaW4tc21hbGwtcmlnaHQiIGRhdGEtdWstZHJvcGRvd249Im1vZGU6J2NsaWNrJyI+DQogICAgICAgICAgICAgICAgPGEgY2xhc3M9InVrLWJ1dHRvbiB1ay1idXR0b24tbGluayB1ay1idXR0b24tc21hbGwgdWstdGV4dC1tdXRlZCI+e2xpbWl0fTwvYT4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1ay1kcm9wZG93biI+DQogICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idWstbmF2IHVrLW5hdi1kcm9wZG93biI+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InVrLW5hdi1oZWFkZXIiPjw/cGhwIGVjaG8gJGFwcCgiaTE4biIpLT5nZXQoJ1Nob3cnKTsgPz48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIG9uY2xpY2s9Int1cGRhdGVMaW1pdC5iaW5kKHRoaXMsIDIwKX0iPjIwPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgb25jbGljaz0ie3VwZGF0ZUxpbWl0LmJpbmQodGhpcywgNDApfSI+NDA8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBvbmNsaWNrPSJ7dXBkYXRlTGltaXQuYmluZCh0aGlzLCA4MCl9Ij44MDwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIG9uY2xpY2s9Int1cGRhdGVMaW1pdC5iaW5kKHRoaXMsIDEwMCl9Ij4xMDA8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idWstbmF2LWRpdmlkZXIiPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgb25jbGljaz0ie3VwZGF0ZUxpbWl0LmJpbmQodGhpcywgbnVsbCl9Ij48P3BocCBlY2hvICRhcHAoImkxOG4iKS0+Z2V0KCdBbGwnKTsgPz48L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgIDwvZGl2Pg0KDQogICAgICAgIDwvZGl2Pg0KDQogICAgPC9kaXY+DQoNCiAgICA8P3BocCBpZiAoJGFwcC0+bW9kdWxlKCdjb2xsZWN0aW9ucycpLT5oYXNhY2Nlc3MoJGNvbGxlY3Rpb25bJ25hbWUnXSwgJ2VudHJpZXNfZWRpdCcpKSB7ID8+DQogICAgPGVudHJpZXMtYmF0Y2hlZGl0IGNvbGxlY3Rpb249Intjb2xsZWN0aW9ufSIgZmllbGRzPXtmaWVsZHNpZHh9PjwvZW50cmllcy1iYXRjaGVkaXQ+DQogICAgPD9waHAgfSA/Pg0KDQogICAgPHNjcmlwdCB0eXBlPSJ2aWV3L3NjcmlwdCI+DQoNCiAgICAgICAgdmFyICR0aGlzID0gdGhpcywgJHJvb3QgPSBBcHAuJCh0aGlzLnJvb3QpOw0KDQogICAgICAgIHRoaXMuY29sbGVjdGlvbiA9IDw/cGhwIGVjaG8gIGpzb25fZW5jb2RlKCRjb2xsZWN0aW9uKSA7ID8+Ow0KICAgICAgICB0aGlzLmxvYWRpbmcgICAgPSB0cnVlOw0KICAgICAgICB0aGlzLmNvdW50ICAgICAgPSAwOw0KICAgICAgICB0aGlzLnBhZ2UgICAgICAgPSAxOw0KICAgICAgICB0aGlzLmxpbWl0ICAgICAgPSAyMDsNCiAgICAgICAgdGhpcy5lbnRyaWVzICAgID0gW107DQogICAgICAgIHRoaXMuZmllbGRzaWR4ICA9IHt9Ow0KICAgICAgICB0aGlzLmltYWdlRmllbGQgPSBudWxsOw0KICAgICAgICB0aGlzLmxhbmd1YWdlcyAgPSBBcHAuJGRhdGEubGFuZ3VhZ2VzOw0KDQogICAgICAgIGlmICh0aGlzLmxhbmd1YWdlcy5sZW5ndGgpIHsNCiAgICAgICAgICAgIHRoaXMubGFuZyA9IEFwcC5zZXNzaW9uLmdldCgnY29sbGVjdGlvbnMuZW50cnkuJyt0aGlzLmNvbGxlY3Rpb24uX2lkKycubGFuZycsICcnKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHRoaXMuZmllbGRzICAgICA9IHRoaXMuY29sbGVjdGlvbi5maWVsZHMuZmlsdGVyKGZ1bmN0aW9uKGZpZWxkKXsNCg0KICAgICAgICAgICAgaWYgKCFDb2xsZWN0aW9uSGFzRmllbGRBY2Nlc3MoZmllbGQpKSByZXR1cm4gZmFsc2U7DQoNCiAgICAgICAgICAgICR0aGlzLmZpZWxkc2lkeFtmaWVsZC5uYW1lXSA9IGZpZWxkOw0KDQogICAgICAgICAgICBpZiAoISR0aGlzLmltYWdlRmllbGQgJiYgKGZpZWxkLnR5cGU9PSdpbWFnZScgfHwgZmllbGQudHlwZT09J2Fzc2V0JykpIHsNCiAgICAgICAgICAgICAgICAkdGhpcy5pbWFnZUZpZWxkID0gZmllbGQ7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHJldHVybiBmaWVsZC5sc3Q7DQogICAgICAgIH0pOw0KDQogICAgICAgIHRoaXMuZmllbGRzaWR4WydfY3JlYXRlZCddID0ge25hbWU6J19jcmVhdGVkJywgJ2xhYmVsJzonPD9waHAgZWNobyAkYXBwKCJpMThuIiktPmdldCgnQ3JlYXRlZCcpOyA/PicsIHR5cGU6ICd0ZXh0J307DQogICAgICAgIHRoaXMuZmllbGRzaWR4WydfbW9kaWZpZWQnXSA9IHtuYW1lOidfbW9kaWZpZWQnLCAnbGFiZWwnOic8P3BocCBlY2hvICRhcHAoImkxOG4iKS0+Z2V0KCdNb2RpZmllZCcpOyA/PicsIHR5cGU6ICd0ZXh0J307DQoNCiAgICAgICAgdGhpcy5maWVsZHMucHVzaCh0aGlzLmZpZWxkc2lkeFsnX2NyZWF0ZWQnXSk7DQogICAgICAgIHRoaXMuZmllbGRzLnB1c2godGhpcy5maWVsZHNpZHhbJ19tb2RpZmllZCddKTsNCg0KICAgICAgICB0aGlzLnNvcnQgPSB7fQ0KICAgICAgICB0aGlzLnNvcnRbdGhpcy5jb2xsZWN0aW9uLnNvcnQuY29sdW1uXSA9IHRoaXMuY29sbGVjdGlvbi5zb3J0LmRpcg0KICAgICAgICB0aGlzLnNlbGVjdGVkID0gW107DQogICAgICAgIHRoaXMubGlzdG1vZGUgPSBBcHAuc2Vzc2lvbi5nZXQoJ2NvbGxlY3Rpb25zLmVudHJpZXMuJyt0aGlzLmNvbGxlY3Rpb24ubmFtZSsnLmxpc3Rtb2RlJywgJ2xpc3QnKTsNCg0KICAgICAgICB0aGlzLm9uKCdtb3VudCcsIGZ1bmN0aW9uKCl7DQoNCiAgICAgICAgICAgICRyb290Lm9uKCdjbGljaycsICdbZGF0YS1jaGVja10nLCBmdW5jdGlvbigpIHsNCg0KICAgICAgICAgICAgICAgIGlmICh0aGlzLmdldEF0dHJpYnV0ZSgnZGF0YS1jaGVjaycpID09ICdhbGwnKSB7DQogICAgICAgICAgICAgICAgICAgICRyb290LmZpbmQoJ1tkYXRhLWNoZWNrXVtkYXRhLWlkXScpLnByb3AoJ2NoZWNrZWQnLCB0aGlzLmNoZWNrZWQpOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICR0aGlzLmNoZWNrc2VsZWN0ZWQoKTsNCiAgICAgICAgICAgICAgICAkdGhpcy51cGRhdGUoKTsNCiAgICAgICAgICAgIH0pOw0KDQogICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCBmdW5jdGlvbihlKSB7DQogICAgICAgICAgICAgICAgJHRoaXMuaW5pdFN0YXRlKCk7DQogICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgJHRoaXMuaW5pdFN0YXRlKCk7DQogICAgICAgIH0pOw0KDQogICAgICAgIGluaXRTdGF0ZSgpIHsNCg0KICAgICAgICAgICAgdmFyIHNlYXJjaFBhcmFtcyA9IEFwcC5VdGlscy5wYXJhbXMoKTsNCg0KICAgICAgICAgICAgaWYgKHNlYXJjaFBhcmFtcy5oYXMoJ3EnKSkgew0KDQogICAgICAgICAgICAgICAgdHJ5IHsNCg0KICAgICAgICAgICAgICAgICAgICB2YXIgcSA9IEpTT04ucGFyc2Uoc2VhcmNoUGFyYW1zLmdldCgncScpKTsNCg0KICAgICAgICAgICAgICAgICAgICBpZiAocS5zb3J0KSB0aGlzLnNvcnQgPSBxLnNvcnQ7DQogICAgICAgICAgICAgICAgICAgIGlmIChxLnBhZ2UpIHRoaXMucGFnZSA9IHEucGFnZTsNCiAgICAgICAgICAgICAgICAgICAgaWYgKHEubGltaXQpIHRoaXMubGltaXQgPSAocGFyc2VJbnQocS5saW1pdCkgfHwgMjApOw0KICAgICAgICAgICAgICAgICAgICBpZiAocS5maWx0ZXIpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmlsdGVyID0gcS5maWx0ZXI7DQogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlZnMudHh0ZmlsdGVyLnZhbHVlID0gcS5maWx0ZXI7DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIH0gY2F0Y2goZSl7fQ0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICB0aGlzLmxvYWQodHJ1ZSk7DQogICAgICAgICAgICB0aGlzLnVwZGF0ZSgpOw0KICAgICAgICB9DQoNCiAgICAgICAgcmVtb3ZlKGUsIGVudHJ5LCBpZHgpIHsNCg0KICAgICAgICAgICAgZW50cnkgPSBlLml0ZW0uZW50cnkNCiAgICAgICAgICAgIGlkeCAgID0gZS5pdGVtLmlkeDsNCg0KICAgICAgICAgICAgQXBwLnVpLmNvbmZpcm0oIkFyZSB5b3Ugc3VyZT8iLCBmdW5jdGlvbigpIHsNCg0KICAgICAgICAgICAgICAgIEFwcC5yZXF1ZXN0KCcvY29sbGVjdGlvbnMvZGVsZXRlX2VudHJpZXMvJyskdGhpcy5jb2xsZWN0aW9uLm5hbWUsIHtmaWx0ZXI6IHsnX2lkJzplbnRyeS5faWR9fSkudGhlbihmdW5jdGlvbihkYXRhKSB7DQoNCiAgICAgICAgICAgICAgICAgICAgQXBwLnVpLm5vdGlmeSgiRW50cnkgcmVtb3ZlZCIsICJzdWNjZXNzIik7DQoNCiAgICAgICAgICAgICAgICAgICAgJHRoaXMuZW50cmllcy5zcGxpY2UoaWR4LCAxKTsNCg0KICAgICAgICAgICAgICAgICAgICBpZiAoJHRoaXMucGFnZXMgPiAxICYmICEkdGhpcy5lbnRyaWVzLmxlbmd0aCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgJHRoaXMucGFnZSA9ICR0aGlzLnBhZ2UgPT0gMSA/IDEgOiAkdGhpcy5wYWdlIC0gMTsNCiAgICAgICAgICAgICAgICAgICAgICAgICR0aGlzLmxvYWQoKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICR0aGlzLnVwZGF0ZSgpOw0KDQogICAgICAgICAgICAgICAgICAgICR0aGlzLmNoZWNrc2VsZWN0ZWQoKTsNCiAgICAgICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgfS5iaW5kKHRoaXMpKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJlbW92ZXNlbGVjdGVkKCkgew0KDQogICAgICAgICAgICBpZiAoIXRoaXMuc2VsZWN0ZWQubGVuZ3RoKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBBcHAudWkuY29uZmlybSgiQXJlIHlvdSBzdXJlPyIsIGZ1bmN0aW9uKCkgew0KDQogICAgICAgICAgICAgICAgdmFyIHByb21pc2VzID0gW107DQoNCiAgICAgICAgICAgICAgICB0aGlzLmVudHJpZXMgPSB0aGlzLmVudHJpZXMuZmlsdGVyKGZ1bmN0aW9uKGVudHJ5LCB5ZXBwKXsNCg0KICAgICAgICAgICAgICAgICAgICB5ZXBwID0gKCR0aGlzLnNlbGVjdGVkLmluZGV4T2YoZW50cnkuX2lkKSA9PT0gLTEpOw0KDQogICAgICAgICAgICAgICAgICAgIGlmICgheWVwcCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgcHJvbWlzZXMucHVzaChBcHAucmVxdWVzdCgnL2NvbGxlY3Rpb25zL2RlbGV0ZV9lbnRyaWVzLycrJHRoaXMuY29sbGVjdGlvbi5uYW1lLCB7ZmlsdGVyOiB7J19pZCc6ZW50cnkuX2lkfX0pKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgIHJldHVybiB5ZXBwOw0KICAgICAgICAgICAgICAgIH0pOw0KDQogICAgICAgICAgICAgICAgUHJvbWlzZS5hbGwocHJvbWlzZXMpLnRoZW4oZnVuY3Rpb24oKXsNCg0KICAgICAgICAgICAgICAgICAgICBBcHAudWkubm90aWZ5KHByb21pc2VzLmxlbmd0aCA+IDEgPyAocHJvbWlzZXMubGVuZ3RoICsgIiBlbnRyaWVzIHJlbW92ZWQiKSA6ICJFbnRyeSByZW1vdmVkIiwgInN1Y2Nlc3MiKTsNCg0KICAgICAgICAgICAgICAgICAgICAkdGhpcy5sb2FkaW5nID0gZmFsc2U7DQoNCiAgICAgICAgICAgICAgICAgICAgaWYgKCR0aGlzLnBhZ2VzID4gMSAmJiAhJHRoaXMuZW50cmllcy5sZW5ndGgpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICR0aGlzLnBhZ2UgPSAkdGhpcy5wYWdlID09IDEgPyAxIDogJHRoaXMucGFnZSAtIDE7DQogICAgICAgICAgICAgICAgICAgICAgICAkdGhpcy5sb2FkKCk7DQogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICAgICAkdGhpcy51cGRhdGUoKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgICAgICB0aGlzLmxvYWRpbmcgPSB0cnVlOw0KICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlKCk7DQogICAgICAgICAgICAgICAgdGhpcy5jaGVja3NlbGVjdGVkKHRydWUpOw0KDQogICAgICAgICAgICB9LmJpbmQodGhpcykpOw0KDQogICAgICAgIH0NCg0KICAgICAgICBsb2FkKGluaXRpYWwpIHsNCg0KICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSB7IHNvcnQ6dGhpcy5zb3J0IH07DQoNCiAgICAgICAgICAgIGlmICh0aGlzLmxhbmcpIHsNCiAgICAgICAgICAgICAgICBvcHRpb25zLmxhbmcgPSB0aGlzLmxhbmc7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmICh0aGlzLmZpbHRlcikgew0KICAgICAgICAgICAgICAgIG9wdGlvbnMuZmlsdGVyID0gdGhpcy5maWx0ZXI7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmICh0aGlzLmxpbWl0KSB7DQogICAgICAgICAgICAgICAgb3B0aW9ucy5saW1pdCA9IHRoaXMubGltaXQ7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIG9wdGlvbnMuc2tpcCAgPSAodGhpcy5wYWdlIC0gMSkgKiB0aGlzLmxpbWl0Ow0KDQogICAgICAgICAgICB0aGlzLmxvYWRpbmcgPSB0cnVlOw0KDQogICAgICAgICAgICBpZiAoIWluaXRpYWwpIHsNCg0KICAgICAgICAgICAgICAgIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSgNCiAgICAgICAgICAgICAgICAgICAgbnVsbCwgbnVsbCwNCiAgICAgICAgICAgICAgICAgICAgQXBwLnJvdXRlKFsnL2NvbGxlY3Rpb25zL2VudHJpZXMvJywgdGhpcy5jb2xsZWN0aW9uLm5hbWUsICc/cT0nLCBKU09OLnN0cmluZ2lmeSh7DQogICAgICAgICAgICAgICAgICAgICAgICBwYWdlOiB0aGlzLnBhZ2UgfHwgbnVsbCwNCiAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcjogdGhpcy5maWx0ZXIgfHwgbnVsbCwNCiAgICAgICAgICAgICAgICAgICAgICAgIHNvcnQ6IHRoaXMuc29ydCB8fCBudWxsLA0KICAgICAgICAgICAgICAgICAgICAgICAgbGltaXQ6IHRoaXMubGltaXQNCiAgICAgICAgICAgICAgICAgICAgfSldLmpvaW4oJycpKQ0KICAgICAgICAgICAgICAgICk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHJldHVybiBBcHAucmVxdWVzdCgnL2NvbGxlY3Rpb25zL2ZpbmQnLCB7Y29sbGVjdGlvbjp0aGlzLmNvbGxlY3Rpb24ubmFtZSwgb3B0aW9uczpvcHRpb25zfSkudGhlbihmdW5jdGlvbihkYXRhKXsNCg0KICAgICAgICAgICAgICAgIHdpbmRvdy5zY3JvbGxUbygwLCAwKTsNCg0KICAgICAgICAgICAgICAgIHRoaXMuZW50cmllcyA9IGRhdGEuZW50cmllczsNCiAgICAgICAgICAgICAgICB0aGlzLnBhZ2VzICAgPSBkYXRhLnBhZ2VzOw0KICAgICAgICAgICAgICAgIHRoaXMucGFnZSAgICA9IGRhdGEucGFnZTsNCiAgICAgICAgICAgICAgICB0aGlzLmNvdW50ICAgPSBkYXRhLmNvdW50Ow0KDQogICAgICAgICAgICAgICAgdGhpcy5jaGVja3NlbGVjdGVkKCk7DQogICAgICAgICAgICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7DQogICAgICAgICAgICAgICAgdGhpcy51cGRhdGUoKTsNCg0KICAgICAgICAgICAgfS5iaW5kKHRoaXMpKQ0KICAgICAgICB9DQoNCiAgICAgICAgbG9hZHBhZ2UocGFnZSkgew0KICAgICAgICAgICAgdGhpcy5wYWdlID0gcGFnZSA+IHRoaXMucGFnZXMgPyB0aGlzLnBhZ2VzOnBhZ2U7DQogICAgICAgICAgICB0aGlzLmxvYWQoKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHVwZGF0ZXNvcnQoZSwgZmllbGQpIHsNCg0KICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOw0KDQogICAgICAgICAgICBmaWVsZCA9IGUudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1zb3J0Jyk7DQoNCiAgICAgICAgICAgIGlmICghZmllbGQpIHsNCiAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHZhciBjb2wgPSBmaWVsZDsNCg0KICAgICAgICAgICAgc3dpdGNoICh0aGlzLmZpZWxkc2lkeFtmaWVsZF0udHlwZSkgew0KICAgICAgICAgICAgICAgIGNhc2UgJ2NvbGxlY3Rpb25saW5rJzoNCiAgICAgICAgICAgICAgICAgICAgY29sID0gZmllbGQrJy5kaXNwbGF5JzsNCiAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgY2FzZSAnbG9jYXRpb24nOg0KICAgICAgICAgICAgICAgICAgICBjb2wgPSBmaWVsZCsnLmFkZHJlc3MnOw0KICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICBkZWZhdWx0Og0KICAgICAgICAgICAgICAgICAgICBjb2wgPSBmaWVsZDsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKGUubWV0YUtleSB8fCBlLmN0cmxLZXkpIHsNCiAgICAgICAgICAgICAgICAvLyBtdWx0aSBzZWxlY3QNCiAgICAgICAgICAgIH0gZWxzZSB7DQoNCiAgICAgICAgICAgICAgICB2YXIgc29ydCA9IHt9Ow0KDQogICAgICAgICAgICAgICAgaWYgKHRoaXMuc29ydFtjb2xdKSB7DQogICAgICAgICAgICAgICAgICAgIHNvcnRbY29sXSA9IHRoaXMuc29ydFtjb2xdOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIHRoaXMuc29ydCA9IHNvcnQ7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmICghdGhpcy5zb3J0W2NvbF0pIHsNCiAgICAgICAgICAgICAgICB0aGlzLnNvcnRbY29sXSA9IDE7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIHRoaXMuc29ydFtjb2xdID0gdGhpcy5zb3J0W2NvbF0gPT0gMSA/IC0xIDogMTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgdGhpcy5lbnRyaWVzID0gW107DQogICAgICAgICAgICB0aGlzLmxvYWQoKTsNCiAgICAgICAgfQ0KDQogICAgICAgIGNoZWNrc2VsZWN0ZWQodXBkYXRlKSB7DQoNCiAgICAgICAgICAgIHZhciBjaGVja2JveGVzID0gJHJvb3QuZmluZCgnW2RhdGEtY2hlY2tdW2RhdGEtaWRdJyksDQogICAgICAgICAgICAgICAgc2VsZWN0ZWQgICA9IGNoZWNrYm94ZXMuZmlsdGVyKCc6Y2hlY2tlZCcpOw0KDQogICAgICAgICAgICB0aGlzLnNlbGVjdGVkID0gW107DQoNCiAgICAgICAgICAgIGlmIChzZWxlY3RlZC5sZW5ndGgpIHsNCg0KICAgICAgICAgICAgICAgIHNlbGVjdGVkLmVhY2goZnVuY3Rpb24oKXsNCiAgICAgICAgICAgICAgICAgICAgJHRoaXMuc2VsZWN0ZWQucHVzaChBcHAuJCh0aGlzKS5hdHRyKCdkYXRhLWlkJykpOw0KICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAkcm9vdC5maW5kKCdbZGF0YS1jaGVjaz0iYWxsIl0nKS5wcm9wKCdjaGVja2VkJywgY2hlY2tib3hlcy5sZW5ndGggJiYgY2hlY2tib3hlcy5sZW5ndGggPT09IHNlbGVjdGVkLmxlbmd0aCk7DQoNCiAgICAgICAgICAgIGlmICh1cGRhdGUpIHsNCiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZSgpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgdXBkYXRlZmlsdGVyKCkgew0KDQogICAgICAgICAgICB2YXIgbG9hZCA9IHRoaXMuZmlsdGVyID8gdHJ1ZTpmYWxzZTsNCg0KICAgICAgICAgICAgdGhpcy5maWx0ZXIgPSB0aGlzLnJlZnMudHh0ZmlsdGVyLnZhbHVlIHx8IG51bGw7DQoNCiAgICAgICAgICAgIGlmICh0aGlzLmZpbHRlciB8fCBsb2FkKSB7DQogICAgICAgICAgICAgICAgdGhpcy5lbnRyaWVzID0gW107DQogICAgICAgICAgICAgICAgdGhpcy5sb2FkaW5nID0gdHJ1ZTsNCiAgICAgICAgICAgICAgICB0aGlzLnBhZ2UgPSAxOw0KICAgICAgICAgICAgICAgIHRoaXMubG9hZCgpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgdXBkYXRlTGltaXQobGltaXQpIHsNCiAgICAgICAgICAgIHRoaXMubGltaXQgPSBsaW1pdDsNCiAgICAgICAgICAgIHRoaXMucGFnZSA9IDE7DQogICAgICAgICAgICB0aGlzLmxvYWQoKTsNCiAgICAgICAgfQ0KDQogICAgICAgIGR1cGxpY2F0ZUVudHJ5KGUpIHsNCiAgICAgICAgICAgIHZhciBjb2xsZWN0aW9uID0gdGhpcy5jb2xsZWN0aW9uLm5hbWU7DQogICAgICAgICAgICB2YXIgaWQgPSBlLml0ZW0uZW50cnkuX2lkOw0KICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSB7ICJmaWx0ZXIiOiB7ICJfaWQiOiBpZCB9IH07DQoNCiAgICAgICAgICAgIEFwcC5yZXF1ZXN0KCcvY29sbGVjdGlvbnMvZmluZCcsIHsiY29sbGVjdGlvbiI6Y29sbGVjdGlvbiwgIm9wdGlvbnMiOm9wdGlvbnN9KS50aGVuKGZ1bmN0aW9uKGRhdGEpew0KICAgICAgICAgICAgICAgIGlmIChkYXRhLmNvdW50ID09PSAxKSB7DQogICAgICAgICAgICAgICAgICAgIHZhciBlbnRyeSA9IGRhdGEuZW50cmllc1swXTsNCiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGVudHJ5Ll9pZDsNCiAgICAgICAgICAgICAgICAgICAgQXBwLnJlcXVlc3QoJy9jb2xsZWN0aW9ucy9zYXZlX2VudHJ5LycrY29sbGVjdGlvbiwgeyJlbnRyeSI6IGVudHJ5fSkudGhlbihmdW5jdGlvbihlbnRyeSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVudHJ5KSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgQXBwLnVpLm5vdGlmeSgiRW50cnkgZHVwbGljYXRlZCIsICJzdWNjZXNzIik7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRoaXMubG9hZChmYWxzZSk7DQogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFwcC51aS5ub3RpZnkoIkNvdWxkIG5vdCBkdXBsaWNhdGUgZW50cnkiLCAiZGFuZ2VyIik7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgIEFwcC51aS5ub3RpZnkoIkNvdWxkIG5vdCBkdXBsaWNhdGUgZW50cnkiLCAiZGFuZ2VyIik7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSk7DQogICAgICAgIH0NCg0KICAgICAgICB0b2dnbGVMaXN0TW9kZSgpIHsNCiAgICAgICAgICAgIHRoaXMubGlzdG1vZGUgPSB0aGlzLmxpc3Rtb2RlPT0nbGlzdCcgPyAnZ3JpZCc6J2xpc3QnOw0KICAgICAgICAgICAgQXBwLnNlc3Npb24uc2V0KCdjb2xsZWN0aW9ucy5lbnRyaWVzLicrdGhpcy5jb2xsZWN0aW9uLm5hbWUrJy5saXN0bW9kZScsIHRoaXMubGlzdG1vZGUpOw0KICAgICAgICB9DQoNCiAgICAgICAgaXNJbWFnZUZpZWxkKGVudHJ5KSB7DQoNCiAgICAgICAgICAgIGlmICghdGhpcy5pbWFnZUZpZWxkKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICB2YXIgZGF0YSA9IGVudHJ5W3RoaXMuaW1hZ2VGaWVsZC5uYW1lXTsNCg0KICAgICAgICAgICAgaWYgKCFkYXRhKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBzd2l0Y2godGhpcy5pbWFnZUZpZWxkLnR5cGUpIHsNCiAgICAgICAgICAgICAgICBjYXNlICdhc3NldCc6DQogICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLm1pbWUgJiYgZGF0YS5taW1lLm1hdGNoKC9eaW1hZ2VcLy8pKSB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQVNTRVRTX1VSTCtkYXRhLnBhdGg7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgY2FzZSAnaW1hZ2UnOg0KDQogICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLnBhdGgpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhLnBhdGgubWF0Y2goL14oaHR0cFw6fGh0dHBzXDp8XC9cLykvKSA/IGRhdGEucGF0aCA6IFNJVEVfVVJMKycvJytkYXRhLnBhdGg7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCg0KICAgICAgICB9DQoNCiAgICAgICAgYmF0Y2hlZGl0KCkgew0KICAgICAgICAgICAgaWYgKCF0aGlzLmxhbmcpIHsNCiAgICAgICAgICAgICAgICB0aGlzLnRhZ3NbJ2VudHJpZXMtYmF0Y2hlZGl0J10ub3Blbih0aGlzLmVudHJpZXMsIHRoaXMuc2VsZWN0ZWQpOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICBBcHAudWkubm90aWZ5KCJDYW5ub3QgYmF0Y2ggZWRpdCB3aGlsZSBpbiBub24tZGVmYXVsdCBsYW5ndWFnZSIsICJkYW5nZXIiKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIGNoYW5nZWxhbmd1YWdlKGUpIHsNCiAgICAgICAgICAgIHZhciBsYW5nID0gZS50YXJnZXQudmFsdWU7DQogICAgICAgICAgICBBcHAuc2Vzc2lvbi5zZXQoJ2NvbGxlY3Rpb25zLmVudHJ5LicrdGhpcy5jb2xsZWN0aW9uLl9pZCsnLmxhbmcnLCBsYW5nKTsNCiAgICAgICAgICAgIHRoaXMubGFuZyA9IGxhbmc7DQogICAgICAgICAgICB0aGlzLmxvYWQoZmFsc2UpOw0KICAgICAgICAgICAgdGhpcy51cGRhdGUoKTsNCiAgICAgICAgfQ0KDQogICAgPC9zY3JpcHQ+DQoNCiAgICA8P3BocCAkYXBwLT50cmlnZ2VyKCdjb2xsZWN0aW9ucy5lbnRyaWVzJywgWyRjb2xsZWN0aW9uXSk7ID8+DQo8L2Rpdj4NCiI7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBuYW1lc3BhY2VzIjthOjA6e31zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGluY2x1ZGVzIjthOjA6e31zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGZ1bmN0aW9ucyI7YTowOnt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBjb25zdGFudHMiO2E6MDp7fXM6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAY2xhc3NlcyI7YTowOnt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBpbnRlcmZhY2VzIjthOjA6e31zOjQxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHRyYWl0cyI7YTowOnt9czo0MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBlbnVtcyI7YTowOnt9czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBtZXRhZGF0YSI7YTowOnt9fQ==";