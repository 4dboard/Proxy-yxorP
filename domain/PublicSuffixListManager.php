<?php declare(strict_types=1);namespace Pdp;use Pdp\HttpAdapter\HttpAdapterInterface;class PublicSuffixListManager{const ALL_DOMAINS='ALL';const PDP_PSL_TEXT_FILE='public-suffix-list.txt';const PDP_PSL_PHP_FILE='public-suffix-list.php';const ICANN_DOMAINS='ICANN';const ICANN_PSL_PHP_FILE='icann-public-suffix-list.php';const PRIVATE_DOMAINS='PRIVATE';const PRIVATE_PSL_PHP_FILE='private-public-suffix-list.php';protected $publicSuffixListUrl='https://publicsuffix.org/list/effective_tld_names.dat';protected $cacheDir;protected static $domainList=[self::ALL_DOMAINS=>self::PDP_PSL_PHP_FILE,self::ICANN_DOMAINS=>self::ICANN_PSL_PHP_FILE,self::PRIVATE_DOMAINS=>self::PRIVATE_PSL_PHP_FILE,];protected $httpAdapter;public function __construct($cacheDir=null){if($cacheDir===null){$cacheDir=\realpath(\dirname(__DIR__,2).\DIRECTORY_SEPARATOR.'data');}if($cacheDir===false){throw new \InvalidArgumentException('$cacheDir ('.$cacheDir.') is not valid');}$this->cacheDir=$cacheDir;}public function refreshPublicSuffixList(){$this->fetchListFromSource();$cacheFile=$this->cacheDir.'/'.self::PDP_PSL_TEXT_FILE;$publicSuffixListArray=$this->convertListToArray($cacheFile);foreach($publicSuffixListArray as $domain=>$data){if(\is_array($data)&&!empty($data)){$this->varExportToFile(self::$domainList[$domain],$data);}}}public function fetchListFromSource(){$publicSuffixList=$this->getHttpAdapter()->getContent($this->publicSuffixListUrl);if($publicSuffixList===false){return 0;}return $this->write(self::PDP_PSL_TEXT_FILE,$publicSuffixList);}public function parseListToArray($textFile):array{$fp=@\fopen($textFile,'rb');if(!$fp||!\flock($fp,\LOCK_SH)){throw new \Exception("Cannot read '${textFile}'");}$data=\file($textFile,\FILE_IGNORE_NEW_LINES|\FILE_SKIP_EMPTY_LINES);\flock($fp,\LOCK_UN);\fclose($fp);if($data===false){return[];}$data=\array_filter($data,static function($line){return \strpos($line,'//')===false;});$publicSuffixListArray=[];foreach($data as $line){$ruleParts=\explode('.',$line);$this->buildArray($publicSuffixListArray,$ruleParts);}return $publicSuffixListArray;}public function buildArray(array &$publicSuffixListArray,array $ruleParts){$isDomain=true;$part=\array_pop($ruleParts);$punycode=new PunycodeWrapper();$part=$punycode->encode($part);if(\strpos($part,'!')===0){$part=\substr($part,1);$isDomain=false;}if(!isset($publicSuffixListArray[$part])){if($isDomain){$publicSuffixListArray[$part]=[];}else{$publicSuffixListArray[$part]=['!'=>''];}}if($isDomain&&\count($ruleParts)>0){$this->buildArray($publicSuffixListArray[$part],$ruleParts);}}public function writePhpCache(array $publicSuffixList):int{$data='<?php'.\PHP_EOL.' return '.\var_export($publicSuffixList,true).';';return $this->write(self::PDP_PSL_PHP_FILE,$data);}public function getList($list=self::ALL_DOMAINS,bool $withStaticCache=true):PublicSuffixList{static $LIST_STATIC=[];$basename=self::$domainList[$list]?? self::PDP_PSL_PHP_FILE;$file=$this->cacheDir.'/'.$basename;if($withStaticCache===false){if(!\file_exists($file)){$this->refreshPublicSuffixList();}return new PublicSuffixList($file);}$cacheKey=\md5($file);if(isset($LIST_STATIC[$cacheKey])){return $LIST_STATIC[$cacheKey];}if(!\file_exists($file)){$this->refreshPublicSuffixList();}if(!isset($LIST_STATIC[$cacheKey])){$LIST_STATIC[$cacheKey]=new PublicSuffixList($file);}return $LIST_STATIC[$cacheKey];}public function getListFromFile($phpFile):PublicSuffixList{$fp=@\fopen($phpFile,'rb');if(!$fp||!\flock($fp,\LOCK_SH)){throw new \Exception("Cannot read '${phpFile}'");}$list=new PublicSuffixList(require $phpFile);\flock($fp,\LOCK_UN);\fclose($fp);return $list;}public function getHttpAdapter():HttpAdapterInterface{if(!$this->httpAdapter instanceof HttpAdapterInterface){if(\extension_loaded('curl')){$this->httpAdapter=new HttpAdapter\CurlHttpAdapter();}else{$this->httpAdapter=new HttpAdapter\PhpHttpAdapter();}}return $this->httpAdapter;}public function setHttpAdapter(HttpAdapter\HttpAdapterInterface $httpAdapter){$this->httpAdapter=$httpAdapter;}protected function varExportToFile($basename,array $input):int{$data='<?php'.\PHP_EOL.' return '.\var_export($input,true).';';return $this->write($basename,$data);}protected function convertListToArray($textFile):array{$addDomain=[self::ICANN_DOMAINS=>false,self::PRIVATE_DOMAINS=>false,];$publicSuffixListArray=[self::ALL_DOMAINS=>[],self::ICANN_DOMAINS=>[],self::PRIVATE_DOMAINS=>[],];$data=new \SplFileObject($textFile);$data->setFlags(\SplFileObject::DROP_NEW_LINE|\SplFileObject::READ_AHEAD|\SplFileObject::SKIP_EMPTY);foreach($data as $line){$addDomain=$this->validateDomainAddition($line,$addDomain);if(\strpos($line,'//')!==false){continue;}$publicSuffixListArray=$this->convertLineToArray($line,$publicSuffixListArray,$addDomain);}return $publicSuffixListArray;}protected function convertLineToArray($textLine,array $publicSuffixListArray,array $addDomain):array{$ruleParts=\explode('.',$textLine);$this->buildArray($publicSuffixListArray[self::ALL_DOMAINS],$ruleParts);$domainNames=\array_keys(\array_filter($addDomain));foreach($domainNames as $domainName){$this->buildArray($publicSuffixListArray[$domainName],$ruleParts);}return $publicSuffixListArray;}protected function validateDomainAddition($line,array $addDomain):array{foreach($addDomain as $section=>$status){$addDomain[$section]=$this->isValidSection($status,$line,$section);}return $addDomain;}protected function isValidSection($previousStatus,$line,$section):bool{if(!$previousStatus&&\strpos($line,'// ===BEGIN '.$section.' DOMAINS===')===0){return true;}if($previousStatus&&\strpos($line,'// ===END '.$section.' DOMAINS===')===0){return false;}return $previousStatus;}protected function write($filename,$data):int{$data=\trim($data);$filePath=$this->cacheDir.'/'.$filename;if(empty($data)){throw new \Exception("No data to write into '{$filePath}'");}$fp=@\fopen($filePath,'cb');$result=$fp&&\flock($fp,\LOCK_EX)&&\ftruncate($fp,0)&&\fwrite($fp,$data)!==false&&\fflush($fp);if(!$result){$fp&&\fclose($fp);throw new \Exception("Cannot write to '${filePath}'");}if($fp){\flock($fp,\LOCK_UN);\fclose($fp);}return (int) $result;}}