1687716133
waR3U4bTeM%3A8e858e20b49bdf10a5fb377bc02cc377-c3db665512c5d698356dc9e4e47f3107
s:19720:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxNDp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrIjo3OntzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAHN1bW1hcnkiO3M6NDE6IlRoaXMgZmlsZSBpcyBwYXJ0IG9mIHRoZSBDb2NrcGl0IHByb2plY3QuIjtzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGRlc2NyaXB0aW9uIjtPOjQ1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24iOjI6e3M6NTk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AYm9keVRlbXBsYXRlIjtzOjE5NDoiKGMpIEFydHVyIEhlaW56ZSAtIPCfhbDwn4W28J+FtPCfhb3wn4aD8J+FtPCfhbnwn4W+LCBodHRwOi8vYWdlbnRlam8uY29tCgpGb3IgdGhlIGZ1bGwgY29weXJpZ2h0IGFuZCBsaWNlbnNlIGluZm9ybWF0aW9uLCBwbGVhc2UgdmlldyB0aGUgTElDRU5TRQpmaWxlIHRoYXQgd2FzIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBzb3VyY2UgY29kZS4iO3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AdGFncyI7YTowOnt9fXM6Mzk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAdGFncyI7YTowOnt9czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBjb250ZXh0IjtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQ29udGV4dCI6Mjp7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xDb250ZXh0AG5hbWVzcGFjZSI7czowOiIiO3M6NTY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQ29udGV4dABuYW1lc3BhY2VBbGlhc2VzIjthOjA6e319czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBsb2NhdGlvbiI7TjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGlzVGVtcGxhdGVTdGFydCI7YjowO3M6NDg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAaXNUZW1wbGF0ZUVuZCI7YjowO31zOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6ImMzZGI2NjU1MTJjNWQ2OTgzNTZkYzllNGU0N2YzMTA3IjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6MTM6ImJvb3RzdHJhcC5waHAiO3M6Mzk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAcGF0aCI7czozNzoiY29ja3BpdC9tb2R1bGVzL0NvY2twaXQvYm9vdHN0cmFwLnBocCI7czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBzb3VyY2UiO3M6MTI4MjA6Ijw/cGhwDQovKioNCiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHRoZSBDb2NrcGl0IHByb2plY3QuDQogKg0KICogKGMpIEFydHVyIEhlaW56ZSAtIPCfhbDwn4W28J+FtPCfhb3wn4aD8J+FtPCfhbnwn4W+LCBodHRwOi8vYWdlbnRlam8uY29tDQogKg0KICogRm9yIHRoZSBmdWxsIGNvcHlyaWdodCBhbmQgbGljZW5zZSBpbmZvcm1hdGlvbiwgcGxlYXNlIHZpZXcgdGhlIExJQ0VOU0UNCiAqIGZpbGUgdGhhdCB3YXMgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHNvdXJjZSBjb2RlLg0KICovDQoNCi8vIEhlbHBlcnMNCg0KJHRoaXMtPmhlbHBlcnNbJ3JldmlzaW9ucyddICA9ICdDb2NrcGl0XFxIZWxwZXJcXFJldmlzaW9ucyc7DQokdGhpcy0+aGVscGVyc1sndXBkYXRlciddICAgID0gJ0NvY2twaXRcXEhlbHBlclxcVXBkYXRlcic7DQokdGhpcy0+aGVscGVyc1snYXN5bmMnXSAgICAgID0gJ0NvY2twaXRcXEhlbHBlclxcQXN5bmMnOw0KJHRoaXMtPmhlbHBlcnNbJ2pvYnMnXSAgICAgICA9ICdDb2NrcGl0XFxIZWxwZXJcXEpvYnMnOw0KDQovLyBBUEkNCiR0aGlzLT5tb2R1bGUoJ2NvY2twaXQnKS0+ZXh0ZW5kKFsNCg0KICAgICdtYXJrZG93bicgPT4gZnVuY3Rpb24oJGNvbnRlbnQsICRleHRyYSA9IGZhbHNlKSB1c2UoJGFwcCkgew0KDQogICAgICAgIHN0YXRpYyAkcGFyc2VEb3duOw0KICAgICAgICBzdGF0aWMgJHBhcnNlZG93bkV4dHJhOw0KDQogICAgICAgIGlmICghJGV4dHJhICYmICEkcGFyc2VEb3duKSAgICAgICRwYXJzZURvd24gICAgICA9IG5ldyBcUGFyc2Vkb3duKCk7DQogICAgICAgIGlmICgkZXh0cmEgJiYgISRwYXJzZWRvd25FeHRyYSkgICRwYXJzZWRvd25FeHRyYSA9IG5ldyBcUGFyc2Vkb3duRXh0cmEoKTsNCg0KICAgICAgICByZXR1cm4gJGV4dHJhID8gJHBhcnNlZG93bkV4dHJhLT50ZXh0KCRjb250ZW50KSA6ICRwYXJzZURvd24tPnRleHQoJGNvbnRlbnQpOw0KICAgIH0sDQoNCiAgICAnY2xlYXJDYWNoZScgPT4gZnVuY3Rpb24oKSB1c2UoJGFwcCkgew0KDQogICAgICAgICRkaXJzID0gWycjY2FjaGU6JywnI3RtcDonLCcjdGh1bWJzOicsICcjcHN0b3JhZ2U6dG1wJ107DQoNCiAgICAgICAgZm9yZWFjaCAoYXJyYXlfdW5pcXVlKCRkaXJzKSBhcyAmJGRpcikgew0KICAgICAgICAgICAgJGRpciA9ICR0aGlzLT5hcHAtPnBhdGgoJGRpcik7DQogICAgICAgIH0NCg0KICAgICAgICBmb3JlYWNoICgkZGlycyBhcyAkZGlyKSB7DQoNCiAgICAgICAgICAgICRwYXRoID0gJGFwcC0+cGF0aCgkZGlyKTsNCiAgICAgICAgICAgICRmaWxlcyA9IG5ldyBcUmVjdXJzaXZlSXRlcmF0b3JJdGVyYXRvcihuZXcgXFJlY3Vyc2l2ZURpcmVjdG9yeUl0ZXJhdG9yKCRwYXRoKSwgXFJlY3Vyc2l2ZUl0ZXJhdG9ySXRlcmF0b3I6OlNFTEZfRklSU1QpOw0KDQogICAgICAgICAgICBmb3JlYWNoICgkZmlsZXMgYXMgJGZpbGUpIHsNCg0KICAgICAgICAgICAgICAgIGlmICghJGZpbGUtPmlzRmlsZSgpKSBjb250aW51ZTsNCiAgICAgICAgICAgICAgICBpZiAocHJlZ19tYXRjaCgnLyhcLmdpdGtlZXB8XC5naXRpZ25vcmV8aW5kZXhcLmh0bWwpJC8nLCAkZmlsZSkpIGNvbnRpbnVlOw0KDQogICAgICAgICAgICAgICAgQHVubGluaygkZmlsZS0+Z2V0UmVhbFBhdGgoKSk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICRhcHAtPmhlbHBlcignZnMnKS0+cmVtb3ZlRW1wdHlTdWJGb2xkZXJzKCRwYXRoKTsNCiAgICAgICAgfQ0KDQogICAgICAgICRhcHAtPnRyaWdnZXIoJ2NvY2twaXQuY2xlYXJjYWNoZScpOw0KDQogICAgICAgICRzaXplID0gMDsNCg0KICAgICAgICBmb3JlYWNoICgkZGlycyBhcyAkZGlyKSB7DQogICAgICAgICAgICAkc2l6ZSArPSAkYXBwLT5oZWxwZXIoJ2ZzJyktPmdldERpclNpemUoJGRpcik7DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoZnVuY3Rpb25fZXhpc3RzKCdvcGNhY2hlX3Jlc2V0JykpIHsNCiAgICAgICAgICAgIG9wY2FjaGVfcmVzZXQoKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiBbJ3NpemUnPT4kYXBwLT5oZWxwZXIoJ3V0aWxzJyktPmZvcm1hdFNpemUoJHNpemUpXTsNCiAgICB9LA0KDQogICAgJ2xvYWRBcGlLZXlzJyA9PiBmdW5jdGlvbigpIHsNCg0KICAgICAgICAka2V5cyAgICAgID0gWyAnbWFzdGVyJyA9PiAnJywgJ3NwZWNpYWwnID0+IFtdIF07DQogICAgICAgICRjb250YWluZXIgPSAkdGhpcy0+YXBwLT5wYXRoKCcjc3RvcmFnZTonKS4nL2FwaS5rZXlzLnBocCc7DQoNCiAgICAgICAgaWYgKGZpbGVfZXhpc3RzKCRjb250YWluZXIpKSB7DQoNCiAgICAgICAgICAgICRkYXRhID0gaW5jbHVkZSgkY29udGFpbmVyKTsNCiAgICAgICAgICAgICRkYXRhID0gQHVuc2VyaWFsaXplKCR0aGlzLT5hcHAtPmRlY29kZSgkZGF0YSwgJHRoaXMtPmFwcFsnc2VjLWtleSddKSk7DQoNCiAgICAgICAgICAgIGlmICgkZGF0YSAhPT0gZmFsc2UpIHsNCiAgICAgICAgICAgICAgICAka2V5cyA9IGFycmF5X21lcmdlKCRrZXlzLCAkZGF0YSk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICRrZXlzID0gJHRoaXMtPmFwcC0+c3RvcmFnZS0+Z2V0S2V5KCdjb2NrcGl0JywgJ2FwaV9rZXlzJywgJGtleXMpOw0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuICRrZXlzOw0KICAgIH0sDQoNCiAgICAnc2F2ZUFwaUtleXMnID0+IGZ1bmN0aW9uKCRkYXRhKSB7DQoNCiAgICAgICAgJGRhdGEgPSBhcnJheV9tZXJnZShbICdtYXN0ZXInID0+ICcnLCAnc3BlY2lhbCcgPT4gW10gXSwgKGFycmF5KSRkYXRhKTsNCg0KICAgICAgICAkdGhpcy0+YXBwLT5zdG9yYWdlLT5zZXRLZXkoJ2NvY2twaXQnLCAnYXBpX2tleXMnLCAkZGF0YSk7DQoNCiAgICAgICAgLy8gY2FjaGUNCiAgICAgICAgJHNlcmlhbGl6ZWQgPSBzZXJpYWxpemUoJGRhdGEpOw0KICAgICAgICAkZXhwb3J0ICAgICA9IHZhcl9leHBvcnQoJHRoaXMtPmFwcC0+ZW5jb2RlKCRzZXJpYWxpemVkLCAkdGhpcy0+YXBwWyJzZWMta2V5Il0pLCB0cnVlKTsNCiAgICAgICAgJGNvbnRhaW5lciAgPSAkdGhpcy0+YXBwLT5wYXRoKCcjc3RvcmFnZTonKS4nL2FwaS5rZXlzLnBocCc7DQoNCiAgICAgICAgcmV0dXJuICR0aGlzLT5hcHAtPmhlbHBlcignZnMnKS0+d3JpdGUoJGNvbnRhaW5lciwgIjw/cGhwXG4gcmV0dXJuIHskZXhwb3J0fTsiKTsNCiAgICB9LA0KDQogICAgLyoqDQogICAgICogR2VuZXJhdGUgdGh1bWJuYWlsDQogICAgICogQHBhcmFtIGFycmF5ICRvcHRpb25zIHsNCiAgICAgKiAgIEB2YXIgc3RyaW5nIFtjYWNoZWZvbGRlcj10aHVtYnM6Ly9dIC0gQ2FjaGUgZm9sZGVyDQogICAgICogICBAdmFyIHN0cmluZyAkc291cmNlIC0gU291cmNlIGZpbGUgcGF0aA0KICAgICAqICAgQHZhciBzdHJpbmcgWyRtb2RlPXRodW1ibmFpbF0gLSBPbmUgb2YgdGh1bWJuYWlsfGJlc3RGaXR8cmVzaXplfGZpdFRvV2lkdGh8Zml0VG9IZWlnaHQNCiAgICAgKiAgIEB2YXIgc3RyaW5nIFskZnBdIC0gUG9zaXRpb24NCiAgICAgKiAgIEB2YXIgYXJyYXkgWyRmaWx0ZXJzXSAtIEFzc29jaWF0aXZlIGFycmF5IG9mIGZpbHRlcnMgYW5kIGl0J3Mgb3B0aW9uczogWydzZXBpYScsICdzaGFycGVuJ10NCiAgICAgKiAgIEB2YXIgaW50ZWdlciBbJHdpZHRoXSAtIE91dHB1dCB3aWR0aA0KICAgICAqICAgQHZhciBpbnRlZ2VyIFskaGVpZ2h0XSAtIE91dHB1dCBoZWlnaHQNCiAgICAgKiAgIEB2YXIgaW50ZWdlciBbJHF1YWxpdHk9MTAwXSAtIE91dHB1dCBxdWFsaXR5DQogICAgICogICBAdmFyIGJvb2xlYW4gWyRyZWJ1aWxkPWZhbHNlXSAtIEZvcmNlIGltYWdlIHJlYnVpbGQNCiAgICAgKiAgIEB2YXIgYm9vbGVhbiBbJGJhc2U2ND1mYWxzZV0gLSBCYXNlNjQgb3V0cHV0DQogICAgICogICBAdmFyIGJvb2xlYW4gWyRvdXRwdXQ9ZmFsc2VdIC0gRWNobyByZXNwb25zZSBhbmQgZXhpdCBhcHBsaWNhdGlvbg0KICAgICAqIH0NCiAgICAgKiBAcmV0dXJuIHN0cmluZyBVUkwgdG8gZmlsZSBvciBCYXNlNjQgb3V0cHV0DQogICAgICovDQogICAgJ3RodW1ibmFpbCcgPT4gZnVuY3Rpb24oJG9wdGlvbnMpIHsNCg0KICAgICAgICAkb3B0aW9ucyA9IGFycmF5X21lcmdlKFsNCiAgICAgICAgICAgICdjYWNoZWZvbGRlcicgPT4gJ3RodW1iczovLycsDQogICAgICAgICAgICAnc3JjJyA9PiAnJywNCiAgICAgICAgICAgICdtb2RlJyA9PiAndGh1bWJuYWlsJywNCiAgICAgICAgICAgICdtaW1lJyA9PiBudWxsLA0KICAgICAgICAgICAgJ2ZwJyA9PiBudWxsLA0KICAgICAgICAgICAgJ2ZpbHRlcnMnID0+IFtdLA0KICAgICAgICAgICAgJ3dpZHRoJyA9PiBmYWxzZSwNCiAgICAgICAgICAgICdoZWlnaHQnID0+IGZhbHNlLA0KICAgICAgICAgICAgJ3F1YWxpdHknID0+IDEwMCwNCiAgICAgICAgICAgICdyZWJ1aWxkJyA9PiBmYWxzZSwNCiAgICAgICAgICAgICdiYXNlNjQnID0+IGZhbHNlLA0KICAgICAgICAgICAgJ291dHB1dCcgPT4gZmFsc2UsDQogICAgICAgICAgICAncmVkaXJlY3QnID0+IGZhbHNlLA0KICAgICAgICBdLCAkb3B0aW9ucyk7DQoNCiAgICAgICAgZXh0cmFjdCgkb3B0aW9ucyk7DQoNCiAgICAgICAgaWYgKCEkd2lkdGggJiYgISRoZWlnaHQpIHsNCiAgICAgICAgICAgIHJldHVybiBbJ2Vycm9yJyA9PiAnVGFyZ2V0IHdpZHRoIG9yIGhlaWdodCBwYXJhbWV0ZXIgaXMgbWlzc2luZyddOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKCEkc3JjKSB7DQogICAgICAgICAgICByZXR1cm4gWydlcnJvcicgPT4gJ01pc3Npbmcgc3JjIHBhcmFtZXRlciddOw0KICAgICAgICB9DQoNCiAgICAgICAgJHNyYyAgID0gc3RyX3JlcGxhY2UoJy4uLycsICcnLCByYXd1cmxkZWNvZGUoJHNyYykpOw0KICAgICAgICAkYXNzZXQgPSBudWxsOw0KDQogICAgICAgIC8vIGlzIGFzc2V0Pw0KICAgICAgICBpZiAoc3RycG9zKCRzcmMsICR0aGlzLT5hcHAtPmZpbGVzdG9yYWdlLT5nZXRVcmwoJ2Fzc2V0czovLycpKSA9PT0gMCkgew0KDQogICAgICAgICAgICAkcGF0aCA9IHRyaW0oc3RyX3JlcGxhY2UocnRyaW0oJHRoaXMtPmFwcC0+ZmlsZXN0b3JhZ2UtPmdldFVybCgnYXNzZXRzOi8vJyksICcvJyksICcnLCAkc3JjKSwgJy8nKTsNCg0KICAgICAgICAgICAgdHJ5IHsNCg0KICAgICAgICAgICAgICAgIGlmICgkdGhpcy0+YXBwLT5maWxlc3RvcmFnZS0+aGFzKCdhc3NldHM6Ly8nLiRwYXRoKSkgew0KDQogICAgICAgICAgICAgICAgICAgICRhc3NldCA9ICR0aGlzLT5hcHAtPnN0b3JhZ2UtPmZpbmRPbmUoJ2NvY2twaXQvYXNzZXRzJywgWydwYXRoJyA9PiAiL3skcGF0aH0iXSk7DQoNCiAgICAgICAgICAgICAgICAgICAgaWYgKCEkYXNzZXQpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICRhc3NldCA9IFsncGF0aCcgPT4gIi97JHBhdGh9Il07DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiAkc3JjOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgfSBjYXRjaCAoXEV4Y2VwdGlvbiAkZSkgew0KICAgICAgICAgICAgICAgIHJldHVybiAkc3JjOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgIH0gZWxzZWlmICghcHJlZ19tYXRjaCgnL1wuKHBuZ3xqcGd8anBlZ3xnaWZ8c3ZnfHdlYnApJC9pJywgJHNyYykpIHsNCiAgICAgICAgICAgICRhc3NldCA9ICR0aGlzLT5hcHAtPnN0b3JhZ2UtPmZpbmRPbmUoJ2NvY2twaXQvYXNzZXRzJywgWydfaWQnID0+ICRzcmNdKTsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmICgkYXNzZXQpIHsNCg0KICAgICAgICAgICAgJGFzc2V0WydwYXRoJ10gPSB0cmltKCRhc3NldFsncGF0aCddLCAnLycpOw0KICAgICAgICAgICAgJHNyYyA9ICR0aGlzLT5hcHAtPnBhdGgoIiN1cGxvYWRzOnskYXNzZXRbJ3BhdGgnXX0iKTsNCg0KICAgICAgICAgICAgaWYgKCEkc3JjICYmICR0aGlzLT5hcHAtPmZpbGVzdG9yYWdlLT5oYXMoJ2Fzc2V0czovLycuJGFzc2V0WydwYXRoJ10pKSB7DQoNCiAgICAgICAgICAgICAgICAkc3RyZWFtID0gJHRoaXMtPmFwcC0+ZmlsZXN0b3JhZ2UtPnJlYWRTdHJlYW0oJ2Fzc2V0czovLycuJGFzc2V0WydwYXRoJ10pOw0KDQogICAgICAgICAgICAgICAgaWYgKCRzdHJlYW0pIHsNCiAgICAgICAgICAgICAgICAgICAkdGhpcy0+YXBwLT5maWxlc3RvcmFnZS0+d3JpdGVTdHJlYW0oJ3VwbG9hZHM6Ly8nLiRhc3NldFsncGF0aCddLCAkc3RyZWFtKTsNCiAgICAgICAgICAgICAgICAgICAkc3JjID0gJHRoaXMtPmFwcC0+cGF0aCgiI3VwbG9hZHM6eyRhc3NldFsncGF0aCddfSIpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKCRzcmMpIHsNCiAgICAgICAgICAgICAgICAkc3JjID0gc3RyX3JlcGxhY2UoQ09DS1BJVF9TSVRFX0RJUiwgJycsICRzcmMpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAoaXNzZXQoJGFzc2V0WydmcCddKSAmJiAhJGZwKSB7DQogICAgICAgICAgICAgICAgJGZwID0gJGFzc2V0WydmcCddWyd4J10uJyAnLiRhc3NldFsnZnAnXVsneSddOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKCRzcmMpIHsNCg0KICAgICAgICAgICAgJHBhdGggPSB0cmltKHN0cl9yZXBsYWNlKHJ0cmltKCR0aGlzLT5hcHAtPmZpbGVzdG9yYWdlLT5nZXRVcmwoJ3NpdGU6Ly8nKSwgJy8nKSwgJycsICRzcmMpLCAnLycpOw0KDQogICAgICAgICAgICBpZiAoZmlsZV9leGlzdHMoQ09DS1BJVF9TSVRFX0RJUi4nLycuJHBhdGgpKSB7DQogICAgICAgICAgICAgICAgJHNyYyA9IENPQ0tQSVRfU0lURV9ESVIuJy8nLiRwYXRoOw0KICAgICAgICAgICAgfSBlbHNlaWYgKGZpbGVfZXhpc3RzKENPQ0tQSVRfRE9DU19ST09ULicvJy4kcGF0aCkpIHsNCiAgICAgICAgICAgICAgICAkc3JjID0gQ09DS1BJVF9ET0NTX1JPT1QuJy8nLiRwYXRoOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgJHBhdGggID0gJHRoaXMtPmFwcC0+cGF0aCgkc3JjKTsNCiAgICAgICAgJGV4dCAgID0gc3RydG9sb3dlcihwYXRoaW5mbygkcGF0aCwgUEFUSElORk9fRVhURU5TSU9OKSk7DQoNCiAgICAgICAgaWYgKCFmaWxlX2V4aXN0cygkcGF0aCkgfHwgaXNfZGlyKCRwYXRoKSkgew0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8gaGFuZGxlIHN2ZyBmaWxlcw0KICAgICAgICBpZiAoJGV4dCA9PSAnc3ZnJykgew0KDQogICAgICAgICAgICBpZiAoJGJhc2U2NCkgew0KICAgICAgICAgICAgICAgIHJldHVybiAnZGF0YTppbWFnZS9zdmcreG1sO2Jhc2U2NCwnLmJhc2U2NF9lbmNvZGUoZmlsZV9nZXRfY29udGVudHMoJHBhdGgpKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKCRvdXRwdXQpIHsNCiAgICAgICAgICAgICAgICBoZWFkZXIoJ0NvbnRlbnQtVHlwZTogaW1hZ2Uvc3ZnK3htbCcpOw0KICAgICAgICAgICAgICAgIGhlYWRlcignQ29udGVudC1MZW5ndGg6ICcuZmlsZXNpemUoJHBhdGgpKTsNCiAgICAgICAgICAgICAgICBlY2hvIGZpbGVfZ2V0X2NvbnRlbnRzKCRwYXRoKTsNCiAgICAgICAgICAgICAgICAkdGhpcy0+YXBwLT5zdG9wKCk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHJldHVybiAkdGhpcy0+YXBwLT5wYXRoVG9VcmwoJHBhdGgsIHRydWUpOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKCFpbl9hcnJheSgkZXh0LCBbJ3BuZycsJ2pwZycsJ2pwZWcnLCdnaWYnLCAnd2VicCddKSkgew0KICAgICAgICAgICAgcmV0dXJuICR0aGlzLT5hcHAtPnBhdGhUb1VybCgkcGF0aCwgdHJ1ZSk7DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoISR3aWR0aCB8fCAhJGhlaWdodCB8fCAkd2lkdGggPT0gJ29yaWdpbmFsJyB8fCAkaGVpZ2h0ID09ICdvcmlnaW5hbCcpIHsNCg0KICAgICAgICAgICAgbGlzdCgkdywgJGgsICR0eXBlLCAkYXR0cikgID0gZ2V0aW1hZ2VzaXplKCRwYXRoKTsNCg0KICAgICAgICAgICAgaWYgKCR3aWR0aCA9PSAnb3JpZ2luYWwnKSAkd2lkdGggPSAkdzsNCiAgICAgICAgICAgIGlmICgkaGVpZ2h0ID09ICdvcmlnaW5hbCcpICRoZWlnaHQgPSAkaDsNCg0KICAgICAgICAgICAgaWYgKCEkd2lkdGgpICR3aWR0aCA9IGNlaWwoJHcgKiAoJGhlaWdodC8kaCkpOw0KICAgICAgICAgICAgaWYgKCEkaGVpZ2h0KSAkaGVpZ2h0ID0gY2VpbCgkaCAqICgkd2lkdGgvJHcpKTsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmIChpc19udWxsKCR3aWR0aCkgJiYgaXNfbnVsbCgkaGVpZ2h0KSkgew0KICAgICAgICAgICAgcmV0dXJuICR0aGlzLT5hcHAtPnBhdGhUb1VybCgkcGF0aCwgdHJ1ZSk7DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoISRmcCkgew0KICAgICAgICAgICAgJGZwID0gJ2NlbnRlcic7DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoIWluX2FycmF5KCRtb2RlLCBbJ3RodW1ibmFpbCcsICdiZXN0Rml0JywgJ3Jlc2l6ZScsJ2ZpdFRvV2lkdGgnLCdmaXRUb0hlaWdodCddKSkgew0KICAgICAgICAgICAgJG1vZGUgPSAndGh1bWJuYWlsJzsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmICgkbWltZSkgew0KDQogICAgICAgICAgICBpZiAoaW5fYXJyYXkoJG1pbWUsIFsnaW1hZ2UvZ2lmJywgJ2ltYWdlL2pwZWcnLCAnaW1hZ2UvcG5nJywnaW1hZ2Uvd2VicCcsJ2ltYWdlL2JtcCddKSkgew0KICAgICAgICAgICAgICAgICRleHQgPSBleHBsb2RlKCcvJywgJG1pbWUpWzFdOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAkbWltZSA9IG51bGw7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICAkbWV0aG9kID0gJG1vZGUgPT0gJ2Nyb3AnID8gJ3RodW1ibmFpbCcgOiAkbW9kZTsNCg0KICAgICAgICAkZmlsZXRpbWUgPSBmaWxlbXRpbWUoJHBhdGgpOw0KICAgICAgICAkaGFzaCA9IG1kNSgkcGF0aC5qc29uX2VuY29kZSgkb3B0aW9ucykpLiJfeyR3aWR0aH14eyRoZWlnaHR9X3skcXVhbGl0eX1feyRmaWxldGltZX1feyRtb2RlfV8iLm1kNSgkZnApLiIueyRleHR9IjsNCiAgICAgICAgJHRodW1icGF0aCA9ICRjYWNoZWZvbGRlci4iL3skaGFzaH0iOw0KDQogICAgICAgIGlmICgkcmVidWlsZCB8fCAhJHRoaXMtPmFwcC0+ZmlsZXN0b3JhZ2UtPmhhcygkdGh1bWJwYXRoKSkgew0KDQogICAgICAgICAgICB0cnkgew0KDQogICAgICAgICAgICAgICAgaWYgKCRyZWJ1aWxkICYmICR0aGlzLT5hcHAtPmZpbGVzdG9yYWdlLT5oYXMoJHRodW1icGF0aCkpIHsNCiAgICAgICAgICAgICAgICAgICAgJHRoaXMtPmFwcC0+ZmlsZXN0b3JhZ2UtPmRlbGV0ZSgkdGh1bWJwYXRoKTsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAkaW1nID0gJHRoaXMtPmFwcC0+aGVscGVyKCJpbWFnZSIpLT50YWtlKCRwYXRoKS0+eyRtZXRob2R9KCR3aWR0aCwgJGhlaWdodCwgJGZwKTsNCg0KICAgICAgICAgICAgICAgICRfZmlsdGVycyA9IFsNCiAgICAgICAgICAgICAgICAgICAgJ2JsdXInLCAnYnJpZ2h0ZW4nLA0KICAgICAgICAgICAgICAgICAgICAnY29sb3JpemUnLCAnY29udHJhc3QnLA0KICAgICAgICAgICAgICAgICAgICAnZGFya2VuJywgJ2Rlc2F0dXJhdGUnLA0KICAgICAgICAgICAgICAgICAgICAnZWRnZURldGVjdCcsICdlbWJvc3MnLA0KICAgICAgICAgICAgICAgICAgICAnZmxpcCcsICdpbnZlcnQnLCAnb3BhY2l0eScsICdwaXhlbGF0ZScsICdzZXBpYScsICdzaGFycGVuJywgJ3NrZXRjaCcNCiAgICAgICAgICAgICAgICBdOw0KDQogICAgICAgICAgICAgICAgLy8gQXBwbHkgc2luZ2xlIGZpbHRlcg0KICAgICAgICAgICAgICAgIGZvcmVhY2ggKCRfZmlsdGVycyBhcyAkZikgew0KDQogICAgICAgICAgICAgICAgICAgIGlmIChpc3NldCgkb3B0aW9uc1skZl0pKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAkaW1nLT57JGZ9KCRvcHRpb25zWyRmXSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAvLyBBcHBseSBtdWx0aXBsZSBmaWx0ZXJzDQogICAgICAgICAgICAgICAgZm9yZWFjaCAoJGZpbHRlcnMgYXMgJGZpbHRlck5hbWUgPT4gJGZpbHRlck9wdGlvbnMpIHsNCiAgICAgICAgICAgICAgICAgICAgLy8gSGFuZGxlIG5vbi1hc3NvY2lhdGl2ZSBhcnJheQ0KICAgICAgICAgICAgICAgICAgICBpZiAoaXNfaW50KCRmaWx0ZXJOYW1lKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgJGZpbHRlck5hbWUgPSAkZmlsdGVyT3B0aW9uczsNCiAgICAgICAgICAgICAgICAgICAgICAgICRmaWx0ZXJPcHRpb25zID0gW107DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICBpZiAoaW5fYXJyYXkoJGZpbHRlck5hbWUsICRfZmlsdGVycykpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxfdXNlcl9mdW5jX2FycmF5KFskaW1nLCAkZmlsdGVyTmFtZV0sIChhcnJheSkgJGZpbHRlck9wdGlvbnMpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgJHRoaXMtPmFwcC0+ZmlsZXN0b3JhZ2UtPndyaXRlKCR0aHVtYnBhdGgsICRpbWctPnRvU3RyaW5nKCRtaW1lLCAkcXVhbGl0eSkpOw0KDQogICAgICAgICAgICAgICAgdW5zZXQoJGltZyk7DQoNCiAgICAgICAgICAgIH0gY2F0Y2goRXhjZXB0aW9uICRlKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuICJkYXRhOmltYWdlL2dpZjtiYXNlNjQsUjBsR09EbGhBUUFCQUpFQUFBQUFBUC8vLy8vLy93QUFBQ0g1QkFFSEFBSUFMQUFBQUFBQkFBRUFBQUlDVkFFQU93PT0iOyAvLyB0cmFuc3BhcmVudCAxcHggZ2lmDQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoJGJhc2U2NCkgew0KICAgICAgICAgICAgcmV0dXJuICJkYXRhOmltYWdlL3skZXh0fTtiYXNlNjQsIi5iYXNlNjRfZW5jb2RlKCR0aGlzLT5hcHAtPmZpbGVzdG9yYWdlLT5yZWFkKCR0aHVtYnBhdGgpKTsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmICgkb3V0cHV0KSB7DQoNCiAgICAgICAgICAgIGlmICgkb3V0cHV0ID09ICdyZWRpcmVjdCcpIHsNCiAgICAgICAgICAgICAgICAkdGhpcy0+YXBwLT5yZXJvdXRlKCR0aGlzLT5hcHAtPmZpbGVzdG9yYWdlLT5nZXRVUkwoJHRodW1icGF0aCkpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBoZWFkZXIoIkNvbnRlbnQtVHlwZTogaW1hZ2UveyRleHR9Iik7DQogICAgICAgICAgICBoZWFkZXIoJ0NvbnRlbnQtTGVuZ3RoOiAnLiR0aGlzLT5hcHAtPmZpbGVzdG9yYWdlLT5nZXRTaXplKCR0aHVtYnBhdGgpKTsNCiAgICAgICAgICAgIGVjaG8gJHRoaXMtPmFwcC0+ZmlsZXN0b3JhZ2UtPnJlYWQoJHRodW1icGF0aCk7DQogICAgICAgICAgICAkdGhpcy0+YXBwLT5zdG9wKCk7DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoJHJlZGlyZWN0KSB7DQogICAgICAgICAgICAkdGhpcy0+YXBwLT5yZXJvdXRlKCR0aGlzLT5hcHAtPmZpbGVzdG9yYWdlLT5nZXRVUkwoJHRodW1icGF0aCkpOw0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuICR0aGlzLT5hcHAtPmZpbGVzdG9yYWdlLT5nZXRVUkwoJHRodW1icGF0aCk7DQogICAgfQ0KXSk7DQoNCg0KLy8gQWRkaXRpb25hbCBtb2R1bGUgQXBpDQppbmNsdWRlX29uY2UoX19ESVJfXy4nL21vZHVsZS9hdXRoLnBocCcpOw0KaW5jbHVkZV9vbmNlKF9fRElSX18uJy9tb2R1bGUvYXNzZXRzLnBocCcpOw0KDQoNCi8vIEFETUlODQppZiAoQ09DS1BJVF9BRE1JTl9DUCkgew0KDQogICAgaW5jbHVkZV9vbmNlKF9fRElSX18uJy9hZG1pbi5waHAnKTsNCg0KICAgICR0aGlzLT5iaW5kKCcvY29ja3BpdC1hcGkuanMnLCBmdW5jdGlvbigpIHsNCg0KICAgICAgICAkdG9rZW4gPSAkdGhpcy0+cGFyYW0oJ3Rva2VuJywgJycpOw0KICAgICAgICAkdGhpcy0+cmVzcG9uc2UtPm1pbWUgPSAnanMnOw0KDQogICAgICAgICRhcGl1cmwgPSAoJHRoaXMtPnJlcXVlc3QtPmlzKCdzc2wnKSA/ICdodHRwcyc6J2h0dHAnKS4nOi8vJzsNCg0KICAgICAgICBpZiAoIWluX2FycmF5KCR0aGlzLT5yZWdpc3RyeVsnYmFzZV9wb3J0J10sIFsnODAnLCAnNDQzJ10pKSB7DQogICAgICAgICAgICAkYXBpdXJsIC49ICR0aGlzLT5yZWdpc3RyeVsnYmFzZV9ob3N0J10uIjoiLiR0aGlzLT5yZWdpc3RyeVsnYmFzZV9wb3J0J107DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAkYXBpdXJsIC49ICR0aGlzLT5yZWdpc3RyeVsnYmFzZV9ob3N0J107DQogICAgICAgIH0NCg0KICAgICAgICAkYXBpdXJsIC49ICR0aGlzLT5yb3V0ZVVybCgnL2FwaScpOw0KDQogICAgICAgIHJldHVybiAkdGhpcy0+dmlldygnY29ja3BpdDp2aWV3cy9hcGkuanMnLCBjb21wYWN0KCd0b2tlbicsICdhcGl1cmwnKSk7DQogICAgfSk7DQp9DQoNCi8vIENMSQ0KaWYgKENPQ0tQSVRfQ0xJKSB7DQogICAgJHRoaXMtPnBhdGgoJyNjbGknLCBfX0RJUl9fLicvY2xpJyk7DQp9DQoNCi8vIFdFQkhPT0tTDQppZiAoIWRlZmluZWQoJ0NPQ0tQSVRfSU5TVEFMTCcpKSB7DQogICAgaW5jbHVkZV9vbmNlKF9fRElSX18uJy93ZWJob29rcy5waHAnKTsNCn0NCg0KLy8gUkVTVA0KaWYgKENPQ0tQSVRfQVBJX1JFUVVFU1QpIHsNCg0KICAgIC8vIElOSVQgUkVTVCBBUEkgSEFORExFUg0KICAgIGluY2x1ZGVfb25jZShfX0RJUl9fLicvcmVzdC1hcGkucGhwJyk7DQoNCiAgICAkdGhpcy0+b24oJ2NvY2twaXQucmVzdC5pbml0JywgZnVuY3Rpb24oJHJvdXRlcykgew0KICAgICAgICAkcm91dGVzWydjb2NrcGl0J10gPSAnQ29ja3BpdFxcQ29udHJvbGxlclxcUmVzdEFwaSc7DQogICAgfSk7DQp9DQoiO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAbmFtZXNwYWNlcyI7YTowOnt9czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBpbmNsdWRlcyI7YTowOnt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBmdW5jdGlvbnMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAY29uc3RhbnRzIjthOjA6e31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNsYXNzZXMiO2E6MDp7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW50ZXJmYWNlcyI7YTowOnt9czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQB0cmFpdHMiO2E6MDp7fXM6NDA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAZW51bXMiO2E6MDp7fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAbWV0YWRhdGEiO2E6MDp7fX0=";