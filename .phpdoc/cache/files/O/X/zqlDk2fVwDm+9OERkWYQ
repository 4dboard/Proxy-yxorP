1689528007
waR3U4bTeM%3Ace029a4fd53d34203865789f49f5d99f-975538b4b5ad8254a67a750c59059902
s:41344:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxNDp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6Ijk3NTUzOGI0YjVhZDgyNTRhNjdhNzUwYzU5MDU5OTAyIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6NTM6ImVudHJpZXMucGhwLmM1MmVjYWJkOWI1YjkyMmY5MGExZjNlMTI2N2QzOGVkLmxleHkucGhwIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHBhdGgiO3M6ODE6ImFwcC9saWIvY29ja3BpdC9zdG9yYWdlL3RtcC9lbnRyaWVzLnBocC5jNTJlY2FiZDliNWI5MjJmOTBhMWYzZTEyNjdkMzhlZC5sZXh5LnBocCI7czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBzb3VyY2UiO3M6MzAwMDU6Ig0KPHN0eWxlPg0KDQoudWstc2Nyb2xsYWJsZS1ib3ggew0KICAgIGJvcmRlcjogbm9uZTsNCiAgICBwYWRkaW5nLXRvcDogMDsNCiAgICBwYWRkaW5nLWxlZnQ6IDA7DQp9DQoNCi5jb2xsZWN0aW9uLWdyaWQtYXZhdGFyLWNvbnRhaW5lciB7DQogICAgYm9yZGVyLXRvcDogMXB4IHJnYmEoMCwwLDAsMC4xKSBzb2xpZDsNCn0NCg0KLmNvbGxlY3Rpb24tZ3JpZC1hdmF0YXIgew0KICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTsNCiAgICBtYXgtd2lkdGg6IDQwcHg7DQogICAgbWF4LWhlaWdodDogNDBweDsNCiAgICBib3JkZXI6IDFweCAjZmZmIHNvbGlkOw0KICAgIGJveC1zaGFkb3c6IDAgMCA0MHB4IHJnYmEoMCwwLDAsMC4zKTsNCiAgICBib3JkZXItcmFkaXVzOiA1MCU7DQogICAgbWFyZ2luOiAwIGF1dG87DQp9DQoNCi5jb2xsZWN0aW9uLWdyaWQtYXZhdGFyIC51ay1pY29uLXNwaW5uZXIgew0KICAgIGRpc3BsYXk6IG5vbmU7DQp9DQoNCjwvc3R5bGU+DQoNCg0KDQo8ZGl2IGNsYXNzPSJ1ay1tYXJnaW4tdG9wIiByaW90LXZpZXc+DQoNCiAgICA8ZGl2IGNsYXNzPSJ1ay1tYXJnaW4gdWstdGV4dC1jZW50ZXIgdWstdGV4dC1tdXRlZCIgc2hvdz0ieyAoQXJyYXkuaXNBcnJheShlbnRyaWVzKSAmJiBlbnRyaWVzLmxlbmd0aCkgfHwgZmlsdGVyfSI+DQoNCiAgICAgICAgPGltZyBjbGFzcz0idWstc3ZnLWFkanVzdCIgc3JjPSI8P3BocCBlY2hvICRhcHAtPnBhdGhUb1VybCgkY29sbGVjdGlvblsnaWNvbiddID8gJ2Fzc2V0czphcHAvbWVkaWEvaWNvbnMvJy4kY29sbGVjdGlvblsnaWNvbiddOidjb2xsZWN0aW9uczppY29uLnN2ZycpOyA/PiIgd2lkdGg9IjUwIiBhbHQ9Imljb24iIGRhdGEtdWstc3ZnPg0KICAgICAgICA8P3BocCBpZiAoJGNvbGxlY3Rpb25bJ2Rlc2NyaXB0aW9uJ10pIHsgPz4NCiAgICAgICAgPGRpdiBjbGFzcz0idWstY29udGFpbmVyLWNlbnRlciB1ay1tYXJnaW4tdG9wIHVrLXdpZHRoLW1lZGl1bS0xLTIiPg0KICAgICAgICAgICAgPD9waHAgZWNobyAgaHRtbHNwZWNpYWxjaGFycygkY29sbGVjdGlvblsnZGVzY3JpcHRpb24nXSwgRU5UX1FVT1RFUywgJ1VURi04JykgOyA/Pg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPD9waHAgfSA/Pg0KICAgIDwvZGl2Pg0KDQoNCiAgICA8ZGl2Pg0KDQogICAgICAgIDxkaXYgY2xhc3M9InVrLXdpZHRoLW1lZGl1bS0xLTMgdWstdmlld3BvcnQtaGVpZ2h0LTEtMiB1ay1jb250YWluZXItY2VudGVyIHVrLXRleHQtY2VudGVyIHVrLWZsZXggdWstZmxleC1jZW50ZXIgdWstZmxleC1taWRkbGUiIGlmPSJ7IGxvYWRpbmcgfSI+DQoNCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InVrLWFuaW1hdGlvbi1mYWRlIHVrLXRleHQtY2VudGVyIj4NCg0KICAgICAgICAgICAgICAgIDxjcC1wcmVsb2FkZXIgY2xhc3M9InVrLWNvbnRhaW5lci1jZW50ZXIiPjwvY3AtcHJlbG9hZGVyPg0KDQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICA8L2Rpdj4NCg0KICAgICAgICA8ZGl2IGNsYXNzPSJ1ay13aWR0aC1tZWRpdW0tMS0zIHVrLXZpZXdwb3J0LWhlaWdodC0xLTIgdWstY29udGFpbmVyLWNlbnRlciB1ay10ZXh0LWNlbnRlciB1ay1mbGV4IHVrLWZsZXgtY2VudGVyIHVrLWZsZXgtbWlkZGxlIiBpZj0ieyAhbG9hZGluZyAmJiAhZW50cmllcy5sZW5ndGggJiYgIWZpbHRlciB9Ij4NCg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0idWstYW5pbWF0aW9uLXNjYWxlIj4NCg0KICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9InVrLXN2Zy1hZGp1c3QiIHNyYz0iPD9waHAgZWNobyAkYXBwLT5wYXRoVG9VcmwoJGNvbGxlY3Rpb25bJ2ljb24nXSA/ICdhc3NldHM6YXBwL21lZGlhL2ljb25zLycuJGNvbGxlY3Rpb25bJ2ljb24nXTonY29sbGVjdGlvbnM6aWNvbi5zdmcnKTsgPz4iIHdpZHRoPSI1MCIgYWx0PSJpY29uIiBkYXRhLXVrLXN2Zz4NCiAgICAgICAgICAgICAgICA8P3BocCBpZiAoJGNvbGxlY3Rpb25bJ2Rlc2NyaXB0aW9uJ10pIHsgPz4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1ay1tYXJnaW4tdG9wIHVrLXRleHQtc21hbGwgdWstdGV4dC1tdXRlZCI+DQogICAgICAgICAgICAgICAgICAgIDw/cGhwIGVjaG8gIGh0bWxzcGVjaWFsY2hhcnMoJGNvbGxlY3Rpb25bJ2Rlc2NyaXB0aW9uJ10sIEVOVF9RVU9URVMsICdVVEYtOCcpIDsgPz4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8P3BocCB9ID8+DQogICAgICAgICAgICAgICAgPGhyPg0KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ1ay10ZXh0LWxhcmdlIj48c3Ryb25nPjw/cGhwIGVjaG8gJGFwcCgiaTE4biIpLT5nZXQoJ05vIGVudHJpZXMnKTsgPz4uPC9zdHJvbmc+IDxhIGhyZWY9Ijw/cGhwICRhcHAtPnJvdXRlKCcvY29sbGVjdGlvbnMvZW50cnkvJy4kY29sbGVjdGlvblsnbmFtZSddKTsgPz4iPjw/cGhwIGVjaG8gJGFwcCgiaTE4biIpLT5nZXQoJ0NyZWF0ZSBhbiBlbnRyeScpOyA/Pi48L2E+PC9zcGFuPg0KDQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICA8L2Rpdj4NCg0KICAgICAgICA8ZGl2IGNsYXNzPSJ1ay1jbGVhcmZpeCB1ay1tYXJnaW4tdG9wIiBzaG93PSJ7ICFsb2FkaW5nICYmIChlbnRyaWVzLmxlbmd0aCB8fCBmaWx0ZXIpIH0iPg0KDQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1ay1mbG9hdC1sZWZ0Ij4NCg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVrLWJ1dHRvbi1ncm91cCI+DQogICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9InVrLWJ1dHRvbiB1ay1idXR0b24tbGFyZ2Uge2xpc3Rtb2RlPT0nbGlzdCcgJiYgJ3VrLWJ1dHRvbi1wcmltYXJ5J30iIG9uY2xpY2s9InsgdG9nZ2xlTGlzdE1vZGUgfSI+PGkgY2xhc3M9InVrLWljb24tbGlzdCI+PC9pPjwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJ1ay1idXR0b24gdWstYnV0dG9uLWxhcmdlIHtsaXN0bW9kZT09J2dyaWQnICYmICd1ay1idXR0b24tcHJpbWFyeSd9IiBvbmNsaWNrPSJ7IHRvZ2dsZUxpc3RNb2RlIH0iPjxpIGNsYXNzPSJ1ay1pY29uLXRoIj48L2k+PC9idXR0b24+DQogICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1ay1mbG9hdC1sZWZ0IHVrLWZvcm0tc2VsZWN0IHVrLW1hcmdpbi1zbWFsbC1sZWZ0IiBpZj0ieyAhbG9hZGluZyAmJiBsYW5ndWFnZXMubGVuZ3RoIH0iPg0KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ1ay1idXR0b24gdWstYnV0dG9uLWxhcmdlIHVrLWJ1dHRvbi1saW5rIHtsYW5nID8gJ3VrLXRleHQtcHJpbWFyeScgOiAndWstdGV4dC1tdXRlZCd9Ij4NCiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9InVrLWljb24tZ2xvYmUiPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgeyBsYW5nID8gXy5maW5kKGxhbmd1YWdlcyx7J2NvZGUnOmxhbmd9KS5sYWJlbCA6IEFwcC4kZGF0YS5sYW5ndWFnZURlZmF1bHRMYWJlbCB9DQogICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgIDxzZWxlY3Qgb25jaGFuZ2U9IntjaGFuZ2VsYW5ndWFnZX0iPg0KICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJ7bGFuZyA9PT0gJyd9Ij57QXBwLiRkYXRhLmxhbmd1YWdlRGVmYXVsdExhYmVsfTwvb3B0aW9uPg0KICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIGVhY2g9IntsYW5ndWFnZSxpZHggaW4gbGFuZ3VhZ2VzfSIgdmFsdWU9IntsYW5ndWFnZS5jb2RlfSIgc2VsZWN0ZWQ9IntsYW5nID09PSBsYW5ndWFnZS5jb2RlfSI+e2xhbmd1YWdlLmxhYmVsfTwvb3B0aW9uPg0KICAgICAgICAgICAgICAgIDwvc2VsZWN0Pg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InVrLWZsb2F0LWxlZnQgdWstd2lkdGgtMS0yIHVrLW1hcmdpbi1zbWFsbC1sZWZ0Ij4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1ay1mb3JtLWljb24gdWstZm9ybSB1ay13aWR0aC0xLTEgdWstdGV4dC1tdXRlZCI+DQoNCiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9InVrLWljb24tc2VhcmNoIj48L2k+DQogICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0idWstd2lkdGgtMS0xIHVrLWZvcm0tbGFyZ2UgdWstZm9ybS1ibGFuayB7ZmlsdGVyICYmIGZpbHRlci5tYXRjaCgvXHsoLiopXH0vKSAmJiAndWstdGV4dC1tb25vc3BhY2UnfSIgdHlwZT0idGV4dCIgcmVmPSJ0eHRmaWx0ZXIiIHBsYWNlaG9sZGVyPSI8P3BocCBlY2hvICRhcHAoImkxOG4iKS0+Z2V0KCdGaWx0ZXIgaXRlbXMuLi4nKTsgPz4iIG9uY2hhbmdlPSJ7IHVwZGF0ZWZpbHRlciB9Ij4NCg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InVrLWZsb2F0LXJpZ2h0Ij4NCg0KICAgICAgICAgICAgICAgIDw/cGhwIGlmICgkYXBwLT5tb2R1bGUoJ2NvbGxlY3Rpb25zJyktPmhhc2FjY2VzcygkY29sbGVjdGlvblsnbmFtZSddLCAnZW50cmllc19lZGl0JykpIHsgPz4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1ay1kaXNwbGF5LWlubGluZS1ibG9jayB1ay1tYXJnaW4tc21hbGwtcmlnaHQiIGRhdGEtdWstZHJvcGRvd249Im1vZGU6J2NsaWNrJyIgaWY9Insgc2VsZWN0ZWQubGVuZ3RoIH0iPg0KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJ1ay1idXR0b24gdWstYnV0dG9uLWxhcmdlIHVrLWFuaW1hdGlvbi1mYWRlIj48P3BocCBlY2hvICRhcHAoImkxOG4iKS0+Z2V0KCdCYXRjaCBBY3Rpb24nKTsgPz4gPHNwYW4gY2xhc3M9InVrLWJhZGdlIHVrLWJhZGdlLWNvbnRyYXN0IHVrLW1hcmdpbi1zbWFsbC1sZWZ0Ij57IHNlbGVjdGVkLmxlbmd0aCB9PC9zcGFuPjwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1ay1kcm9wZG93biI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InVrLW5hdiB1ay1uYXYtZHJvcGRvd24gdWstZHJvcGRvd24tY2xvc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idWstbmF2LWhlYWRlciI+PD9waHAgZWNobyAkYXBwKCJpMThuIiktPmdldCgnQWN0aW9ucycpOyA/PjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIG9uY2xpY2s9InsgYmF0Y2hlZGl0IH0iPjw/cGhwIGVjaG8gJGFwcCgiaTE4biIpLT5nZXQoJ0VkaXQnKTsgPz48L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8P3BocCBpZiAoJGFwcC0+bW9kdWxlKCdjb2xsZWN0aW9ucycpLT5oYXNhY2Nlc3MoJGNvbGxlY3Rpb25bJ25hbWUnXSwgJ2VudHJpZXNfZGVsZXRlJykpIHsgPz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InVrLW5hdi1pdGVtLWRhbmdlciI+PGEgb25jbGljaz0ieyByZW1vdmVzZWxlY3RlZCB9Ij48P3BocCBlY2hvICRhcHAoImkxOG4iKS0+Z2V0KCdEZWxldGUnKTsgPz48L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8P3BocCB9ID8+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8P3BocCB9ID8+DQoNCiAgICAgICAgICAgICAgICA8P3BocCBpZiAoJGFwcC0+bW9kdWxlKCdjb2xsZWN0aW9ucycpLT5oYXNhY2Nlc3MoJGNvbGxlY3Rpb25bJ25hbWUnXSwgJ2VudHJpZXNfY3JlYXRlJykpIHsgPz4NCiAgICAgICAgICAgICAgICA8YSBjbGFzcz0idWstYnV0dG9uIHVrLWJ1dHRvbi1sYXJnZSB1ay1idXR0b24tcHJpbWFyeSIgaHJlZj0iPD9waHAgJGFwcC0+cm91dGUoJy9jb2xsZWN0aW9ucy9lbnRyeS8nLiRjb2xsZWN0aW9uWyduYW1lJ10pOyA/PiI+PD9waHAgZWNobyAkYXBwKCJpMThuIiktPmdldCgnQWRkIEVudHJ5Jyk7ID8+PC9hPg0KICAgICAgICAgICAgICAgIDw/cGhwIH0gPz4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCg0KICAgICAgICA8ZGl2IGNsYXNzPSJ1ay1tYXJnaW4tdG9wIiBzaG93PSJ7ICFsb2FkaW5nICYmIChlbnRyaWVzLmxlbmd0aCB8fCBmaWx0ZXIpIH0iPg0KDQogICAgICAgIDxkaXYgY2xhc3M9InVrLXRleHQteGxhcmdlIHVrLXRleHQtbXV0ZWQgdWstdmlld3BvcnQtaGVpZ2h0LTEtMyB1ay1mbGV4IHVrLWZsZXgtY2VudGVyIHVrLWZsZXgtbWlkZGxlIiBpZj0ieyAhZW50cmllcy5sZW5ndGggJiYgZmlsdGVyICYmICFsb2FkaW5nIH0iPg0KICAgICAgICAgICAgPGRpdj48P3BocCBlY2hvICRhcHAoImkxOG4iKS0+Z2V0KCdObyBlbnRyaWVzIGZvdW5kJyk7ID8+PC9kaXY+DQogICAgICAgIDwvZGl2Pg0KDQoNCiAgICAgICAgPGRpdiBjbGFzcz0idWstZ3JpZCB1ay1ncmlkLW1hdGNoIHVrLWdyaWQtd2lkdGgtbWVkaXVtLTEtNCB1ay1mbGV4LWNlbnRlciIgaWY9InsgZW50cmllcy5sZW5ndGggJiYgIWxvYWRpbmcgJiYgbGlzdG1vZGU9PSdncmlkJyB9Ij4NCg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0idWstZ3JpZC1tYXJnaW4iIGVhY2g9IntlbnRyeSxpZHggaW4gZW50cmllc30iPg0KDQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idWstcGFuZWwgdWstcGFuZWwtYm94IHVrLXBhbmVsLWNhcmQgdWstcGFuZWwtY2FyZC1ob3ZlciI+DQoNCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idWstcG9zaXRpb24tcmVsYXRpdmUgdWstbmJmYyI+DQogICAgICAgICAgICAgICAgICAgICAgICA8Y2FudmFzIHdpZHRoPSI0MDAiIGhlaWdodD0iMjUwIj48L2NhbnZhcz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVrLXBvc2l0aW9uLWNvdmVyIHVrLWZsZXggdWstZmxleC1jZW50ZXIgdWstZmxleC1taWRkbGUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNwLXRodW1ibmFpbCBzcmM9InsgcGFyZW50LmlzSW1hZ2VGaWVsZChlbnRyeSkgfSIgd2lkdGg9IjQwMCIgaGVpZ2h0PSIyNTAiIGlmPSJ7IHBhcmVudC5pc0ltYWdlRmllbGQoZW50cnkpIH0iPjwvY3AtdGh1bWJuYWlsPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idWstc3ZnLWFkanVzdCB1ay10ZXh0LXByaW1hcnkiIHN0eWxlPSJjb2xvcjo8P3BocCBlY2hvICBAJGNvbGxlY3Rpb25bJ2NvbG9yJ10gOyA/PiAhaW1wb3J0YW50OyIgaWY9InsgIXBhcmVudC5pc0ltYWdlRmllbGQoZW50cnkpIH0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iPD9waHAgZWNobyAkYXBwLT5wYXRoVG9VcmwoJGNvbGxlY3Rpb25bJ2ljb24nXSA/ICdhc3NldHM6YXBwL21lZGlhL2ljb25zLycuJGNvbGxlY3Rpb25bJ2ljb24nXTonY29sbGVjdGlvbnM6aWNvbi5zdmcnKTsgPz4iIHdpZHRoPSI4MCIgYWx0PSJpY29uIiBkYXRhLXVrLXN2Zz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InVrLXBvc2l0aW9uLWNvdmVyIiBocmVmPSI8P3BocCAkYXBwLT5yb3V0ZSgnL2NvbGxlY3Rpb25zL2VudHJ5LycuJGNvbGxlY3Rpb25bJ25hbWUnXSk7ID8+L3sgZW50cnkuX2lkIH0iPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbGxlY3Rpb24tZ3JpZC1hdmF0YXItY29udGFpbmVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbGxlY3Rpb24tZ3JpZC1hdmF0YXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjcC1hY2NvdW50IGFjY291bnQ9IntlbnRyeS5fbWJ5IHx8IGVudHJ5Ll9ieX0iIGxhYmVsPSJ7ZmFsc2V9IiBzaXplPSI0MCIgaWY9IntlbnRyeS5fbWJ5IHx8IGVudHJ5Ll9ieX0iPjwvY3AtYWNjb3VudD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y3AtZ3JhdmF0YXIgYWx0PSI/IiBzaXplPSI0MCIgaWY9InshKGVudHJ5Ll9tYnkgfHwgZW50cnkuX2J5KX0iPjwvY3AtZ3JhdmF0YXI+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVrLWZsZXggdWstZmxleC1taWRkbGUgdWstbWFyZ2luLXNtYWxsLXRvcCI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVrLWZsZXgtaXRlbS0xIHVrLW1hcmdpbi1zbWFsbC1yaWdodCB1ay10ZXh0LXNtYWxsIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idWstdGV4dC1zdWNjZXNzIHVrLW1hcmdpbi1zbWFsbC1yaWdodCI+eyBBcHAuVXRpbHMuZGF0ZWZvcm1hdCggbmV3IERhdGUoIDEwMDAgKiBlbnRyeS5fY3JlYXRlZCApKSB9PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ1ay10ZXh0LXByaW1hcnkiPnsgQXBwLlV0aWxzLmRhdGVmb3JtYXQoIG5ldyBEYXRlKCAxMDAwICogZW50cnkuX21vZGlmaWVkICkpIH08L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS11ay1kcm9wZG93bj0ibW9kZTonY2xpY2snLCBwb3M6J2JvdHRvbS1yaWdodCciPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InVrLWljb24tYmFycyI+PC9hPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idWstZHJvcGRvd24gdWstZHJvcGRvd24tZmxpcCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idWstbmF2IHVrLW5hdi1kcm9wZG93biI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InVrLW5hdi1oZWFkZXIiPjw/cGhwIGVjaG8gJGFwcCgiaTE4biIpLT5nZXQoJ0FjdGlvbnMnKTsgPz48L2xpPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8P3BocCBpZiAoJGFwcC0+bW9kdWxlKCdjb2xsZWN0aW9ucycpLT5oYXNhY2Nlc3MoJGNvbGxlY3Rpb25bJ25hbWUnXSwgJ2VudHJpZXNfZWRpdCcpKSB7ID8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iPD9waHAgJGFwcC0+cm91dGUoJy9jb2xsZWN0aW9ucy9lbnRyeS8nLiRjb2xsZWN0aW9uWyduYW1lJ10pOyA/Pi97IGVudHJ5Ll9pZCB9Ij48P3BocCBlY2hvICRhcHAoImkxOG4iKS0+Z2V0KCdFZGl0Jyk7ID8+PC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8P3BocCB9IGVsc2UgeyA/Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ijw/cGhwICRhcHAtPnJvdXRlKCcvY29sbGVjdGlvbnMvZW50cnkvJy4kY29sbGVjdGlvblsnbmFtZSddKTsgPz4veyBlbnRyeS5faWQgfSI+PD9waHAgZWNobyAkYXBwKCJpMThuIiktPmdldCgnVmlldycpOyA/PjwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAgfSA/Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8P3BocCBpZiAoJGFwcC0+bW9kdWxlKCdjb2xsZWN0aW9ucycpLT5oYXNhY2Nlc3MoJGNvbGxlY3Rpb25bJ25hbWUnXSwgJ2VudHJpZXNfZGVsZXRlJykpIHsgPz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idWstbmF2LWl0ZW0tZGFuZ2VyIj48YSBjbGFzcz0idWstZHJvcGRvd24tY2xvc2UiIG9uY2xpY2s9InsgcGFyZW50LnJlbW92ZSB9Ij48P3BocCBlY2hvICRhcHAoImkxOG4iKS0+Z2V0KCdEZWxldGUnKTsgPz48L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDw/cGhwIH0gPz4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAgaWYgKCRhcHAtPm1vZHVsZSgnY29sbGVjdGlvbnMnKS0+aGFzYWNjZXNzKCRjb2xsZWN0aW9uWyduYW1lJ10sICdlbnRyaWVzX2NyZWF0ZScpKSB7ID8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InVrLW5hdi1kaXZpZGVyIj48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGNsYXNzPSJ1ay1kcm9wZG93bi1jbG9zZSIgb25jbGljaz0ieyBwYXJlbnQuZHVwbGljYXRlRW50cnkgfSI+PD9waHAgZWNobyAkYXBwKCJpMThuIiktPmdldCgnRHVwbGljYXRlJyk7ID8+PC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8P3BocCB9ID8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVrLW1hcmdpbi10b3AgdWstc2Nyb2xsYWJsZS1ib3giPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idWstbWFyZ2luLXNtYWxsLWJvdHRvbSIgZWFjaD0ie2ZpZWxkLGlkeSBpbiBwYXJlbnQuZmllbGRzfSIgaWY9InsgZmllbGQubmFtZSAhPSAnX21vZGlmaWVkJyAmJiBmaWVsZC5uYW1lICE9ICdfY3JlYXRlZCcgfSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InVrLXRleHQtc21hbGwgdWstdGV4dC11cHBlcmNhc2UgdWstdGV4dC1tdXRlZCI+eyBmaWVsZC5sYWJlbCB8fCBmaWVsZC5uYW1lIH08L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InVrLWxpbmstbXV0ZWQgdWstdGV4dC1zbWFsbCB1ay1kaXNwbGF5LWJsb2NrIHVrLXRleHQtdHJ1bmNhdGUiIGhyZWY9Ijw/cGhwICRhcHAtPnJvdXRlKCcvY29sbGVjdGlvbnMvZW50cnkvJy4kY29sbGVjdGlvblsnbmFtZSddKTsgPz4veyBwYXJlbnQuZW50cnkuX2lkIH0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cmF3IGNvbnRlbnQ9InsgQXBwLlV0aWxzLnJlbmRlclZhbHVlKGZpZWxkLnR5cGUsIHBhcmVudC5lbnRyeVtmaWVsZC5uYW1lXSwgZmllbGQsIGxhbmcpIH0iIGlmPSJ7cGFyZW50LmVudHJ5W2ZpZWxkLm5hbWVdICE9PSB1bmRlZmluZWR9Ij48L3Jhdz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InVrLWljb24tZXllLXNsYXNoIHVrLXRleHQtbXV0ZWQiIGlmPSJ7cGFyZW50LmVudHJ5W2ZpZWxkLm5hbWVdID09PSB1bmRlZmluZWR9Ij48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgPGRpdiBjbGFzcz0idWstbWFyZ2luLWxhcmdlLXRvcCB1ay1vdmVyZmxvdy1jb250YWluZXIgdWstdmlld3BvcnQtaGVpZ2h0LTEtMyIgaWY9InsgZW50cmllcy5sZW5ndGggJiYgIWxvYWRpbmcgJiYgbGlzdG1vZGU9PSdsaXN0JyB9Ij4NCiAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idWstdGFibGUgdWstdGFibGUtdGFiYmVkIHVrLXRhYmxlLXN0cmlwZWQiPg0KICAgICAgICAgICAgICAgIDx0aGVhZD4NCiAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRoIHdpZHRoPSIyMCI+PGlucHV0IGNsYXNzPSJ1ay1jaGVja2JveCIgdHlwZT0iY2hlY2tib3giIGRhdGEtY2hlY2s9ImFsbCI+PC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0aCB3aWR0aD0ie2ZpZWxkLm5hbWUgPT0gJ19tb2RpZmllZCcgfHwgZmllbGQubmFtZSA9PSAnX2NyZWF0ZWQnID8gJzEwMCc6Jyd9IiBjbGFzcz0idWstdGV4dC1zbWFsbCIgZWFjaD0ie2ZpZWxkLGlkeCBpbiBmaWVsZHN9Ij4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJ1ay1saW5rLW11dGVkIHVrLW5vc2VsZWN0IHsgKHBhcmVudC5zb3J0W2ZpZWxkLm5hbWVdIHx8IHBhcmVudC5zb3J0W2ZpZWxkLm5hbWUrJy5kaXNwbGF5J10pID8gJ3VrLXRleHQtcHJpbWFyeSc6JycgfSIgb25jbGljaz0ieyBwYXJlbnQudXBkYXRlc29ydCB9IiBkYXRhLXNvcnQ9InsgZmllbGQubmFtZSB9Ij4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IGZpZWxkLmxhYmVsIHx8IGZpZWxkLm5hbWUgfQ0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlmPSJ7KHBhcmVudC5zb3J0W2ZpZWxkLm5hbWVdIHx8IHBhcmVudC5zb3J0W2ZpZWxkLm5hbWUrJy5kaXNwbGF5J10pfSIgY2xhc3M9InVrLWljb24tbG9uZy1hcnJvdy17IChwYXJlbnQuc29ydFtmaWVsZC5uYW1lXSA9PSAxIHx8IHBhcmVudC5zb3J0W2ZpZWxkLm5hbWUrJy5kaXNwbGF5J109PTEpID8gJ3VwJzonZG93bid9Ij48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0aCB3aWR0aD0iMjAiPjwvdGg+DQogICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgPC90aGVhZD4NCiAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgIDx0ciBlYWNoPSJ7ZW50cnksaWR4IGluIGVudHJpZXN9Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48aW5wdXQgY2xhc3M9InVrLWNoZWNrYm94IiB0eXBlPSJjaGVja2JveCIgZGF0YS1jaGVjayBkYXRhLWlkPSJ7IGVudHJ5Ll9pZCB9Ij48L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ1ay10ZXh0LXRydW5jYXRlIiBlYWNoPSJ7ZmllbGQsaWR5IGluIHBhcmVudC5maWVsZHN9IiBpZj0ieyBmaWVsZC5uYW1lICE9ICdfbW9kaWZpZWQnICYmIGZpZWxkLm5hbWUgIT0gJ19jcmVhdGVkJyB9Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0idWstbGluay1tdXRlZCIgaHJlZj0iPD9waHAgJGFwcC0+cm91dGUoJy9jb2xsZWN0aW9ucy9lbnRyeS8nLiRjb2xsZWN0aW9uWyduYW1lJ10pOyA/Pi97IHBhcmVudC5lbnRyeS5faWQgfSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxyYXcgY29udGVudD0ieyBBcHAuVXRpbHMucmVuZGVyVmFsdWUoZmllbGQudHlwZSwgcGFyZW50LmVudHJ5W2ZpZWxkLm5hbWVdLCBmaWVsZCwgbGFuZykgfSIgaWY9IntwYXJlbnQuZW50cnlbZmllbGQubmFtZV0gIT09IHVuZGVmaW5lZH0iPjwvcmF3Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idWstaWNvbi1leWUtc2xhc2ggdWstdGV4dC1tdXRlZCIgaWY9IntwYXJlbnQuZW50cnlbZmllbGQubmFtZV0gPT09IHVuZGVmaW5lZH0iPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjxzcGFuIGNsYXNzPSJ1ay1iYWRnZSB1ay1iYWRnZS1vdXRsaW5lIHVrLXRleHQtbXV0ZWQiPnsgQXBwLlV0aWxzLmRhdGVmb3JtYXQoIG5ldyBEYXRlKCAxMDAwICogZW50cnkuX2NyZWF0ZWQgKSkgfTwvc3Bhbj48L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjxzcGFuIGNsYXNzPSJ1ay1iYWRnZSB1ay1iYWRnZS1vdXRsaW5lIHVrLXRleHQtcHJpbWFyeSI+eyBBcHAuVXRpbHMuZGF0ZWZvcm1hdCggbmV3IERhdGUoIDEwMDAgKiBlbnRyeS5fbW9kaWZpZWQgKSkgfTwvc3Bhbj48L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtdWstZHJvcGRvd249Im1vZGU6J2NsaWNrJyI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InVrLWljb24tYmFycyI+PC9hPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVrLWRyb3Bkb3duIHVrLWRyb3Bkb3duLWZsaXAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ1ay1uYXYgdWstbmF2LWRyb3Bkb3duIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InVrLW5hdi1oZWFkZXIiPjw/cGhwIGVjaG8gJGFwcCgiaTE4biIpLT5nZXQoJ0FjdGlvbnMnKTsgPz48L2xpPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAgaWYgKCRhcHAtPm1vZHVsZSgnY29sbGVjdGlvbnMnKS0+aGFzYWNjZXNzKCRjb2xsZWN0aW9uWyduYW1lJ10sICdlbnRyaWVzX2VkaXQnKSkgeyA/Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSI8P3BocCAkYXBwLT5yb3V0ZSgnL2NvbGxlY3Rpb25zL2VudHJ5LycuJGNvbGxlY3Rpb25bJ25hbWUnXSk7ID8+L3sgZW50cnkuX2lkIH0iPjw/cGhwIGVjaG8gJGFwcCgiaTE4biIpLT5nZXQoJ0VkaXQnKTsgPz48L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8P3BocCB9IGVsc2UgeyA/Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSI8P3BocCAkYXBwLT5yb3V0ZSgnL2NvbGxlY3Rpb25zL2VudHJ5LycuJGNvbGxlY3Rpb25bJ25hbWUnXSk7ID8+L3sgZW50cnkuX2lkIH0iPjw/cGhwIGVjaG8gJGFwcCgiaTE4biIpLT5nZXQoJ1ZpZXcnKTsgPz48L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8P3BocCB9ID8+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8P3BocCBpZiAoJGFwcC0+bW9kdWxlKCdjb2xsZWN0aW9ucycpLT5oYXNhY2Nlc3MoJGNvbGxlY3Rpb25bJ25hbWUnXSwgJ2VudHJpZXNfZGVsZXRlJykpIHsgPz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InVrLW5hdi1pdGVtLWRhbmdlciI+PGEgY2xhc3M9InVrLWRyb3Bkb3duLWNsb3NlIiBvbmNsaWNrPSJ7IHBhcmVudC5yZW1vdmUgfSI+PD9waHAgZWNobyAkYXBwKCJpMThuIiktPmdldCgnRGVsZXRlJyk7ID8+PC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAgfSA/Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAgaWYgKCRhcHAtPm1vZHVsZSgnY29sbGVjdGlvbnMnKS0+aGFzYWNjZXNzKCRjb2xsZWN0aW9uWyduYW1lJ10sICdlbnRyaWVzX2NyZWF0ZScpKSB7ID8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ1ay1uYXYtZGl2aWRlciI+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgY2xhc3M9InVrLWRyb3Bkb3duLWNsb3NlIiBvbmNsaWNrPSJ7IHBhcmVudC5kdXBsaWNhdGVFbnRyeSB9Ij48P3BocCBlY2hvICRhcHAoImkxOG4iKS0+Z2V0KCdEdXBsaWNhdGUnKTsgPz48L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8P3BocCB9ID8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICA8L2Rpdj4NCg0KICAgICAgICA8ZGl2IGNsYXNzPSJ1ay1tYXJnaW4gdWstZmxleCB1ay1mbGV4LW1pZGRsZSIgaWY9InsgIWxvYWRpbmcgJiYgcGFnZXMgPiAxIH0iPg0KDQogICAgICAgICAgICA8dWwgY2xhc3M9InVrLWJyZWFkY3J1bWIgdWstbWFyZ2luLXJlbW92ZSI+DQogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ1ay1hY3RpdmUiPjxzcGFuPnsgcGFnZSB9PC9zcGFuPjwvbGk+DQogICAgICAgICAgICAgICAgPGxpIGRhdGEtdWstZHJvcGRvd249Im1vZGU6J2NsaWNrJyI+DQoNCiAgICAgICAgICAgICAgICAgICAgPGE+PGkgY2xhc3M9InVrLWljb24tYmFycyI+PC9pPiB7IHBhZ2VzIH08L2E+DQoNCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idWstZHJvcGRvd24iPg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nIGNsYXNzPSJ1ay10ZXh0LXNtYWxsIj48P3BocCBlY2hvICRhcHAoImkxOG4iKS0+Z2V0KCdQYWdlcycpOyA/Pjwvc3Ryb25nPg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1ay1tYXJnaW4tc21hbGwtdG9wIHsgcGFnZXMgPiA1ID8gJ3VrLXNjcm9sbGFibGUtYm94JzonJyB9Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InVrLW5hdiB1ay1uYXYtZHJvcGRvd24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InVrLXRleHQtc21hbGwiIGVhY2g9IntrLHYgaW4gbmV3IEFycmF5KHBhZ2VzKX0iPjxhIGNsYXNzPSJ1ay1kcm9wZG93bi1jbG9zZSIgb25jbGljaz0ieyBwYXJlbnQubG9hZHBhZ2UuYmluZChwYXJlbnQsIHYrMSkgfSI+PD9waHAgZWNobyAkYXBwKCJpMThuIiktPmdldCgnUGFnZScpOyA/PiB7diArIDF9PC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICA8L3VsPg0KDQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1ay1idXR0b24tZ3JvdXAgdWstbWFyZ2luLXNtYWxsLWxlZnQiPg0KICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJ1ay1idXR0b24gdWstYnV0dG9uLXNtYWxsIiBvbmNsaWNrPSJ7IGxvYWRwYWdlLmJpbmQodGhpcywgcGFnZS0xKSB9IiBpZj0ie3BhZ2UtMSA+IDB9Ij48P3BocCBlY2hvICRhcHAoImkxOG4iKS0+Z2V0KCdQcmV2aW91cycpOyA/PjwvYT4NCiAgICAgICAgICAgICAgICA8YSBjbGFzcz0idWstYnV0dG9uIHVrLWJ1dHRvbi1zbWFsbCIgb25jbGljaz0ieyBsb2FkcGFnZS5iaW5kKHRoaXMsIHBhZ2UrMSkgfSIgaWY9IntwYWdlKzEgPD0gcGFnZXN9Ij48P3BocCBlY2hvICRhcHAoImkxOG4iKS0+Z2V0KCdOZXh0Jyk7ID8+PC9hPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InVrLW1hcmdpbi1zbWFsbC1yaWdodCIgZGF0YS11ay1kcm9wZG93bj0ibW9kZTonY2xpY2snIj4NCiAgICAgICAgICAgICAgICA8YSBjbGFzcz0idWstYnV0dG9uIHVrLWJ1dHRvbi1saW5rIHVrLWJ1dHRvbi1zbWFsbCB1ay10ZXh0LW11dGVkIj57bGltaXR9PC9hPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVrLWRyb3Bkb3duIj4NCiAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ1ay1uYXYgdWstbmF2LWRyb3Bkb3duIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idWstbmF2LWhlYWRlciI+PD9waHAgZWNobyAkYXBwKCJpMThuIiktPmdldCgnU2hvdycpOyA/PjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgb25jbGljaz0ie3VwZGF0ZUxpbWl0LmJpbmQodGhpcywgMjApfSI+MjA8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBvbmNsaWNrPSJ7dXBkYXRlTGltaXQuYmluZCh0aGlzLCA0MCl9Ij40MDwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIG9uY2xpY2s9Int1cGRhdGVMaW1pdC5iaW5kKHRoaXMsIDgwKX0iPjgwPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgb25jbGljaz0ie3VwZGF0ZUxpbWl0LmJpbmQodGhpcywgMTAwKX0iPjEwMDwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ1ay1uYXYtZGl2aWRlciI+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBvbmNsaWNrPSJ7dXBkYXRlTGltaXQuYmluZCh0aGlzLCBudWxsKX0iPjw/cGhwIGVjaG8gJGFwcCgiaTE4biIpLT5nZXQoJ0FsbCcpOyA/PjwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgPC9kaXY+DQoNCiAgICA8L2Rpdj4NCg0KICAgIDw/cGhwIGlmICgkYXBwLT5tb2R1bGUoJ2NvbGxlY3Rpb25zJyktPmhhc2FjY2VzcygkY29sbGVjdGlvblsnbmFtZSddLCAnZW50cmllc19lZGl0JykpIHsgPz4NCiAgICA8ZW50cmllcy1iYXRjaGVkaXQgY29sbGVjdGlvbj0ie2NvbGxlY3Rpb259IiBmaWVsZHM9e2ZpZWxkc2lkeH0+PC9lbnRyaWVzLWJhdGNoZWRpdD4NCiAgICA8P3BocCB9ID8+DQoNCiAgICA8c2NyaXB0IHR5cGU9InZpZXcvc2NyaXB0Ij4NCg0KICAgICAgICB2YXIgJHRoaXMgPSB0aGlzLCAkcm9vdCA9IEFwcC4kKHRoaXMucm9vdCk7DQoNCiAgICAgICAgdGhpcy5jb2xsZWN0aW9uID0gPD9waHAgZWNobyAganNvbl9lbmNvZGUoJGNvbGxlY3Rpb24pIDsgPz47DQogICAgICAgIHRoaXMubG9hZGluZyAgICA9IHRydWU7DQogICAgICAgIHRoaXMuY291bnQgICAgICA9IDA7DQogICAgICAgIHRoaXMucGFnZSAgICAgICA9IDE7DQogICAgICAgIHRoaXMubGltaXQgICAgICA9IDIwOw0KICAgICAgICB0aGlzLmVudHJpZXMgICAgPSBbXTsNCiAgICAgICAgdGhpcy5maWVsZHNpZHggID0ge307DQogICAgICAgIHRoaXMuaW1hZ2VGaWVsZCA9IG51bGw7DQogICAgICAgIHRoaXMubGFuZ3VhZ2VzICA9IEFwcC4kZGF0YS5sYW5ndWFnZXM7DQoNCiAgICAgICAgaWYgKHRoaXMubGFuZ3VhZ2VzLmxlbmd0aCkgew0KICAgICAgICAgICAgdGhpcy5sYW5nID0gQXBwLnNlc3Npb24uZ2V0KCdjb2xsZWN0aW9ucy5lbnRyeS4nK3RoaXMuY29sbGVjdGlvbi5faWQrJy5sYW5nJywgJycpOw0KICAgICAgICB9DQoNCiAgICAgICAgdGhpcy5maWVsZHMgICAgID0gdGhpcy5jb2xsZWN0aW9uLmZpZWxkcy5maWx0ZXIoZnVuY3Rpb24oZmllbGQpew0KDQogICAgICAgICAgICBpZiAoIUNvbGxlY3Rpb25IYXNGaWVsZEFjY2VzcyhmaWVsZCkpIHJldHVybiBmYWxzZTsNCg0KICAgICAgICAgICAgJHRoaXMuZmllbGRzaWR4W2ZpZWxkLm5hbWVdID0gZmllbGQ7DQoNCiAgICAgICAgICAgIGlmICghJHRoaXMuaW1hZ2VGaWVsZCAmJiAoZmllbGQudHlwZT09J2ltYWdlJyB8fCBmaWVsZC50eXBlPT0nYXNzZXQnKSkgew0KICAgICAgICAgICAgICAgICR0aGlzLmltYWdlRmllbGQgPSBmaWVsZDsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgcmV0dXJuIGZpZWxkLmxzdDsNCiAgICAgICAgfSk7DQoNCiAgICAgICAgdGhpcy5maWVsZHNpZHhbJ19jcmVhdGVkJ10gPSB7bmFtZTonX2NyZWF0ZWQnLCAnbGFiZWwnOic8P3BocCBlY2hvICRhcHAoImkxOG4iKS0+Z2V0KCdDcmVhdGVkJyk7ID8+JywgdHlwZTogJ3RleHQnfTsNCiAgICAgICAgdGhpcy5maWVsZHNpZHhbJ19tb2RpZmllZCddID0ge25hbWU6J19tb2RpZmllZCcsICdsYWJlbCc6Jzw/cGhwIGVjaG8gJGFwcCgiaTE4biIpLT5nZXQoJ01vZGlmaWVkJyk7ID8+JywgdHlwZTogJ3RleHQnfTsNCg0KICAgICAgICB0aGlzLmZpZWxkcy5wdXNoKHRoaXMuZmllbGRzaWR4WydfY3JlYXRlZCddKTsNCiAgICAgICAgdGhpcy5maWVsZHMucHVzaCh0aGlzLmZpZWxkc2lkeFsnX21vZGlmaWVkJ10pOw0KDQogICAgICAgIHRoaXMuc29ydCA9IHt9DQogICAgICAgIHRoaXMuc29ydFt0aGlzLmNvbGxlY3Rpb24uc29ydC5jb2x1bW5dID0gdGhpcy5jb2xsZWN0aW9uLnNvcnQuZGlyDQogICAgICAgIHRoaXMuc2VsZWN0ZWQgPSBbXTsNCiAgICAgICAgdGhpcy5saXN0bW9kZSA9IEFwcC5zZXNzaW9uLmdldCgnY29sbGVjdGlvbnMuZW50cmllcy4nK3RoaXMuY29sbGVjdGlvbi5uYW1lKycubGlzdG1vZGUnLCAnbGlzdCcpOw0KDQogICAgICAgIHRoaXMub24oJ21vdW50JywgZnVuY3Rpb24oKXsNCg0KICAgICAgICAgICAgJHJvb3Qub24oJ2NsaWNrJywgJ1tkYXRhLWNoZWNrXScsIGZ1bmN0aW9uKCkgew0KDQogICAgICAgICAgICAgICAgaWYgKHRoaXMuZ2V0QXR0cmlidXRlKCdkYXRhLWNoZWNrJykgPT0gJ2FsbCcpIHsNCiAgICAgICAgICAgICAgICAgICAgJHJvb3QuZmluZCgnW2RhdGEtY2hlY2tdW2RhdGEtaWRdJykucHJvcCgnY2hlY2tlZCcsIHRoaXMuY2hlY2tlZCk7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgJHRoaXMuY2hlY2tzZWxlY3RlZCgpOw0KICAgICAgICAgICAgICAgICR0aGlzLnVwZGF0ZSgpOw0KICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIGZ1bmN0aW9uKGUpIHsNCiAgICAgICAgICAgICAgICAkdGhpcy5pbml0U3RhdGUoKTsNCiAgICAgICAgICAgIH0pOw0KDQogICAgICAgICAgICAkdGhpcy5pbml0U3RhdGUoKTsNCiAgICAgICAgfSk7DQoNCiAgICAgICAgaW5pdFN0YXRlKCkgew0KDQogICAgICAgICAgICB2YXIgc2VhcmNoUGFyYW1zID0gQXBwLlV0aWxzLnBhcmFtcygpOw0KDQogICAgICAgICAgICBpZiAoc2VhcmNoUGFyYW1zLmhhcygncScpKSB7DQoNCiAgICAgICAgICAgICAgICB0cnkgew0KDQogICAgICAgICAgICAgICAgICAgIHZhciBxID0gSlNPTi5wYXJzZShzZWFyY2hQYXJhbXMuZ2V0KCdxJykpOw0KDQogICAgICAgICAgICAgICAgICAgIGlmIChxLnNvcnQpIHRoaXMuc29ydCA9IHEuc29ydDsNCiAgICAgICAgICAgICAgICAgICAgaWYgKHEucGFnZSkgdGhpcy5wYWdlID0gcS5wYWdlOw0KICAgICAgICAgICAgICAgICAgICBpZiAocS5saW1pdCkgdGhpcy5saW1pdCA9IChwYXJzZUludChxLmxpbWl0KSB8fCAyMCk7DQogICAgICAgICAgICAgICAgICAgIGlmIChxLmZpbHRlcikgew0KICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5maWx0ZXIgPSBxLmZpbHRlcjsNCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVmcy50eHRmaWx0ZXIudmFsdWUgPSBxLmZpbHRlcjsNCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgfSBjYXRjaChlKXt9DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHRoaXMubG9hZCh0cnVlKTsNCiAgICAgICAgICAgIHRoaXMudXBkYXRlKCk7DQogICAgICAgIH0NCg0KICAgICAgICByZW1vdmUoZSwgZW50cnksIGlkeCkgew0KDQogICAgICAgICAgICBlbnRyeSA9IGUuaXRlbS5lbnRyeQ0KICAgICAgICAgICAgaWR4ICAgPSBlLml0ZW0uaWR4Ow0KDQogICAgICAgICAgICBBcHAudWkuY29uZmlybSgiQXJlIHlvdSBzdXJlPyIsIGZ1bmN0aW9uKCkgew0KDQogICAgICAgICAgICAgICAgQXBwLnJlcXVlc3QoJy9jb2xsZWN0aW9ucy9kZWxldGVfZW50cmllcy8nKyR0aGlzLmNvbGxlY3Rpb24ubmFtZSwge2ZpbHRlcjogeydfaWQnOmVudHJ5Ll9pZH19KS50aGVuKGZ1bmN0aW9uKGRhdGEpIHsNCg0KICAgICAgICAgICAgICAgICAgICBBcHAudWkubm90aWZ5KCJFbnRyeSByZW1vdmVkIiwgInN1Y2Nlc3MiKTsNCg0KICAgICAgICAgICAgICAgICAgICAkdGhpcy5lbnRyaWVzLnNwbGljZShpZHgsIDEpOw0KDQogICAgICAgICAgICAgICAgICAgIGlmICgkdGhpcy5wYWdlcyA+IDEgJiYgISR0aGlzLmVudHJpZXMubGVuZ3RoKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAkdGhpcy5wYWdlID0gJHRoaXMucGFnZSA9PSAxID8gMSA6ICR0aGlzLnBhZ2UgLSAxOw0KICAgICAgICAgICAgICAgICAgICAgICAgJHRoaXMubG9hZCgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgJHRoaXMudXBkYXRlKCk7DQoNCiAgICAgICAgICAgICAgICAgICAgJHRoaXMuY2hlY2tzZWxlY3RlZCgpOw0KICAgICAgICAgICAgICAgIH0pOw0KDQogICAgICAgICAgICB9LmJpbmQodGhpcykpOw0KICAgICAgICB9DQoNCiAgICAgICAgcmVtb3Zlc2VsZWN0ZWQoKSB7DQoNCiAgICAgICAgICAgIGlmICghdGhpcy5zZWxlY3RlZC5sZW5ndGgpIHsNCiAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIEFwcC51aS5jb25maXJtKCJBcmUgeW91IHN1cmU/IiwgZnVuY3Rpb24oKSB7DQoNCiAgICAgICAgICAgICAgICB2YXIgcHJvbWlzZXMgPSBbXTsNCg0KICAgICAgICAgICAgICAgIHRoaXMuZW50cmllcyA9IHRoaXMuZW50cmllcy5maWx0ZXIoZnVuY3Rpb24oZW50cnksIHllcHApew0KDQogICAgICAgICAgICAgICAgICAgIHllcHAgPSAoJHRoaXMuc2VsZWN0ZWQuaW5kZXhPZihlbnRyeS5faWQpID09PSAtMSk7DQoNCiAgICAgICAgICAgICAgICAgICAgaWYgKCF5ZXBwKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBwcm9taXNlcy5wdXNoKEFwcC5yZXF1ZXN0KCcvY29sbGVjdGlvbnMvZGVsZXRlX2VudHJpZXMvJyskdGhpcy5jb2xsZWN0aW9uLm5hbWUsIHtmaWx0ZXI6IHsnX2lkJzplbnRyeS5faWR9fSkpOw0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHllcHA7DQogICAgICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgICAgICBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbihmdW5jdGlvbigpew0KDQogICAgICAgICAgICAgICAgICAgIEFwcC51aS5ub3RpZnkocHJvbWlzZXMubGVuZ3RoID4gMSA/IChwcm9taXNlcy5sZW5ndGggKyAiIGVudHJpZXMgcmVtb3ZlZCIpIDogIkVudHJ5IHJlbW92ZWQiLCAic3VjY2VzcyIpOw0KDQogICAgICAgICAgICAgICAgICAgICR0aGlzLmxvYWRpbmcgPSBmYWxzZTsNCg0KICAgICAgICAgICAgICAgICAgICBpZiAoJHRoaXMucGFnZXMgPiAxICYmICEkdGhpcy5lbnRyaWVzLmxlbmd0aCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgJHRoaXMucGFnZSA9ICR0aGlzLnBhZ2UgPT0gMSA/IDEgOiAkdGhpcy5wYWdlIC0gMTsNCiAgICAgICAgICAgICAgICAgICAgICAgICR0aGlzLmxvYWQoKTsNCiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICR0aGlzLnVwZGF0ZSgpOw0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgICAgIHRoaXMubG9hZGluZyA9IHRydWU7DQogICAgICAgICAgICAgICAgdGhpcy51cGRhdGUoKTsNCiAgICAgICAgICAgICAgICB0aGlzLmNoZWNrc2VsZWN0ZWQodHJ1ZSk7DQoNCiAgICAgICAgICAgIH0uYmluZCh0aGlzKSk7DQoNCiAgICAgICAgfQ0KDQogICAgICAgIGxvYWQoaW5pdGlhbCkgew0KDQogICAgICAgICAgICB2YXIgb3B0aW9ucyA9IHsgc29ydDp0aGlzLnNvcnQgfTsNCg0KICAgICAgICAgICAgaWYgKHRoaXMubGFuZykgew0KICAgICAgICAgICAgICAgIG9wdGlvbnMubGFuZyA9IHRoaXMubGFuZzsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKHRoaXMuZmlsdGVyKSB7DQogICAgICAgICAgICAgICAgb3B0aW9ucy5maWx0ZXIgPSB0aGlzLmZpbHRlcjsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKHRoaXMubGltaXQpIHsNCiAgICAgICAgICAgICAgICBvcHRpb25zLmxpbWl0ID0gdGhpcy5saW1pdDsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgb3B0aW9ucy5za2lwICA9ICh0aGlzLnBhZ2UgLSAxKSAqIHRoaXMubGltaXQ7DQoNCiAgICAgICAgICAgIHRoaXMubG9hZGluZyA9IHRydWU7DQoNCiAgICAgICAgICAgIGlmICghaW5pdGlhbCkgew0KDQogICAgICAgICAgICAgICAgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKA0KICAgICAgICAgICAgICAgICAgICBudWxsLCBudWxsLA0KICAgICAgICAgICAgICAgICAgICBBcHAucm91dGUoWycvY29sbGVjdGlvbnMvZW50cmllcy8nLCB0aGlzLmNvbGxlY3Rpb24ubmFtZSwgJz9xPScsIEpTT04uc3RyaW5naWZ5KHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2U6IHRoaXMucGFnZSB8fCBudWxsLA0KICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB0aGlzLmZpbHRlciB8fCBudWxsLA0KICAgICAgICAgICAgICAgICAgICAgICAgc29ydDogdGhpcy5zb3J0IHx8IG51bGwsDQogICAgICAgICAgICAgICAgICAgICAgICBsaW1pdDogdGhpcy5saW1pdA0KICAgICAgICAgICAgICAgICAgICB9KV0uam9pbignJykpDQogICAgICAgICAgICAgICAgKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgcmV0dXJuIEFwcC5yZXF1ZXN0KCcvY29sbGVjdGlvbnMvZmluZCcsIHtjb2xsZWN0aW9uOnRoaXMuY29sbGVjdGlvbi5uYW1lLCBvcHRpb25zOm9wdGlvbnN9KS50aGVuKGZ1bmN0aW9uKGRhdGEpew0KDQogICAgICAgICAgICAgICAgd2luZG93LnNjcm9sbFRvKDAsIDApOw0KDQogICAgICAgICAgICAgICAgdGhpcy5lbnRyaWVzID0gZGF0YS5lbnRyaWVzOw0KICAgICAgICAgICAgICAgIHRoaXMucGFnZXMgICA9IGRhdGEucGFnZXM7DQogICAgICAgICAgICAgICAgdGhpcy5wYWdlICAgID0gZGF0YS5wYWdlOw0KICAgICAgICAgICAgICAgIHRoaXMuY291bnQgICA9IGRhdGEuY291bnQ7DQoNCiAgICAgICAgICAgICAgICB0aGlzLmNoZWNrc2VsZWN0ZWQoKTsNCiAgICAgICAgICAgICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTsNCiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZSgpOw0KDQogICAgICAgICAgICB9LmJpbmQodGhpcykpDQogICAgICAgIH0NCg0KICAgICAgICBsb2FkcGFnZShwYWdlKSB7DQogICAgICAgICAgICB0aGlzLnBhZ2UgPSBwYWdlID4gdGhpcy5wYWdlcyA/IHRoaXMucGFnZXM6cGFnZTsNCiAgICAgICAgICAgIHRoaXMubG9hZCgpOw0KICAgICAgICB9DQoNCiAgICAgICAgdXBkYXRlc29ydChlLCBmaWVsZCkgew0KDQogICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7DQoNCiAgICAgICAgICAgIGZpZWxkID0gZS50YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXNvcnQnKTsNCg0KICAgICAgICAgICAgaWYgKCFmaWVsZCkgew0KICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgdmFyIGNvbCA9IGZpZWxkOw0KDQogICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZmllbGRzaWR4W2ZpZWxkXS50eXBlKSB7DQogICAgICAgICAgICAgICAgY2FzZSAnY29sbGVjdGlvbmxpbmsnOg0KICAgICAgICAgICAgICAgICAgICBjb2wgPSBmaWVsZCsnLmRpc3BsYXknOw0KICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICBjYXNlICdsb2NhdGlvbic6DQogICAgICAgICAgICAgICAgICAgIGNvbCA9IGZpZWxkKycuYWRkcmVzcyc7DQogICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgICAgIGRlZmF1bHQ6DQogICAgICAgICAgICAgICAgICAgIGNvbCA9IGZpZWxkOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAoZS5tZXRhS2V5IHx8IGUuY3RybEtleSkgew0KICAgICAgICAgICAgICAgIC8vIG11bHRpIHNlbGVjdA0KICAgICAgICAgICAgfSBlbHNlIHsNCg0KICAgICAgICAgICAgICAgIHZhciBzb3J0ID0ge307DQoNCiAgICAgICAgICAgICAgICBpZiAodGhpcy5zb3J0W2NvbF0pIHsNCiAgICAgICAgICAgICAgICAgICAgc29ydFtjb2xdID0gdGhpcy5zb3J0W2NvbF07DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgdGhpcy5zb3J0ID0gc29ydDsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKCF0aGlzLnNvcnRbY29sXSkgew0KICAgICAgICAgICAgICAgIHRoaXMuc29ydFtjb2xdID0gMTsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgdGhpcy5zb3J0W2NvbF0gPSB0aGlzLnNvcnRbY29sXSA9PSAxID8gLTEgOiAxOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICB0aGlzLmVudHJpZXMgPSBbXTsNCiAgICAgICAgICAgIHRoaXMubG9hZCgpOw0KICAgICAgICB9DQoNCiAgICAgICAgY2hlY2tzZWxlY3RlZCh1cGRhdGUpIHsNCg0KICAgICAgICAgICAgdmFyIGNoZWNrYm94ZXMgPSAkcm9vdC5maW5kKCdbZGF0YS1jaGVja11bZGF0YS1pZF0nKSwNCiAgICAgICAgICAgICAgICBzZWxlY3RlZCAgID0gY2hlY2tib3hlcy5maWx0ZXIoJzpjaGVja2VkJyk7DQoNCiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWQgPSBbXTsNCg0KICAgICAgICAgICAgaWYgKHNlbGVjdGVkLmxlbmd0aCkgew0KDQogICAgICAgICAgICAgICAgc2VsZWN0ZWQuZWFjaChmdW5jdGlvbigpew0KICAgICAgICAgICAgICAgICAgICAkdGhpcy5zZWxlY3RlZC5wdXNoKEFwcC4kKHRoaXMpLmF0dHIoJ2RhdGEtaWQnKSk7DQogICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICRyb290LmZpbmQoJ1tkYXRhLWNoZWNrPSJhbGwiXScpLnByb3AoJ2NoZWNrZWQnLCBjaGVja2JveGVzLmxlbmd0aCAmJiBjaGVja2JveGVzLmxlbmd0aCA9PT0gc2VsZWN0ZWQubGVuZ3RoKTsNCg0KICAgICAgICAgICAgaWYgKHVwZGF0ZSkgew0KICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlKCk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICB1cGRhdGVmaWx0ZXIoKSB7DQoNCiAgICAgICAgICAgIHZhciBsb2FkID0gdGhpcy5maWx0ZXIgPyB0cnVlOmZhbHNlOw0KDQogICAgICAgICAgICB0aGlzLmZpbHRlciA9IHRoaXMucmVmcy50eHRmaWx0ZXIudmFsdWUgfHwgbnVsbDsNCg0KICAgICAgICAgICAgaWYgKHRoaXMuZmlsdGVyIHx8IGxvYWQpIHsNCiAgICAgICAgICAgICAgICB0aGlzLmVudHJpZXMgPSBbXTsNCiAgICAgICAgICAgICAgICB0aGlzLmxvYWRpbmcgPSB0cnVlOw0KICAgICAgICAgICAgICAgIHRoaXMucGFnZSA9IDE7DQogICAgICAgICAgICAgICAgdGhpcy5sb2FkKCk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICB1cGRhdGVMaW1pdChsaW1pdCkgew0KICAgICAgICAgICAgdGhpcy5saW1pdCA9IGxpbWl0Ow0KICAgICAgICAgICAgdGhpcy5wYWdlID0gMTsNCiAgICAgICAgICAgIHRoaXMubG9hZCgpOw0KICAgICAgICB9DQoNCiAgICAgICAgZHVwbGljYXRlRW50cnkoZSkgew0KICAgICAgICAgICAgdmFyIGNvbGxlY3Rpb24gPSB0aGlzLmNvbGxlY3Rpb24ubmFtZTsNCiAgICAgICAgICAgIHZhciBpZCA9IGUuaXRlbS5lbnRyeS5faWQ7DQogICAgICAgICAgICB2YXIgb3B0aW9ucyA9IHsgImZpbHRlciI6IHsgIl9pZCI6IGlkIH0gfTsNCg0KICAgICAgICAgICAgQXBwLnJlcXVlc3QoJy9jb2xsZWN0aW9ucy9maW5kJywgeyJjb2xsZWN0aW9uIjpjb2xsZWN0aW9uLCAib3B0aW9ucyI6b3B0aW9uc30pLnRoZW4oZnVuY3Rpb24oZGF0YSl7DQogICAgICAgICAgICAgICAgaWYgKGRhdGEuY291bnQgPT09IDEpIHsNCiAgICAgICAgICAgICAgICAgICAgdmFyIGVudHJ5ID0gZGF0YS5lbnRyaWVzWzBdOw0KICAgICAgICAgICAgICAgICAgICBkZWxldGUgZW50cnkuX2lkOw0KICAgICAgICAgICAgICAgICAgICBBcHAucmVxdWVzdCgnL2NvbGxlY3Rpb25zL3NhdmVfZW50cnkvJytjb2xsZWN0aW9uLCB7ImVudHJ5IjogZW50cnl9KS50aGVuKGZ1bmN0aW9uKGVudHJ5KSB7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZW50cnkpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcHAudWkubm90aWZ5KCJFbnRyeSBkdXBsaWNhdGVkIiwgInN1Y2Nlc3MiKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdGhpcy5sb2FkKGZhbHNlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgQXBwLnVpLm5vdGlmeSgiQ291bGQgbm90IGR1cGxpY2F0ZSBlbnRyeSIsICJkYW5nZXIiKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgQXBwLnVpLm5vdGlmeSgiQ291bGQgbm90IGR1cGxpY2F0ZSBlbnRyeSIsICJkYW5nZXIiKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9KTsNCiAgICAgICAgfQ0KDQogICAgICAgIHRvZ2dsZUxpc3RNb2RlKCkgew0KICAgICAgICAgICAgdGhpcy5saXN0bW9kZSA9IHRoaXMubGlzdG1vZGU9PSdsaXN0JyA/ICdncmlkJzonbGlzdCc7DQogICAgICAgICAgICBBcHAuc2Vzc2lvbi5zZXQoJ2NvbGxlY3Rpb25zLmVudHJpZXMuJyt0aGlzLmNvbGxlY3Rpb24ubmFtZSsnLmxpc3Rtb2RlJywgdGhpcy5saXN0bW9kZSk7DQogICAgICAgIH0NCg0KICAgICAgICBpc0ltYWdlRmllbGQoZW50cnkpIHsNCg0KICAgICAgICAgICAgaWYgKCF0aGlzLmltYWdlRmllbGQpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHZhciBkYXRhID0gZW50cnlbdGhpcy5pbWFnZUZpZWxkLm5hbWVdOw0KDQogICAgICAgICAgICBpZiAoIWRhdGEpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHN3aXRjaCh0aGlzLmltYWdlRmllbGQudHlwZSkgew0KICAgICAgICAgICAgICAgIGNhc2UgJ2Fzc2V0JzoNCiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEubWltZSAmJiBkYXRhLm1pbWUubWF0Y2goL15pbWFnZVwvLykpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBBU1NFVFNfVVJMK2RhdGEucGF0aDsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICBjYXNlICdpbWFnZSc6DQoNCiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEucGF0aCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGEucGF0aC5tYXRjaCgvXihodHRwXDp8aHR0cHNcOnxcL1wvKS8pID8gZGF0YS5wYXRoIDogU0lURV9VUkwrJy8nK2RhdGEucGF0aDsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KDQogICAgICAgIH0NCg0KICAgICAgICBiYXRjaGVkaXQoKSB7DQogICAgICAgICAgICBpZiAoIXRoaXMubGFuZykgew0KICAgICAgICAgICAgICAgIHRoaXMudGFnc1snZW50cmllcy1iYXRjaGVkaXQnXS5vcGVuKHRoaXMuZW50cmllcywgdGhpcy5zZWxlY3RlZCk7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIEFwcC51aS5ub3RpZnkoIkNhbm5vdCBiYXRjaCBlZGl0IHdoaWxlIGluIG5vbi1kZWZhdWx0IGxhbmd1YWdlIiwgImRhbmdlciIpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgY2hhbmdlbGFuZ3VhZ2UoZSkgew0KICAgICAgICAgICAgdmFyIGxhbmcgPSBlLnRhcmdldC52YWx1ZTsNCiAgICAgICAgICAgIEFwcC5zZXNzaW9uLnNldCgnY29sbGVjdGlvbnMuZW50cnkuJyt0aGlzLmNvbGxlY3Rpb24uX2lkKycubGFuZycsIGxhbmcpOw0KICAgICAgICAgICAgdGhpcy5sYW5nID0gbGFuZzsNCiAgICAgICAgICAgIHRoaXMubG9hZChmYWxzZSk7DQogICAgICAgICAgICB0aGlzLnVwZGF0ZSgpOw0KICAgICAgICB9DQoNCiAgICA8L3NjcmlwdD4NCg0KICAgIDw/cGhwICRhcHAtPnRyaWdnZXIoJ2NvbGxlY3Rpb25zLmVudHJpZXMnLCBbJGNvbGxlY3Rpb25dKTsgPz4NCjwvZGl2Pg0KIjtzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWVzcGFjZXMiO2E6MDp7fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW5jbHVkZXMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAZnVuY3Rpb25zIjthOjA6e31zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNvbnN0YW50cyI7YTowOnt9czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBjbGFzc2VzIjthOjA6e31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGludGVyZmFjZXMiO2E6MDp7fXM6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAdHJhaXRzIjthOjA6e31zOjQwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGVudW1zIjthOjA6e31zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG1ldGFkYXRhIjthOjA6e319";