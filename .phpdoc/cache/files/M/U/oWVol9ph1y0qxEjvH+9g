1689528007
waR3U4bTeM%3A33156046788761e6fa7bcc9a2577390f-d97bbd60062a17b6c0ca69519e135584
s:5976:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxNDp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6ImQ5N2JiZDYwMDYyYTE3YjZjMGNhNjk1MTllMTM1NTg0IjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6MTQ6ImxvZ2luY2hlY2sucGhwIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHBhdGgiO3M6NjI6ImFwcC9saWIvY29ja3BpdC9tb2R1bGVzL0NvY2twaXQvdmlld3MvX3BhcnRpYWxzL2xvZ2luY2hlY2sucGhwIjtzOjQxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHNvdXJjZSI7czozNTM4OiI8ZGl2IGlkPSJsb2dpbm1vZGFsIiBjbGFzcz0idWstbW9kYWwiIHJpb3Qtdmlldz4NCg0KICAgIDxzdHlsZT4NCiAgICAgICAgLnVrLW1vZGFsLWxvZ2luIHsNCiAgICAgICAgICAgIG1heC13aWR0aDogNDAwcHg7DQogICAgICAgICAgICBwYWRkaW5nOiAzMHB4Ow0KICAgICAgICB9DQoNCiAgICA8L3N0eWxlPg0KDQogICAgPGRpdiBjbGFzcz0idWstbW9kYWwtZGlhbG9nIHVrLW1vZGFsLWxvZ2luIHVrLWZvcm0iIHJlZj0ibG9naW5EaWFsb2ciPg0KDQogICAgICAgIDxmb3JtIGNsYXNzPSJ1ay1mb3JtIiBtZXRob2Q9InBvc3QiIGFjdGlvbj0iQHJvdXRlKCcvYXV0aC9jaGVjaycpIiBvbnN1Ym1pdD0ieyBzdWJtaXQgfSI+DQoNCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InVrLWgyIHVrLXRleHQtYm9sZCI+DQogICAgICAgICAgICAgICAge3sgJGFwcC0+cmV0cmlldmUoJ2FwcC5uYW1lJykgfX0NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1ay1mb3JtLXJvdyB1ay1oNCB1ay10ZXh0LW11dGVkIHVrLW1hcmdpbi10b3AgdWstdGV4dC1zbWFsbCB1ay10ZXh0LXVwcGVyIj4NCiAgICAgICAgICAgICAgICBAbGFuZygnWW91ciBzZXNzaW9uIGhhcyBleHBpcmVkLicpDQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGhyPg0KDQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1ay1tYXJnaW4tdG9wIj4NCiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9InVrLXRleHQtc21hbGwgdWstdGV4dC1ib2xkIHVrLXRleHQtdXBwZXIgdWstbWFyZ2luLXNtYWxsLWJvdHRvbSI+QGxhbmcoJ1VzZXJuYW1lJyk8L2xhYmVsPg0KICAgICAgICAgICAgICAgIDxpbnB1dCByZWY9InVzZXIiIGNsYXNzPSJ1ay1mb3JtLWxhcmdlIHVrLWZvcm0tYmxhbmsgdWstd2lkdGgtMS0xIiB0eXBlPSJ0ZXh0IiBwbGFjZWhvbGRlcj0iLi4uIiByZXF1aXJlZD4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0idWstdGV4dC1zbWFsbCB1ay10ZXh0LWJvbGQgdWstdGV4dC11cHBlciB1ay1tYXJnaW4tc21hbGwtYm90dG9tIj5AbGFuZygnUGFzc3dvcmQnKTwvbGFiZWw+DQogICAgICAgICAgICAgICAgPGlucHV0IHJlZj0icGFzc3dvcmQiIGNsYXNzPSJ1ay1mb3JtLWxhcmdlIHVrLWZvcm0tYmxhbmsgdWstd2lkdGgtMS0xIiB0eXBlPSJwYXNzd29yZCIgcGxhY2Vob2xkZXI9Ii4uLiIgcmVxdWlyZWQ+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0idWstbWFyZ2luLXRvcCI+DQogICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0idWstYnV0dG9uIHVrLWJ1dHRvbi1wcmltYXJ5IHVrLWJ1dHRvbi1sYXJnZSB1ay13aWR0aC0xLTEiPkBsYW5nKCdBdXRoZW50aWNhdGUnKTwvYnV0dG9uPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgPC9mb3JtPg0KDQogICAgPC9kaXY+DQoNCiAgICA8c2NyaXB0IHR5cGU9InZpZXcvc2NyaXB0Ij4NCg0KICAgICAgICB2YXIgJHRoaXMgPSB0aGlzOw0KDQogICAgICAgIHRoaXMub24oJ21vdW50JywgZnVuY3Rpb24oKSB7DQoNCiAgICAgICAgICAgIHRoaXMubW9kYWwgPSBVSWtpdC5tb2RhbCgkdGhpcy5yb290LCB7DQogICAgICAgICAgICAgICAga2V5Ym9hcmQ6IGZhbHNlLA0KICAgICAgICAgICAgICAgIGJnY2xvc2U6IGZhbHNlDQogICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgLy8gY2hlY2sgc2Vzc2lvbg0KICAgICAgICAgICAgdmFyIGNoZWNrID0gZnVuY3Rpb24oKSB7DQoNCiAgICAgICAgICAgICAgICBBcHAucmVxdWVzdCgnL2NoZWNrLWJhY2tlbmQtc2Vzc2lvbicpLnRoZW4oZnVuY3Rpb24ocmVzcCkgew0KDQogICAgICAgICAgICAgICAgICAgIGlmIChyZXNwICYmIHJlc3Auc3RhdHVzICYmICR0aGlzLm1vZGFsLmlzQWN0aXZlKCkpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICR0aGlzLm1vZGFsLmhpZGUoKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgIGlmIChyZXNwICYmICFyZXNwLnN0YXR1cyAmJiAhJHRoaXMubW9kYWwuaXNBY3RpdmUoKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgJHRoaXMubW9kYWwuc2hvdygpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHNldEludGVydmFsKGNoZWNrLCAzMDAwMCk7DQoNCiAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgICAgICBpZiAoIWRvY3VtZW50LmhpZGRlbikgY2hlY2soKTsNCiAgICAgICAgICAgIH0sIGZhbHNlKTsNCiAgICAgICAgfSk7DQoNCiAgICAgICAgc3VibWl0KGUpIHsNCg0KICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOw0KDQogICAgICAgICAgICBBcHAucmVxdWVzdCgnL2F1dGgvY2hlY2snLCB7DQogICAgICAgICAgICAgICAgYXV0aCA6IHt1c2VyOnRoaXMucmVmcy51c2VyLnZhbHVlLCBwYXNzd29yZDp0aGlzLnJlZnMucGFzc3dvcmQudmFsdWV9LA0KICAgICAgICAgICAgICAgIGNzcmYgOiAie3sgJGFwcCgnY3NyZicpLT50b2tlbignbG9naW4nKSB9fSINCiAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24oZGF0YSkgew0KDQogICAgICAgICAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS5zdWNjZXNzKSB7DQoNCiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEudXNlci5faWQgIT0gQXBwLiRkYXRhLnVzZXIuX2lkKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBBcHAucmVyb3V0ZSgnLycpOw0KICAgICAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAgICAgJHRoaXMubW9kYWwuZGlhbG9nLmZpbmQoJ2Zvcm0nKVswXS5yZXNldCgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgJHRoaXMubW9kYWwuaGlkZSgpOw0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICB9IGVsc2Ugew0KDQogICAgICAgICAgICAgICAgICAgICR0aGlzLm1vZGFsLmRpYWxvZy5yZW1vdmVDbGFzcygndWstYW5pbWF0aW9uLXNoYWtlJyk7DQoNCiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpew0KICAgICAgICAgICAgICAgICAgICAgICAgJHRoaXMubW9kYWwuZGlhbG9nLmFkZENsYXNzKCd1ay1hbmltYXRpb24tc2hha2UnKTsNCiAgICAgICAgICAgICAgICAgICAgfSwgNTApOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgfSwgZnVuY3Rpb24ocmVzKSB7DQogICAgICAgICAgICAgICAgQXBwLnVpLm5vdGlmeShyZXMgJiYgKHJlcy5tZXNzYWdlIHx8IHJlcy5lcnJvcikgPyAocmVzLm1lc3NhZ2UgfHwgcmVzLmVycm9yKSA6ICdMb2dpbiBmYWlsZWQuJywgJ2RhbmdlcicpOw0KICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KDQogICAgPC9zY3JpcHQ+DQoNCjwvZGl2Pg0KIjtzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWVzcGFjZXMiO2E6MDp7fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW5jbHVkZXMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAZnVuY3Rpb25zIjthOjA6e31zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNvbnN0YW50cyI7YTowOnt9czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBjbGFzc2VzIjthOjA6e31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGludGVyZmFjZXMiO2E6MDp7fXM6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAdHJhaXRzIjthOjA6e31zOjQwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGVudW1zIjthOjA6e31zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG1ldGFkYXRhIjthOjA6e319";