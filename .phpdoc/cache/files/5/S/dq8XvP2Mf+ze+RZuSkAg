1687716137
waR3U4bTeM%3A7ce4f77a538130e93669c074b9e35bd6-a1bc93205ded905a5481bdee3ea93387
s:7912:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxNDp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrIjo3OntzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAHN1bW1hcnkiO3M6NDE6IlRoaXMgZmlsZSBpcyBwYXJ0IG9mIHRoZSBDb2NrcGl0IHByb2plY3QuIjtzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGRlc2NyaXB0aW9uIjtPOjQ1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24iOjI6e3M6NTk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AYm9keVRlbXBsYXRlIjtzOjE5NDoiKGMpIEFydHVyIEhlaW56ZSAtIPCfhbDwn4W28J+FtPCfhb3wn4aD8J+FtPCfhbnwn4W+LCBodHRwOi8vYWdlbnRlam8uY29tCgpGb3IgdGhlIGZ1bGwgY29weXJpZ2h0IGFuZCBsaWNlbnNlIGluZm9ybWF0aW9uLCBwbGVhc2UgdmlldyB0aGUgTElDRU5TRQpmaWxlIHRoYXQgd2FzIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBzb3VyY2UgY29kZS4iO3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AdGFncyI7YTowOnt9fXM6Mzk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAdGFncyI7YTowOnt9czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBjb250ZXh0IjtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQ29udGV4dCI6Mjp7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xDb250ZXh0AG5hbWVzcGFjZSI7czowOiIiO3M6NTY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQ29udGV4dABuYW1lc3BhY2VBbGlhc2VzIjthOjA6e319czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBsb2NhdGlvbiI7TjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGlzVGVtcGxhdGVTdGFydCI7YjowO3M6NDg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAaXNUZW1wbGF0ZUVuZCI7YjowO31zOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6ImExYmM5MzIwNWRlZDkwNWE1NDgxYmRlZTNlYTkzMzg3IjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6OToiYWRtaW4ucGhwIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHBhdGgiO3M6MzY6ImNvY2twaXQvbW9kdWxlcy9TaW5nbGV0b25zL2FkbWluLnBocCI7czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBzb3VyY2UiO3M6Mzk3MDoiPD9waHANCi8qKg0KICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgdGhlIENvY2twaXQgcHJvamVjdC4NCiAqDQogKiAoYykgQXJ0dXIgSGVpbnplIC0g8J+FsPCfhbbwn4W08J+FvfCfhoPwn4W08J+FufCfhb4sIGh0dHA6Ly9hZ2VudGVqby5jb20NCiAqDQogKiBGb3IgdGhlIGZ1bGwgY29weXJpZ2h0IGFuZCBsaWNlbnNlIGluZm9ybWF0aW9uLCBwbGVhc2UgdmlldyB0aGUgTElDRU5TRQ0KICogZmlsZSB0aGF0IHdhcyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgc291cmNlIGNvZGUuDQogKi8NCg0KJGFwcC0+b24oJ2FkbWluLmluaXQnLCBmdW5jdGlvbigpIHsNCg0KICAgIGlmICghJHRoaXMtPm1vZHVsZSgnY29ja3BpdCcpLT5nZXRHcm91cFJpZ2h0cygnc2luZ2xldG9ucycpICYmICEkdGhpcy0+bW9kdWxlKCdzaW5nbGV0b25zJyktPmdldFNpbmdsZXRvbnNJbkdyb3VwKCkpIHsNCg0KICAgICAgICAkdGhpcy0+YmluZCgnL3NpbmdsZXRvbnMvKicsIGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgcmV0dXJuICR0aGlzKCdhZG1pbicpLT5kZW55UmVxdWVzdCgpOw0KICAgICAgICB9KTsNCg0KICAgICAgICByZXR1cm47DQogICAgfQ0KDQogICAgLy8gYmluZCBhZG1pbiByb3V0ZXMgL3NpbmdsZXRvbi8qDQogICAgJHRoaXMtPmJpbmRDbGFzcygnU2luZ2xldG9uc1xcQ29udHJvbGxlclxcQWRtaW4nLCAnc2luZ2xldG9ucycpOw0KDQogICAgJGFjdGl2ZSA9IHN0cnBvcygkdGhpc1sncm91dGUnXSwgJy9zaW5nbGV0b25zJykgPT09IDA7DQoNCiAgICAvLyBhZGQgdG8gbW9kdWxlcyBtZW51DQogICAgJHRoaXMtPmhlbHBlcignYWRtaW4nKS0+YWRkTWVudUl0ZW0oJ21vZHVsZXMnLCBbDQogICAgICAgICdsYWJlbCcgPT4gJ1NpbmdsZXRvbnMnLA0KICAgICAgICAnaWNvbicgID0+ICdzaW5nbGV0b25zOmljb24uc3ZnJywNCiAgICAgICAgJ3JvdXRlJyA9PiAnL3NpbmdsZXRvbnMnLA0KICAgICAgICAnYWN0aXZlJyA9PiAkYWN0aXZlDQogICAgXSk7DQoNCiAgICBpZiAoJGFjdGl2ZSkgew0KICAgICAgICAkdGhpcy0+aGVscGVyKCdhZG1pbicpLT5mYXZpY29uID0gJ3NpbmdsZXRvbnM6aWNvbi5zdmcnOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIGxpc3RlbiB0byBhcHAgc2VhcmNoIHRvIGZpbHRlciBzaW5nbGV0b24NCiAgICAgKi8NCiAgICAkdGhpcy0+b24oJ2NvY2twaXQuc2VhcmNoJywgZnVuY3Rpb24oJHNlYXJjaCwgJGxpc3QpIHsNCg0KICAgICAgICBmb3JlYWNoICgkdGhpcy0+bW9kdWxlKCdzaW5nbGV0b25zJyktPmdldFNpbmdsZXRvbnNJbkdyb3VwKCkgYXMgJHNpbmdsZXRvbiA9PiAkbWV0YSkgew0KDQogICAgICAgICAgICBpZiAoc3RyaXBvcygkc2luZ2xldG9uLCAkc2VhcmNoKSE9PWZhbHNlIHx8IHN0cmlwb3MoJG1ldGFbJ2xhYmVsJ10sICRzZWFyY2gpIT09ZmFsc2UpIHsNCg0KICAgICAgICAgICAgICAgICRsaXN0W10gPSBbDQogICAgICAgICAgICAgICAgICAgICdpY29uJyAgPT4gJ3RoJywNCiAgICAgICAgICAgICAgICAgICAgJ3RpdGxlJyA9PiAkbWV0YVsnbGFiZWwnXSA/ICRtZXRhWydsYWJlbCddIDogJG1ldGFbJ25hbWUnXSwNCiAgICAgICAgICAgICAgICAgICAgJ3VybCcgICA9PiAkdGhpcy0+cm91dGVVcmwoJy9zaW5nbGV0b25zL3NpbmdsZXRvbi8nLiRtZXRhWyduYW1lJ10pDQogICAgICAgICAgICAgICAgXTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0pOw0KDQogICAgLy8gZGFzaGJvYXJkIHdpZGdldHMNCiAgICAkdGhpcy0+b24oJ2FkbWluLmRhc2hib2FyZC53aWRnZXRzJywgZnVuY3Rpb24oJHdpZGdldHMpIHsNCg0KICAgICAgICAkc2luZ2xldG9ucyA9ICR0aGlzLT5tb2R1bGUoJ3NpbmdsZXRvbnMnKS0+Z2V0U2luZ2xldG9uc0luR3JvdXAoKTsNCg0KICAgICAgICAkd2lkZ2V0c1tdID0gWw0KICAgICAgICAgICAgJ25hbWUnICAgID0+ICdzaW5nbGV0b24nLA0KICAgICAgICAgICAgJ2NvbnRlbnQnID0+ICR0aGlzLT52aWV3KCdzaW5nbGV0b25zOnZpZXdzL3dpZGdldHMvZGFzaGJvYXJkLnBocCcsIGNvbXBhY3QoJ3NpbmdsZXRvbnMnKSksDQogICAgICAgICAgICAnYXJlYScgICAgPT4gJ2FzaWRlLXJpZ2h0Jw0KICAgICAgICBdOw0KDQogICAgfSwgMTAwKTsNCg0KICAgIC8vIHJlZ2lzdGVyIGV2ZW50cyBmb3IgYXV0b2NvbXBsZXRlDQogICAgJHRoaXMtPm9uKCdjb2NrcGl0LndlYmhvb2suZXZlbnRzJywgZnVuY3Rpb24oJHRyaWdnZXJzKSB7DQoNCiAgICAgICAgZm9yZWFjaChbDQogICAgICAgICAgICAnc2luZ2xldG9uLmdldERhdGEuYWZ0ZXInLA0KICAgICAgICAgICAgJ3NpbmdsZXRvbi5nZXREYXRhLmFmdGVyLnskbmFtZX0nLA0KICAgICAgICAgICAgJ3NpbmdsZXRvbi5yZW1vdmUnLA0KICAgICAgICAgICAgJ3NpbmdsZXRvbi5yZW1vdmUueyRuYW1lfScsDQogICAgICAgICAgICAnc2luZ2xldG9uLnNhdmUuYWZ0ZXInLA0KICAgICAgICAgICAgJ3NpbmdsZXRvbi5zYXZlLmFmdGVyLnskbmFtZX0nLA0KICAgICAgICAgICAgJ3NpbmdsZXRvbi5zYXZlLmJlZm9yZScsDQogICAgICAgICAgICAnc2luZ2xldG9uLnNhdmUuYmVmb3JlLnskbmFtZX0nLA0KICAgICAgICAgICAgJ3NpbmdsZXRvbi5zYXZlRGF0YS5hZnRlcicsDQogICAgICAgICAgICAnc2luZ2xldG9uLnNhdmVEYXRhLmFmdGVyLnskbmFtZX0nLA0KICAgICAgICAgICAgJ3NpbmdsZXRvbi5zYXZlRGF0YS5iZWZvcmUnLA0KICAgICAgICAgICAgJ3NpbmdsZXRvbi5zYXZlRGF0YS5iZWZvcmUueyRuYW1lfScsDQogICAgICAgIF0gYXMgJiRldnQpIHsgJHRyaWdnZXJzW10gPSAkZXZ0OyB9DQogICAgfSk7DQoNCiAgICAvLyB1cGRhdGUgYXNzZXRzIHJlZmVyZW5jZXMgb24gZmlsZSB1cGRhdGUNCiAgICAkdGhpcy0+b24oJ2NvY2twaXQuYXNzZXRzLnVwZGF0ZWZpbGUnLCBmdW5jdGlvbigkYXNzZXQpIHsNCg0KICAgICAgICAkaWQgPSAkYXNzZXRbJ19pZCddOw0KICAgICAgICAkZmlsdGVyID0gKCR0aGlzLT5zdG9yYWdlLT50eXBlID09ICdtb25nb2xpdGUnKSA/DQogICAgICAgICAgICBmdW5jdGlvbiAoJGRvYykgdXNlICgkaWQpIHsgcmV0dXJuIHN0cnBvcyhqc29uX2VuY29kZSgkZG9jKSwgJGlkKSAhPT0gZmFsc2U7fQ0KICAgICAgICAgICAgOg0KICAgICAgICAgICAgWyckd2hlcmUnID0+ICJmdW5jdGlvbigpIHsgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMpLmluZGV4T2YoJ3skaWR9JykgPiAtMTsgfSJdDQogICAgICAgIDsNCg0KICAgICAgICAkdXBkYXRlID0gZnVuY3Rpb24oJiRpdGVtcykgdXNlKCRhc3NldCwgJGlkLCAmJHVwZGF0ZSkgew0KDQogICAgICAgICAgICBpZiAoIWlzX2FycmF5KCRpdGVtcykpIHJldHVybiAkaXRlbXM7DQoNCiAgICAgICAgICAgIGZvcmVhY2ggKCRpdGVtcyBhcyAkayA9PiAmJHYpIHsNCiAgICAgICAgICAgICAgICBpZiAoIWlzX2FycmF5KCR2KSkgY29udGludWU7DQogICAgICAgICAgICAgICAgaWYgKGlzX2FycmF5KCRpdGVtc1ska10pKSAkaXRlbXNbJGtdID0gJHVwZGF0ZSgkaXRlbXNbJGtdKTsNCiAgICAgICAgICAgICAgICBpZiAoaXNzZXQoJHZbJ19pZCddKSAmJiAkdlsnX2lkJ10gPT0gJGlkKSAkaXRlbXNbJGtdID0gJGFzc2V0Ow0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgcmV0dXJuICRpdGVtczsNCiAgICAgICAgfTsNCg0KICAgICAgICAkc2luZ2xldG9ucyA9ICR0aGlzLT5zdG9yYWdlLT5maW5kKCdzaW5nbGV0b25zJywgWydmaWx0ZXInID0+ICRmaWx0ZXJdKS0+dG9BcnJheSgpOw0KDQogICAgICAgIGlmICghY291bnQoJHNpbmdsZXRvbnMpKSByZXR1cm47DQoNCiAgICAgICAgJHNpbmdsZXRvbnMgPSAkdXBkYXRlKCRzaW5nbGV0b25zKTsNCg0KICAgICAgICBmb3JlYWNoICgkc2luZ2xldG9ucyBhcyAkc2luZ2xldG9uKSB7DQogICAgICAgICAgICAkdGhpcy0+c3RvcmFnZS0+c2F2ZSgnc2luZ2xldG9ucycsICRzaW5nbGV0b24pOw0KICAgICAgICB9DQogICAgfSk7DQp9KTsNCiI7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBuYW1lc3BhY2VzIjthOjA6e31zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGluY2x1ZGVzIjthOjA6e31zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGZ1bmN0aW9ucyI7YTowOnt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBjb25zdGFudHMiO2E6MDp7fXM6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAY2xhc3NlcyI7YTowOnt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBpbnRlcmZhY2VzIjthOjA6e31zOjQxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHRyYWl0cyI7YTowOnt9czo0MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBlbnVtcyI7YTowOnt9czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBtZXRhZGF0YSI7YTowOnt9fQ==";