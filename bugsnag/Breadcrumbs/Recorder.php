<?php namespace Bugsnag\Breadcrumbs;use Countable;use Iterator;class Recorder implements Countable,Iterator{const MAX_ITEMS=25;protected $breadcrumbs=[];protected $head=0;protected $pointer=0;protected $position=0;public function record(Breadcrumb $breadcrumb){if($this->breadcrumbs&&$this->pointer===$this->head){$this->head=($this->head+1)%static::MAX_ITEMS;}$this->breadcrumbs[$this->pointer]=$breadcrumb;$this->pointer=($this->pointer+1)%static::MAX_ITEMS;}public function clear(){$this->head=0;$this->pointer=0;$this->position=0;$this->breadcrumbs=[];}#[\ReturnTypeWillChange]public function count(){return count($this->breadcrumbs);}#[\ReturnTypeWillChange]public function current(){return $this->breadcrumbs[($this->head+$this->position)%static::MAX_ITEMS];}#[\ReturnTypeWillChange]public function key(){return $this->position;}#[\ReturnTypeWillChange]public function next(){$this->position++;}#[\ReturnTypeWillChange]public function rewind(){$this->position=0;}#[\ReturnTypeWillChange]public function valid(){return $this->position<$this->count();}}